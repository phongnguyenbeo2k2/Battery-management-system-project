
BMS_ESD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004570  08004570  00014570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a0  080045a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080045a0  080045a0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045a0  080045a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045a0  080045a0  000145a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045a4  080045a4  000145a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080045a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  2000000c  080045b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080045b4  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010b81  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b30  00000000  00000000  00030bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  00033728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0f  00000000  00000000  000347f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010e4e  00000000  00000000  000354ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001612d  00000000  00000000  0004634d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00063ab3  00000000  00000000  0005c47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d48  00000000  00000000  000bff30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000c3c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004558 	.word	0x08004558

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004558 	.word	0x08004558

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f89f 	bl	800036c <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f82b 	bl	8000294 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f891 	bl	800036c <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f887 	bl	800036c <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f837 	bl	80002e0 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f82d 	bl	80002e0 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__eqsf2>:
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	0042      	lsls	r2, r0, #1
 8000298:	0245      	lsls	r5, r0, #9
 800029a:	024e      	lsls	r6, r1, #9
 800029c:	004c      	lsls	r4, r1, #1
 800029e:	0fc3      	lsrs	r3, r0, #31
 80002a0:	0a6d      	lsrs	r5, r5, #9
 80002a2:	2001      	movs	r0, #1
 80002a4:	0e12      	lsrs	r2, r2, #24
 80002a6:	0a76      	lsrs	r6, r6, #9
 80002a8:	0e24      	lsrs	r4, r4, #24
 80002aa:	0fc9      	lsrs	r1, r1, #31
 80002ac:	2aff      	cmp	r2, #255	; 0xff
 80002ae:	d006      	beq.n	80002be <__eqsf2+0x2a>
 80002b0:	2cff      	cmp	r4, #255	; 0xff
 80002b2:	d003      	beq.n	80002bc <__eqsf2+0x28>
 80002b4:	42a2      	cmp	r2, r4
 80002b6:	d101      	bne.n	80002bc <__eqsf2+0x28>
 80002b8:	42b5      	cmp	r5, r6
 80002ba:	d006      	beq.n	80002ca <__eqsf2+0x36>
 80002bc:	bd70      	pop	{r4, r5, r6, pc}
 80002be:	2d00      	cmp	r5, #0
 80002c0:	d1fc      	bne.n	80002bc <__eqsf2+0x28>
 80002c2:	2cff      	cmp	r4, #255	; 0xff
 80002c4:	d1fa      	bne.n	80002bc <__eqsf2+0x28>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d1f8      	bne.n	80002bc <__eqsf2+0x28>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d006      	beq.n	80002dc <__eqsf2+0x48>
 80002ce:	2001      	movs	r0, #1
 80002d0:	2a00      	cmp	r2, #0
 80002d2:	d1f3      	bne.n	80002bc <__eqsf2+0x28>
 80002d4:	0028      	movs	r0, r5
 80002d6:	1e43      	subs	r3, r0, #1
 80002d8:	4198      	sbcs	r0, r3
 80002da:	e7ef      	b.n	80002bc <__eqsf2+0x28>
 80002dc:	2000      	movs	r0, #0
 80002de:	e7ed      	b.n	80002bc <__eqsf2+0x28>

080002e0 <__gesf2>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	0042      	lsls	r2, r0, #1
 80002e4:	0245      	lsls	r5, r0, #9
 80002e6:	024e      	lsls	r6, r1, #9
 80002e8:	004c      	lsls	r4, r1, #1
 80002ea:	0fc3      	lsrs	r3, r0, #31
 80002ec:	0a6d      	lsrs	r5, r5, #9
 80002ee:	0e12      	lsrs	r2, r2, #24
 80002f0:	0a76      	lsrs	r6, r6, #9
 80002f2:	0e24      	lsrs	r4, r4, #24
 80002f4:	0fc8      	lsrs	r0, r1, #31
 80002f6:	2aff      	cmp	r2, #255	; 0xff
 80002f8:	d01b      	beq.n	8000332 <__gesf2+0x52>
 80002fa:	2cff      	cmp	r4, #255	; 0xff
 80002fc:	d00e      	beq.n	800031c <__gesf2+0x3c>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d11b      	bne.n	800033a <__gesf2+0x5a>
 8000302:	2c00      	cmp	r4, #0
 8000304:	d101      	bne.n	800030a <__gesf2+0x2a>
 8000306:	2e00      	cmp	r6, #0
 8000308:	d01c      	beq.n	8000344 <__gesf2+0x64>
 800030a:	2d00      	cmp	r5, #0
 800030c:	d00c      	beq.n	8000328 <__gesf2+0x48>
 800030e:	4283      	cmp	r3, r0
 8000310:	d01c      	beq.n	800034c <__gesf2+0x6c>
 8000312:	2102      	movs	r1, #2
 8000314:	1e58      	subs	r0, r3, #1
 8000316:	4008      	ands	r0, r1
 8000318:	3801      	subs	r0, #1
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	2e00      	cmp	r6, #0
 800031e:	d122      	bne.n	8000366 <__gesf2+0x86>
 8000320:	2a00      	cmp	r2, #0
 8000322:	d1f4      	bne.n	800030e <__gesf2+0x2e>
 8000324:	2d00      	cmp	r5, #0
 8000326:	d1f2      	bne.n	800030e <__gesf2+0x2e>
 8000328:	2800      	cmp	r0, #0
 800032a:	d1f6      	bne.n	800031a <__gesf2+0x3a>
 800032c:	2001      	movs	r0, #1
 800032e:	4240      	negs	r0, r0
 8000330:	e7f3      	b.n	800031a <__gesf2+0x3a>
 8000332:	2d00      	cmp	r5, #0
 8000334:	d117      	bne.n	8000366 <__gesf2+0x86>
 8000336:	2cff      	cmp	r4, #255	; 0xff
 8000338:	d0f0      	beq.n	800031c <__gesf2+0x3c>
 800033a:	2c00      	cmp	r4, #0
 800033c:	d1e7      	bne.n	800030e <__gesf2+0x2e>
 800033e:	2e00      	cmp	r6, #0
 8000340:	d1e5      	bne.n	800030e <__gesf2+0x2e>
 8000342:	e7e6      	b.n	8000312 <__gesf2+0x32>
 8000344:	2000      	movs	r0, #0
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e7      	beq.n	800031a <__gesf2+0x3a>
 800034a:	e7e2      	b.n	8000312 <__gesf2+0x32>
 800034c:	42a2      	cmp	r2, r4
 800034e:	dc05      	bgt.n	800035c <__gesf2+0x7c>
 8000350:	dbea      	blt.n	8000328 <__gesf2+0x48>
 8000352:	42b5      	cmp	r5, r6
 8000354:	d802      	bhi.n	800035c <__gesf2+0x7c>
 8000356:	d3e7      	bcc.n	8000328 <__gesf2+0x48>
 8000358:	2000      	movs	r0, #0
 800035a:	e7de      	b.n	800031a <__gesf2+0x3a>
 800035c:	4243      	negs	r3, r0
 800035e:	4158      	adcs	r0, r3
 8000360:	0040      	lsls	r0, r0, #1
 8000362:	3801      	subs	r0, #1
 8000364:	e7d9      	b.n	800031a <__gesf2+0x3a>
 8000366:	2002      	movs	r0, #2
 8000368:	4240      	negs	r0, r0
 800036a:	e7d6      	b.n	800031a <__gesf2+0x3a>

0800036c <__lesf2>:
 800036c:	b570      	push	{r4, r5, r6, lr}
 800036e:	0042      	lsls	r2, r0, #1
 8000370:	0245      	lsls	r5, r0, #9
 8000372:	024e      	lsls	r6, r1, #9
 8000374:	004c      	lsls	r4, r1, #1
 8000376:	0fc3      	lsrs	r3, r0, #31
 8000378:	0a6d      	lsrs	r5, r5, #9
 800037a:	0e12      	lsrs	r2, r2, #24
 800037c:	0a76      	lsrs	r6, r6, #9
 800037e:	0e24      	lsrs	r4, r4, #24
 8000380:	0fc8      	lsrs	r0, r1, #31
 8000382:	2aff      	cmp	r2, #255	; 0xff
 8000384:	d00b      	beq.n	800039e <__lesf2+0x32>
 8000386:	2cff      	cmp	r4, #255	; 0xff
 8000388:	d00d      	beq.n	80003a6 <__lesf2+0x3a>
 800038a:	2a00      	cmp	r2, #0
 800038c:	d11f      	bne.n	80003ce <__lesf2+0x62>
 800038e:	2c00      	cmp	r4, #0
 8000390:	d116      	bne.n	80003c0 <__lesf2+0x54>
 8000392:	2e00      	cmp	r6, #0
 8000394:	d114      	bne.n	80003c0 <__lesf2+0x54>
 8000396:	2000      	movs	r0, #0
 8000398:	2d00      	cmp	r5, #0
 800039a:	d010      	beq.n	80003be <__lesf2+0x52>
 800039c:	e009      	b.n	80003b2 <__lesf2+0x46>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d10c      	bne.n	80003bc <__lesf2+0x50>
 80003a2:	2cff      	cmp	r4, #255	; 0xff
 80003a4:	d113      	bne.n	80003ce <__lesf2+0x62>
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d108      	bne.n	80003bc <__lesf2+0x50>
 80003aa:	2a00      	cmp	r2, #0
 80003ac:	d008      	beq.n	80003c0 <__lesf2+0x54>
 80003ae:	4283      	cmp	r3, r0
 80003b0:	d012      	beq.n	80003d8 <__lesf2+0x6c>
 80003b2:	2102      	movs	r1, #2
 80003b4:	1e58      	subs	r0, r3, #1
 80003b6:	4008      	ands	r0, r1
 80003b8:	3801      	subs	r0, #1
 80003ba:	e000      	b.n	80003be <__lesf2+0x52>
 80003bc:	2002      	movs	r0, #2
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	2d00      	cmp	r5, #0
 80003c2:	d1f4      	bne.n	80003ae <__lesf2+0x42>
 80003c4:	2800      	cmp	r0, #0
 80003c6:	d1fa      	bne.n	80003be <__lesf2+0x52>
 80003c8:	2001      	movs	r0, #1
 80003ca:	4240      	negs	r0, r0
 80003cc:	e7f7      	b.n	80003be <__lesf2+0x52>
 80003ce:	2c00      	cmp	r4, #0
 80003d0:	d1ed      	bne.n	80003ae <__lesf2+0x42>
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1eb      	bne.n	80003ae <__lesf2+0x42>
 80003d6:	e7ec      	b.n	80003b2 <__lesf2+0x46>
 80003d8:	42a2      	cmp	r2, r4
 80003da:	dc05      	bgt.n	80003e8 <__lesf2+0x7c>
 80003dc:	dbf2      	blt.n	80003c4 <__lesf2+0x58>
 80003de:	42b5      	cmp	r5, r6
 80003e0:	d802      	bhi.n	80003e8 <__lesf2+0x7c>
 80003e2:	d3ef      	bcc.n	80003c4 <__lesf2+0x58>
 80003e4:	2000      	movs	r0, #0
 80003e6:	e7ea      	b.n	80003be <__lesf2+0x52>
 80003e8:	4243      	negs	r3, r0
 80003ea:	4158      	adcs	r0, r3
 80003ec:	0040      	lsls	r0, r0, #1
 80003ee:	3801      	subs	r0, #1
 80003f0:	e7e5      	b.n	80003be <__lesf2+0x52>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_ui2f>:
 80003f4:	b570      	push	{r4, r5, r6, lr}
 80003f6:	1e04      	subs	r4, r0, #0
 80003f8:	d00e      	beq.n	8000418 <__aeabi_ui2f+0x24>
 80003fa:	f000 fbd3 	bl	8000ba4 <__clzsi2>
 80003fe:	239e      	movs	r3, #158	; 0x9e
 8000400:	0001      	movs	r1, r0
 8000402:	1a1b      	subs	r3, r3, r0
 8000404:	2b96      	cmp	r3, #150	; 0x96
 8000406:	dc0c      	bgt.n	8000422 <__aeabi_ui2f+0x2e>
 8000408:	2808      	cmp	r0, #8
 800040a:	d02c      	beq.n	8000466 <__aeabi_ui2f+0x72>
 800040c:	3908      	subs	r1, #8
 800040e:	408c      	lsls	r4, r1
 8000410:	0264      	lsls	r4, r4, #9
 8000412:	0a64      	lsrs	r4, r4, #9
 8000414:	b2d8      	uxtb	r0, r3
 8000416:	e001      	b.n	800041c <__aeabi_ui2f+0x28>
 8000418:	2000      	movs	r0, #0
 800041a:	2400      	movs	r4, #0
 800041c:	05c0      	lsls	r0, r0, #23
 800041e:	4320      	orrs	r0, r4
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	2b99      	cmp	r3, #153	; 0x99
 8000424:	dd0a      	ble.n	800043c <__aeabi_ui2f+0x48>
 8000426:	0002      	movs	r2, r0
 8000428:	0020      	movs	r0, r4
 800042a:	321b      	adds	r2, #27
 800042c:	4090      	lsls	r0, r2
 800042e:	0002      	movs	r2, r0
 8000430:	1e50      	subs	r0, r2, #1
 8000432:	4182      	sbcs	r2, r0
 8000434:	2005      	movs	r0, #5
 8000436:	1a40      	subs	r0, r0, r1
 8000438:	40c4      	lsrs	r4, r0
 800043a:	4314      	orrs	r4, r2
 800043c:	2905      	cmp	r1, #5
 800043e:	dc16      	bgt.n	800046e <__aeabi_ui2f+0x7a>
 8000440:	0022      	movs	r2, r4
 8000442:	480f      	ldr	r0, [pc, #60]	; (8000480 <__aeabi_ui2f+0x8c>)
 8000444:	4002      	ands	r2, r0
 8000446:	0765      	lsls	r5, r4, #29
 8000448:	d009      	beq.n	800045e <__aeabi_ui2f+0x6a>
 800044a:	250f      	movs	r5, #15
 800044c:	402c      	ands	r4, r5
 800044e:	2c04      	cmp	r4, #4
 8000450:	d005      	beq.n	800045e <__aeabi_ui2f+0x6a>
 8000452:	3204      	adds	r2, #4
 8000454:	0154      	lsls	r4, r2, #5
 8000456:	d502      	bpl.n	800045e <__aeabi_ui2f+0x6a>
 8000458:	239f      	movs	r3, #159	; 0x9f
 800045a:	4002      	ands	r2, r0
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	0192      	lsls	r2, r2, #6
 8000460:	0a54      	lsrs	r4, r2, #9
 8000462:	b2d8      	uxtb	r0, r3
 8000464:	e7da      	b.n	800041c <__aeabi_ui2f+0x28>
 8000466:	0264      	lsls	r4, r4, #9
 8000468:	2096      	movs	r0, #150	; 0x96
 800046a:	0a64      	lsrs	r4, r4, #9
 800046c:	e7d6      	b.n	800041c <__aeabi_ui2f+0x28>
 800046e:	1f4a      	subs	r2, r1, #5
 8000470:	4094      	lsls	r4, r2
 8000472:	0022      	movs	r2, r4
 8000474:	4802      	ldr	r0, [pc, #8]	; (8000480 <__aeabi_ui2f+0x8c>)
 8000476:	4002      	ands	r2, r0
 8000478:	0765      	lsls	r5, r4, #29
 800047a:	d0f0      	beq.n	800045e <__aeabi_ui2f+0x6a>
 800047c:	e7e5      	b.n	800044a <__aeabi_ui2f+0x56>
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	fbffffff 	.word	0xfbffffff

08000484 <__aeabi_dmul>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4645      	mov	r5, r8
 8000488:	46de      	mov	lr, fp
 800048a:	4657      	mov	r7, sl
 800048c:	464e      	mov	r6, r9
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	001f      	movs	r7, r3
 8000492:	030b      	lsls	r3, r1, #12
 8000494:	0b1b      	lsrs	r3, r3, #12
 8000496:	469b      	mov	fp, r3
 8000498:	004d      	lsls	r5, r1, #1
 800049a:	0fcb      	lsrs	r3, r1, #31
 800049c:	0004      	movs	r4, r0
 800049e:	4691      	mov	r9, r2
 80004a0:	4698      	mov	r8, r3
 80004a2:	b087      	sub	sp, #28
 80004a4:	0d6d      	lsrs	r5, r5, #21
 80004a6:	d100      	bne.n	80004aa <__aeabi_dmul+0x26>
 80004a8:	e1cd      	b.n	8000846 <__aeabi_dmul+0x3c2>
 80004aa:	4bce      	ldr	r3, [pc, #824]	; (80007e4 <__aeabi_dmul+0x360>)
 80004ac:	429d      	cmp	r5, r3
 80004ae:	d100      	bne.n	80004b2 <__aeabi_dmul+0x2e>
 80004b0:	e1e9      	b.n	8000886 <__aeabi_dmul+0x402>
 80004b2:	465a      	mov	r2, fp
 80004b4:	0f43      	lsrs	r3, r0, #29
 80004b6:	00d2      	lsls	r2, r2, #3
 80004b8:	4313      	orrs	r3, r2
 80004ba:	2280      	movs	r2, #128	; 0x80
 80004bc:	0412      	lsls	r2, r2, #16
 80004be:	431a      	orrs	r2, r3
 80004c0:	00c3      	lsls	r3, r0, #3
 80004c2:	469a      	mov	sl, r3
 80004c4:	4bc8      	ldr	r3, [pc, #800]	; (80007e8 <__aeabi_dmul+0x364>)
 80004c6:	4693      	mov	fp, r2
 80004c8:	469c      	mov	ip, r3
 80004ca:	2300      	movs	r3, #0
 80004cc:	2600      	movs	r6, #0
 80004ce:	4465      	add	r5, ip
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	033c      	lsls	r4, r7, #12
 80004d4:	007b      	lsls	r3, r7, #1
 80004d6:	4648      	mov	r0, r9
 80004d8:	0b24      	lsrs	r4, r4, #12
 80004da:	0d5b      	lsrs	r3, r3, #21
 80004dc:	0fff      	lsrs	r7, r7, #31
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d100      	bne.n	80004e4 <__aeabi_dmul+0x60>
 80004e2:	e189      	b.n	80007f8 <__aeabi_dmul+0x374>
 80004e4:	4abf      	ldr	r2, [pc, #764]	; (80007e4 <__aeabi_dmul+0x360>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d019      	beq.n	800051e <__aeabi_dmul+0x9a>
 80004ea:	0f42      	lsrs	r2, r0, #29
 80004ec:	00e4      	lsls	r4, r4, #3
 80004ee:	4322      	orrs	r2, r4
 80004f0:	2480      	movs	r4, #128	; 0x80
 80004f2:	0424      	lsls	r4, r4, #16
 80004f4:	4314      	orrs	r4, r2
 80004f6:	4abc      	ldr	r2, [pc, #752]	; (80007e8 <__aeabi_dmul+0x364>)
 80004f8:	2100      	movs	r1, #0
 80004fa:	4694      	mov	ip, r2
 80004fc:	4642      	mov	r2, r8
 80004fe:	4463      	add	r3, ip
 8000500:	195b      	adds	r3, r3, r5
 8000502:	9301      	str	r3, [sp, #4]
 8000504:	9b01      	ldr	r3, [sp, #4]
 8000506:	407a      	eors	r2, r7
 8000508:	3301      	adds	r3, #1
 800050a:	00c0      	lsls	r0, r0, #3
 800050c:	b2d2      	uxtb	r2, r2
 800050e:	9302      	str	r3, [sp, #8]
 8000510:	2e0a      	cmp	r6, #10
 8000512:	dd1c      	ble.n	800054e <__aeabi_dmul+0xca>
 8000514:	003a      	movs	r2, r7
 8000516:	2e0b      	cmp	r6, #11
 8000518:	d05e      	beq.n	80005d8 <__aeabi_dmul+0x154>
 800051a:	4647      	mov	r7, r8
 800051c:	e056      	b.n	80005cc <__aeabi_dmul+0x148>
 800051e:	4649      	mov	r1, r9
 8000520:	4bb0      	ldr	r3, [pc, #704]	; (80007e4 <__aeabi_dmul+0x360>)
 8000522:	4321      	orrs	r1, r4
 8000524:	18eb      	adds	r3, r5, r3
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	2900      	cmp	r1, #0
 800052a:	d12a      	bne.n	8000582 <__aeabi_dmul+0xfe>
 800052c:	2080      	movs	r0, #128	; 0x80
 800052e:	2202      	movs	r2, #2
 8000530:	0100      	lsls	r0, r0, #4
 8000532:	002b      	movs	r3, r5
 8000534:	4684      	mov	ip, r0
 8000536:	4316      	orrs	r6, r2
 8000538:	4642      	mov	r2, r8
 800053a:	4463      	add	r3, ip
 800053c:	407a      	eors	r2, r7
 800053e:	b2d2      	uxtb	r2, r2
 8000540:	9302      	str	r3, [sp, #8]
 8000542:	2e0a      	cmp	r6, #10
 8000544:	dd00      	ble.n	8000548 <__aeabi_dmul+0xc4>
 8000546:	e231      	b.n	80009ac <__aeabi_dmul+0x528>
 8000548:	2000      	movs	r0, #0
 800054a:	2400      	movs	r4, #0
 800054c:	2102      	movs	r1, #2
 800054e:	2e02      	cmp	r6, #2
 8000550:	dc26      	bgt.n	80005a0 <__aeabi_dmul+0x11c>
 8000552:	3e01      	subs	r6, #1
 8000554:	2e01      	cmp	r6, #1
 8000556:	d852      	bhi.n	80005fe <__aeabi_dmul+0x17a>
 8000558:	2902      	cmp	r1, #2
 800055a:	d04c      	beq.n	80005f6 <__aeabi_dmul+0x172>
 800055c:	2901      	cmp	r1, #1
 800055e:	d000      	beq.n	8000562 <__aeabi_dmul+0xde>
 8000560:	e118      	b.n	8000794 <__aeabi_dmul+0x310>
 8000562:	2300      	movs	r3, #0
 8000564:	2400      	movs	r4, #0
 8000566:	2500      	movs	r5, #0
 8000568:	051b      	lsls	r3, r3, #20
 800056a:	4323      	orrs	r3, r4
 800056c:	07d2      	lsls	r2, r2, #31
 800056e:	4313      	orrs	r3, r2
 8000570:	0028      	movs	r0, r5
 8000572:	0019      	movs	r1, r3
 8000574:	b007      	add	sp, #28
 8000576:	bcf0      	pop	{r4, r5, r6, r7}
 8000578:	46bb      	mov	fp, r7
 800057a:	46b2      	mov	sl, r6
 800057c:	46a9      	mov	r9, r5
 800057e:	46a0      	mov	r8, r4
 8000580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000582:	2180      	movs	r1, #128	; 0x80
 8000584:	2203      	movs	r2, #3
 8000586:	0109      	lsls	r1, r1, #4
 8000588:	002b      	movs	r3, r5
 800058a:	468c      	mov	ip, r1
 800058c:	4316      	orrs	r6, r2
 800058e:	4642      	mov	r2, r8
 8000590:	4463      	add	r3, ip
 8000592:	407a      	eors	r2, r7
 8000594:	b2d2      	uxtb	r2, r2
 8000596:	9302      	str	r3, [sp, #8]
 8000598:	2e0a      	cmp	r6, #10
 800059a:	dd00      	ble.n	800059e <__aeabi_dmul+0x11a>
 800059c:	e228      	b.n	80009f0 <__aeabi_dmul+0x56c>
 800059e:	2103      	movs	r1, #3
 80005a0:	2501      	movs	r5, #1
 80005a2:	40b5      	lsls	r5, r6
 80005a4:	46ac      	mov	ip, r5
 80005a6:	26a6      	movs	r6, #166	; 0xa6
 80005a8:	4663      	mov	r3, ip
 80005aa:	00f6      	lsls	r6, r6, #3
 80005ac:	4035      	ands	r5, r6
 80005ae:	4233      	tst	r3, r6
 80005b0:	d10b      	bne.n	80005ca <__aeabi_dmul+0x146>
 80005b2:	2690      	movs	r6, #144	; 0x90
 80005b4:	00b6      	lsls	r6, r6, #2
 80005b6:	4233      	tst	r3, r6
 80005b8:	d118      	bne.n	80005ec <__aeabi_dmul+0x168>
 80005ba:	3eb9      	subs	r6, #185	; 0xb9
 80005bc:	3eff      	subs	r6, #255	; 0xff
 80005be:	421e      	tst	r6, r3
 80005c0:	d01d      	beq.n	80005fe <__aeabi_dmul+0x17a>
 80005c2:	46a3      	mov	fp, r4
 80005c4:	4682      	mov	sl, r0
 80005c6:	9100      	str	r1, [sp, #0]
 80005c8:	e000      	b.n	80005cc <__aeabi_dmul+0x148>
 80005ca:	0017      	movs	r7, r2
 80005cc:	9900      	ldr	r1, [sp, #0]
 80005ce:	003a      	movs	r2, r7
 80005d0:	2902      	cmp	r1, #2
 80005d2:	d010      	beq.n	80005f6 <__aeabi_dmul+0x172>
 80005d4:	465c      	mov	r4, fp
 80005d6:	4650      	mov	r0, sl
 80005d8:	2903      	cmp	r1, #3
 80005da:	d1bf      	bne.n	800055c <__aeabi_dmul+0xd8>
 80005dc:	2380      	movs	r3, #128	; 0x80
 80005de:	031b      	lsls	r3, r3, #12
 80005e0:	431c      	orrs	r4, r3
 80005e2:	0324      	lsls	r4, r4, #12
 80005e4:	0005      	movs	r5, r0
 80005e6:	4b7f      	ldr	r3, [pc, #508]	; (80007e4 <__aeabi_dmul+0x360>)
 80005e8:	0b24      	lsrs	r4, r4, #12
 80005ea:	e7bd      	b.n	8000568 <__aeabi_dmul+0xe4>
 80005ec:	2480      	movs	r4, #128	; 0x80
 80005ee:	2200      	movs	r2, #0
 80005f0:	4b7c      	ldr	r3, [pc, #496]	; (80007e4 <__aeabi_dmul+0x360>)
 80005f2:	0324      	lsls	r4, r4, #12
 80005f4:	e7b8      	b.n	8000568 <__aeabi_dmul+0xe4>
 80005f6:	2400      	movs	r4, #0
 80005f8:	2500      	movs	r5, #0
 80005fa:	4b7a      	ldr	r3, [pc, #488]	; (80007e4 <__aeabi_dmul+0x360>)
 80005fc:	e7b4      	b.n	8000568 <__aeabi_dmul+0xe4>
 80005fe:	4653      	mov	r3, sl
 8000600:	041e      	lsls	r6, r3, #16
 8000602:	0c36      	lsrs	r6, r6, #16
 8000604:	0c1f      	lsrs	r7, r3, #16
 8000606:	0033      	movs	r3, r6
 8000608:	0c01      	lsrs	r1, r0, #16
 800060a:	0400      	lsls	r0, r0, #16
 800060c:	0c00      	lsrs	r0, r0, #16
 800060e:	4343      	muls	r3, r0
 8000610:	4698      	mov	r8, r3
 8000612:	0003      	movs	r3, r0
 8000614:	437b      	muls	r3, r7
 8000616:	4699      	mov	r9, r3
 8000618:	0033      	movs	r3, r6
 800061a:	434b      	muls	r3, r1
 800061c:	469c      	mov	ip, r3
 800061e:	4643      	mov	r3, r8
 8000620:	000d      	movs	r5, r1
 8000622:	0c1b      	lsrs	r3, r3, #16
 8000624:	469a      	mov	sl, r3
 8000626:	437d      	muls	r5, r7
 8000628:	44cc      	add	ip, r9
 800062a:	44d4      	add	ip, sl
 800062c:	9500      	str	r5, [sp, #0]
 800062e:	45e1      	cmp	r9, ip
 8000630:	d904      	bls.n	800063c <__aeabi_dmul+0x1b8>
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	025b      	lsls	r3, r3, #9
 8000636:	4699      	mov	r9, r3
 8000638:	444d      	add	r5, r9
 800063a:	9500      	str	r5, [sp, #0]
 800063c:	4663      	mov	r3, ip
 800063e:	0c1b      	lsrs	r3, r3, #16
 8000640:	001d      	movs	r5, r3
 8000642:	4663      	mov	r3, ip
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	469c      	mov	ip, r3
 8000648:	4643      	mov	r3, r8
 800064a:	041b      	lsls	r3, r3, #16
 800064c:	0c1b      	lsrs	r3, r3, #16
 800064e:	4698      	mov	r8, r3
 8000650:	4663      	mov	r3, ip
 8000652:	4443      	add	r3, r8
 8000654:	9303      	str	r3, [sp, #12]
 8000656:	0c23      	lsrs	r3, r4, #16
 8000658:	4698      	mov	r8, r3
 800065a:	0033      	movs	r3, r6
 800065c:	0424      	lsls	r4, r4, #16
 800065e:	0c24      	lsrs	r4, r4, #16
 8000660:	4363      	muls	r3, r4
 8000662:	469c      	mov	ip, r3
 8000664:	0023      	movs	r3, r4
 8000666:	437b      	muls	r3, r7
 8000668:	4699      	mov	r9, r3
 800066a:	4643      	mov	r3, r8
 800066c:	435e      	muls	r6, r3
 800066e:	435f      	muls	r7, r3
 8000670:	444e      	add	r6, r9
 8000672:	4663      	mov	r3, ip
 8000674:	46b2      	mov	sl, r6
 8000676:	0c1e      	lsrs	r6, r3, #16
 8000678:	4456      	add	r6, sl
 800067a:	45b1      	cmp	r9, r6
 800067c:	d903      	bls.n	8000686 <__aeabi_dmul+0x202>
 800067e:	2380      	movs	r3, #128	; 0x80
 8000680:	025b      	lsls	r3, r3, #9
 8000682:	4699      	mov	r9, r3
 8000684:	444f      	add	r7, r9
 8000686:	0c33      	lsrs	r3, r6, #16
 8000688:	4699      	mov	r9, r3
 800068a:	003b      	movs	r3, r7
 800068c:	444b      	add	r3, r9
 800068e:	9305      	str	r3, [sp, #20]
 8000690:	4663      	mov	r3, ip
 8000692:	46ac      	mov	ip, r5
 8000694:	041f      	lsls	r7, r3, #16
 8000696:	0c3f      	lsrs	r7, r7, #16
 8000698:	0436      	lsls	r6, r6, #16
 800069a:	19f6      	adds	r6, r6, r7
 800069c:	44b4      	add	ip, r6
 800069e:	4663      	mov	r3, ip
 80006a0:	9304      	str	r3, [sp, #16]
 80006a2:	465b      	mov	r3, fp
 80006a4:	0c1b      	lsrs	r3, r3, #16
 80006a6:	469c      	mov	ip, r3
 80006a8:	465b      	mov	r3, fp
 80006aa:	041f      	lsls	r7, r3, #16
 80006ac:	0c3f      	lsrs	r7, r7, #16
 80006ae:	003b      	movs	r3, r7
 80006b0:	4343      	muls	r3, r0
 80006b2:	4699      	mov	r9, r3
 80006b4:	4663      	mov	r3, ip
 80006b6:	4343      	muls	r3, r0
 80006b8:	469a      	mov	sl, r3
 80006ba:	464b      	mov	r3, r9
 80006bc:	4660      	mov	r0, ip
 80006be:	0c1b      	lsrs	r3, r3, #16
 80006c0:	469b      	mov	fp, r3
 80006c2:	4348      	muls	r0, r1
 80006c4:	4379      	muls	r1, r7
 80006c6:	4451      	add	r1, sl
 80006c8:	4459      	add	r1, fp
 80006ca:	458a      	cmp	sl, r1
 80006cc:	d903      	bls.n	80006d6 <__aeabi_dmul+0x252>
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	025b      	lsls	r3, r3, #9
 80006d2:	469a      	mov	sl, r3
 80006d4:	4450      	add	r0, sl
 80006d6:	0c0b      	lsrs	r3, r1, #16
 80006d8:	469a      	mov	sl, r3
 80006da:	464b      	mov	r3, r9
 80006dc:	041b      	lsls	r3, r3, #16
 80006de:	0c1b      	lsrs	r3, r3, #16
 80006e0:	4699      	mov	r9, r3
 80006e2:	003b      	movs	r3, r7
 80006e4:	4363      	muls	r3, r4
 80006e6:	0409      	lsls	r1, r1, #16
 80006e8:	4645      	mov	r5, r8
 80006ea:	4449      	add	r1, r9
 80006ec:	4699      	mov	r9, r3
 80006ee:	4663      	mov	r3, ip
 80006f0:	435c      	muls	r4, r3
 80006f2:	436b      	muls	r3, r5
 80006f4:	469c      	mov	ip, r3
 80006f6:	464b      	mov	r3, r9
 80006f8:	0c1b      	lsrs	r3, r3, #16
 80006fa:	4698      	mov	r8, r3
 80006fc:	436f      	muls	r7, r5
 80006fe:	193f      	adds	r7, r7, r4
 8000700:	4447      	add	r7, r8
 8000702:	4450      	add	r0, sl
 8000704:	42bc      	cmp	r4, r7
 8000706:	d903      	bls.n	8000710 <__aeabi_dmul+0x28c>
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	025b      	lsls	r3, r3, #9
 800070c:	4698      	mov	r8, r3
 800070e:	44c4      	add	ip, r8
 8000710:	9b04      	ldr	r3, [sp, #16]
 8000712:	9d00      	ldr	r5, [sp, #0]
 8000714:	4698      	mov	r8, r3
 8000716:	4445      	add	r5, r8
 8000718:	42b5      	cmp	r5, r6
 800071a:	41b6      	sbcs	r6, r6
 800071c:	4273      	negs	r3, r6
 800071e:	4698      	mov	r8, r3
 8000720:	464b      	mov	r3, r9
 8000722:	041e      	lsls	r6, r3, #16
 8000724:	9b05      	ldr	r3, [sp, #20]
 8000726:	043c      	lsls	r4, r7, #16
 8000728:	4699      	mov	r9, r3
 800072a:	0c36      	lsrs	r6, r6, #16
 800072c:	19a4      	adds	r4, r4, r6
 800072e:	444c      	add	r4, r9
 8000730:	46a1      	mov	r9, r4
 8000732:	4683      	mov	fp, r0
 8000734:	186e      	adds	r6, r5, r1
 8000736:	44c1      	add	r9, r8
 8000738:	428e      	cmp	r6, r1
 800073a:	4189      	sbcs	r1, r1
 800073c:	44cb      	add	fp, r9
 800073e:	465d      	mov	r5, fp
 8000740:	4249      	negs	r1, r1
 8000742:	186d      	adds	r5, r5, r1
 8000744:	429c      	cmp	r4, r3
 8000746:	41a4      	sbcs	r4, r4
 8000748:	45c1      	cmp	r9, r8
 800074a:	419b      	sbcs	r3, r3
 800074c:	4583      	cmp	fp, r0
 800074e:	4180      	sbcs	r0, r0
 8000750:	428d      	cmp	r5, r1
 8000752:	4189      	sbcs	r1, r1
 8000754:	425b      	negs	r3, r3
 8000756:	4264      	negs	r4, r4
 8000758:	431c      	orrs	r4, r3
 800075a:	4240      	negs	r0, r0
 800075c:	9b03      	ldr	r3, [sp, #12]
 800075e:	4249      	negs	r1, r1
 8000760:	4301      	orrs	r1, r0
 8000762:	0270      	lsls	r0, r6, #9
 8000764:	0c3f      	lsrs	r7, r7, #16
 8000766:	4318      	orrs	r0, r3
 8000768:	19e4      	adds	r4, r4, r7
 800076a:	1e47      	subs	r7, r0, #1
 800076c:	41b8      	sbcs	r0, r7
 800076e:	1864      	adds	r4, r4, r1
 8000770:	4464      	add	r4, ip
 8000772:	0df6      	lsrs	r6, r6, #23
 8000774:	0261      	lsls	r1, r4, #9
 8000776:	4330      	orrs	r0, r6
 8000778:	0dec      	lsrs	r4, r5, #23
 800077a:	026e      	lsls	r6, r5, #9
 800077c:	430c      	orrs	r4, r1
 800077e:	4330      	orrs	r0, r6
 8000780:	01c9      	lsls	r1, r1, #7
 8000782:	d400      	bmi.n	8000786 <__aeabi_dmul+0x302>
 8000784:	e0f1      	b.n	800096a <__aeabi_dmul+0x4e6>
 8000786:	2101      	movs	r1, #1
 8000788:	0843      	lsrs	r3, r0, #1
 800078a:	4001      	ands	r1, r0
 800078c:	430b      	orrs	r3, r1
 800078e:	07e0      	lsls	r0, r4, #31
 8000790:	4318      	orrs	r0, r3
 8000792:	0864      	lsrs	r4, r4, #1
 8000794:	4915      	ldr	r1, [pc, #84]	; (80007ec <__aeabi_dmul+0x368>)
 8000796:	9b02      	ldr	r3, [sp, #8]
 8000798:	468c      	mov	ip, r1
 800079a:	4463      	add	r3, ip
 800079c:	2b00      	cmp	r3, #0
 800079e:	dc00      	bgt.n	80007a2 <__aeabi_dmul+0x31e>
 80007a0:	e097      	b.n	80008d2 <__aeabi_dmul+0x44e>
 80007a2:	0741      	lsls	r1, r0, #29
 80007a4:	d009      	beq.n	80007ba <__aeabi_dmul+0x336>
 80007a6:	210f      	movs	r1, #15
 80007a8:	4001      	ands	r1, r0
 80007aa:	2904      	cmp	r1, #4
 80007ac:	d005      	beq.n	80007ba <__aeabi_dmul+0x336>
 80007ae:	1d01      	adds	r1, r0, #4
 80007b0:	4281      	cmp	r1, r0
 80007b2:	4180      	sbcs	r0, r0
 80007b4:	4240      	negs	r0, r0
 80007b6:	1824      	adds	r4, r4, r0
 80007b8:	0008      	movs	r0, r1
 80007ba:	01e1      	lsls	r1, r4, #7
 80007bc:	d506      	bpl.n	80007cc <__aeabi_dmul+0x348>
 80007be:	2180      	movs	r1, #128	; 0x80
 80007c0:	00c9      	lsls	r1, r1, #3
 80007c2:	468c      	mov	ip, r1
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <__aeabi_dmul+0x36c>)
 80007c6:	401c      	ands	r4, r3
 80007c8:	9b02      	ldr	r3, [sp, #8]
 80007ca:	4463      	add	r3, ip
 80007cc:	4909      	ldr	r1, [pc, #36]	; (80007f4 <__aeabi_dmul+0x370>)
 80007ce:	428b      	cmp	r3, r1
 80007d0:	dd00      	ble.n	80007d4 <__aeabi_dmul+0x350>
 80007d2:	e710      	b.n	80005f6 <__aeabi_dmul+0x172>
 80007d4:	0761      	lsls	r1, r4, #29
 80007d6:	08c5      	lsrs	r5, r0, #3
 80007d8:	0264      	lsls	r4, r4, #9
 80007da:	055b      	lsls	r3, r3, #21
 80007dc:	430d      	orrs	r5, r1
 80007de:	0b24      	lsrs	r4, r4, #12
 80007e0:	0d5b      	lsrs	r3, r3, #21
 80007e2:	e6c1      	b.n	8000568 <__aeabi_dmul+0xe4>
 80007e4:	000007ff 	.word	0x000007ff
 80007e8:	fffffc01 	.word	0xfffffc01
 80007ec:	000003ff 	.word	0x000003ff
 80007f0:	feffffff 	.word	0xfeffffff
 80007f4:	000007fe 	.word	0x000007fe
 80007f8:	464b      	mov	r3, r9
 80007fa:	4323      	orrs	r3, r4
 80007fc:	d059      	beq.n	80008b2 <__aeabi_dmul+0x42e>
 80007fe:	2c00      	cmp	r4, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_dmul+0x380>
 8000802:	e0a3      	b.n	800094c <__aeabi_dmul+0x4c8>
 8000804:	0020      	movs	r0, r4
 8000806:	f000 f9cd 	bl	8000ba4 <__clzsi2>
 800080a:	0001      	movs	r1, r0
 800080c:	0003      	movs	r3, r0
 800080e:	390b      	subs	r1, #11
 8000810:	221d      	movs	r2, #29
 8000812:	1a52      	subs	r2, r2, r1
 8000814:	4649      	mov	r1, r9
 8000816:	0018      	movs	r0, r3
 8000818:	40d1      	lsrs	r1, r2
 800081a:	464a      	mov	r2, r9
 800081c:	3808      	subs	r0, #8
 800081e:	4082      	lsls	r2, r0
 8000820:	4084      	lsls	r4, r0
 8000822:	0010      	movs	r0, r2
 8000824:	430c      	orrs	r4, r1
 8000826:	4a74      	ldr	r2, [pc, #464]	; (80009f8 <__aeabi_dmul+0x574>)
 8000828:	1aeb      	subs	r3, r5, r3
 800082a:	4694      	mov	ip, r2
 800082c:	4642      	mov	r2, r8
 800082e:	4463      	add	r3, ip
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	9b01      	ldr	r3, [sp, #4]
 8000834:	407a      	eors	r2, r7
 8000836:	3301      	adds	r3, #1
 8000838:	2100      	movs	r1, #0
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	9302      	str	r3, [sp, #8]
 800083e:	2e0a      	cmp	r6, #10
 8000840:	dd00      	ble.n	8000844 <__aeabi_dmul+0x3c0>
 8000842:	e667      	b.n	8000514 <__aeabi_dmul+0x90>
 8000844:	e683      	b.n	800054e <__aeabi_dmul+0xca>
 8000846:	465b      	mov	r3, fp
 8000848:	4303      	orrs	r3, r0
 800084a:	469a      	mov	sl, r3
 800084c:	d02a      	beq.n	80008a4 <__aeabi_dmul+0x420>
 800084e:	465b      	mov	r3, fp
 8000850:	2b00      	cmp	r3, #0
 8000852:	d06d      	beq.n	8000930 <__aeabi_dmul+0x4ac>
 8000854:	4658      	mov	r0, fp
 8000856:	f000 f9a5 	bl	8000ba4 <__clzsi2>
 800085a:	0001      	movs	r1, r0
 800085c:	0003      	movs	r3, r0
 800085e:	390b      	subs	r1, #11
 8000860:	221d      	movs	r2, #29
 8000862:	1a52      	subs	r2, r2, r1
 8000864:	0021      	movs	r1, r4
 8000866:	0018      	movs	r0, r3
 8000868:	465d      	mov	r5, fp
 800086a:	40d1      	lsrs	r1, r2
 800086c:	3808      	subs	r0, #8
 800086e:	4085      	lsls	r5, r0
 8000870:	000a      	movs	r2, r1
 8000872:	4084      	lsls	r4, r0
 8000874:	432a      	orrs	r2, r5
 8000876:	4693      	mov	fp, r2
 8000878:	46a2      	mov	sl, r4
 800087a:	4d5f      	ldr	r5, [pc, #380]	; (80009f8 <__aeabi_dmul+0x574>)
 800087c:	2600      	movs	r6, #0
 800087e:	1aed      	subs	r5, r5, r3
 8000880:	2300      	movs	r3, #0
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	e625      	b.n	80004d2 <__aeabi_dmul+0x4e>
 8000886:	465b      	mov	r3, fp
 8000888:	4303      	orrs	r3, r0
 800088a:	469a      	mov	sl, r3
 800088c:	d105      	bne.n	800089a <__aeabi_dmul+0x416>
 800088e:	2300      	movs	r3, #0
 8000890:	469b      	mov	fp, r3
 8000892:	3302      	adds	r3, #2
 8000894:	2608      	movs	r6, #8
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	e61b      	b.n	80004d2 <__aeabi_dmul+0x4e>
 800089a:	2303      	movs	r3, #3
 800089c:	4682      	mov	sl, r0
 800089e:	260c      	movs	r6, #12
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	e616      	b.n	80004d2 <__aeabi_dmul+0x4e>
 80008a4:	2300      	movs	r3, #0
 80008a6:	469b      	mov	fp, r3
 80008a8:	3301      	adds	r3, #1
 80008aa:	2604      	movs	r6, #4
 80008ac:	2500      	movs	r5, #0
 80008ae:	9300      	str	r3, [sp, #0]
 80008b0:	e60f      	b.n	80004d2 <__aeabi_dmul+0x4e>
 80008b2:	4642      	mov	r2, r8
 80008b4:	3301      	adds	r3, #1
 80008b6:	9501      	str	r5, [sp, #4]
 80008b8:	431e      	orrs	r6, r3
 80008ba:	9b01      	ldr	r3, [sp, #4]
 80008bc:	407a      	eors	r2, r7
 80008be:	3301      	adds	r3, #1
 80008c0:	2400      	movs	r4, #0
 80008c2:	2000      	movs	r0, #0
 80008c4:	2101      	movs	r1, #1
 80008c6:	b2d2      	uxtb	r2, r2
 80008c8:	9302      	str	r3, [sp, #8]
 80008ca:	2e0a      	cmp	r6, #10
 80008cc:	dd00      	ble.n	80008d0 <__aeabi_dmul+0x44c>
 80008ce:	e621      	b.n	8000514 <__aeabi_dmul+0x90>
 80008d0:	e63d      	b.n	800054e <__aeabi_dmul+0xca>
 80008d2:	2101      	movs	r1, #1
 80008d4:	1ac9      	subs	r1, r1, r3
 80008d6:	2938      	cmp	r1, #56	; 0x38
 80008d8:	dd00      	ble.n	80008dc <__aeabi_dmul+0x458>
 80008da:	e642      	b.n	8000562 <__aeabi_dmul+0xde>
 80008dc:	291f      	cmp	r1, #31
 80008de:	dd47      	ble.n	8000970 <__aeabi_dmul+0x4ec>
 80008e0:	261f      	movs	r6, #31
 80008e2:	0025      	movs	r5, r4
 80008e4:	4276      	negs	r6, r6
 80008e6:	1af3      	subs	r3, r6, r3
 80008e8:	40dd      	lsrs	r5, r3
 80008ea:	002b      	movs	r3, r5
 80008ec:	2920      	cmp	r1, #32
 80008ee:	d005      	beq.n	80008fc <__aeabi_dmul+0x478>
 80008f0:	4942      	ldr	r1, [pc, #264]	; (80009fc <__aeabi_dmul+0x578>)
 80008f2:	9d02      	ldr	r5, [sp, #8]
 80008f4:	468c      	mov	ip, r1
 80008f6:	4465      	add	r5, ip
 80008f8:	40ac      	lsls	r4, r5
 80008fa:	4320      	orrs	r0, r4
 80008fc:	1e41      	subs	r1, r0, #1
 80008fe:	4188      	sbcs	r0, r1
 8000900:	4318      	orrs	r0, r3
 8000902:	2307      	movs	r3, #7
 8000904:	001d      	movs	r5, r3
 8000906:	2400      	movs	r4, #0
 8000908:	4005      	ands	r5, r0
 800090a:	4203      	tst	r3, r0
 800090c:	d04a      	beq.n	80009a4 <__aeabi_dmul+0x520>
 800090e:	230f      	movs	r3, #15
 8000910:	2400      	movs	r4, #0
 8000912:	4003      	ands	r3, r0
 8000914:	2b04      	cmp	r3, #4
 8000916:	d042      	beq.n	800099e <__aeabi_dmul+0x51a>
 8000918:	1d03      	adds	r3, r0, #4
 800091a:	4283      	cmp	r3, r0
 800091c:	4180      	sbcs	r0, r0
 800091e:	4240      	negs	r0, r0
 8000920:	1824      	adds	r4, r4, r0
 8000922:	0018      	movs	r0, r3
 8000924:	0223      	lsls	r3, r4, #8
 8000926:	d53a      	bpl.n	800099e <__aeabi_dmul+0x51a>
 8000928:	2301      	movs	r3, #1
 800092a:	2400      	movs	r4, #0
 800092c:	2500      	movs	r5, #0
 800092e:	e61b      	b.n	8000568 <__aeabi_dmul+0xe4>
 8000930:	f000 f938 	bl	8000ba4 <__clzsi2>
 8000934:	0001      	movs	r1, r0
 8000936:	0003      	movs	r3, r0
 8000938:	3115      	adds	r1, #21
 800093a:	3320      	adds	r3, #32
 800093c:	291c      	cmp	r1, #28
 800093e:	dd8f      	ble.n	8000860 <__aeabi_dmul+0x3dc>
 8000940:	3808      	subs	r0, #8
 8000942:	2200      	movs	r2, #0
 8000944:	4084      	lsls	r4, r0
 8000946:	4692      	mov	sl, r2
 8000948:	46a3      	mov	fp, r4
 800094a:	e796      	b.n	800087a <__aeabi_dmul+0x3f6>
 800094c:	f000 f92a 	bl	8000ba4 <__clzsi2>
 8000950:	0001      	movs	r1, r0
 8000952:	0003      	movs	r3, r0
 8000954:	3115      	adds	r1, #21
 8000956:	3320      	adds	r3, #32
 8000958:	291c      	cmp	r1, #28
 800095a:	dc00      	bgt.n	800095e <__aeabi_dmul+0x4da>
 800095c:	e758      	b.n	8000810 <__aeabi_dmul+0x38c>
 800095e:	0002      	movs	r2, r0
 8000960:	464c      	mov	r4, r9
 8000962:	3a08      	subs	r2, #8
 8000964:	2000      	movs	r0, #0
 8000966:	4094      	lsls	r4, r2
 8000968:	e75d      	b.n	8000826 <__aeabi_dmul+0x3a2>
 800096a:	9b01      	ldr	r3, [sp, #4]
 800096c:	9302      	str	r3, [sp, #8]
 800096e:	e711      	b.n	8000794 <__aeabi_dmul+0x310>
 8000970:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <__aeabi_dmul+0x57c>)
 8000972:	0026      	movs	r6, r4
 8000974:	469c      	mov	ip, r3
 8000976:	0003      	movs	r3, r0
 8000978:	9d02      	ldr	r5, [sp, #8]
 800097a:	40cb      	lsrs	r3, r1
 800097c:	4465      	add	r5, ip
 800097e:	40ae      	lsls	r6, r5
 8000980:	431e      	orrs	r6, r3
 8000982:	0003      	movs	r3, r0
 8000984:	40ab      	lsls	r3, r5
 8000986:	1e58      	subs	r0, r3, #1
 8000988:	4183      	sbcs	r3, r0
 800098a:	0030      	movs	r0, r6
 800098c:	4318      	orrs	r0, r3
 800098e:	40cc      	lsrs	r4, r1
 8000990:	0743      	lsls	r3, r0, #29
 8000992:	d0c7      	beq.n	8000924 <__aeabi_dmul+0x4a0>
 8000994:	230f      	movs	r3, #15
 8000996:	4003      	ands	r3, r0
 8000998:	2b04      	cmp	r3, #4
 800099a:	d1bd      	bne.n	8000918 <__aeabi_dmul+0x494>
 800099c:	e7c2      	b.n	8000924 <__aeabi_dmul+0x4a0>
 800099e:	0765      	lsls	r5, r4, #29
 80009a0:	0264      	lsls	r4, r4, #9
 80009a2:	0b24      	lsrs	r4, r4, #12
 80009a4:	08c0      	lsrs	r0, r0, #3
 80009a6:	2300      	movs	r3, #0
 80009a8:	4305      	orrs	r5, r0
 80009aa:	e5dd      	b.n	8000568 <__aeabi_dmul+0xe4>
 80009ac:	2500      	movs	r5, #0
 80009ae:	2302      	movs	r3, #2
 80009b0:	2e0f      	cmp	r6, #15
 80009b2:	d10c      	bne.n	80009ce <__aeabi_dmul+0x54a>
 80009b4:	2480      	movs	r4, #128	; 0x80
 80009b6:	465b      	mov	r3, fp
 80009b8:	0324      	lsls	r4, r4, #12
 80009ba:	4223      	tst	r3, r4
 80009bc:	d00e      	beq.n	80009dc <__aeabi_dmul+0x558>
 80009be:	4221      	tst	r1, r4
 80009c0:	d10c      	bne.n	80009dc <__aeabi_dmul+0x558>
 80009c2:	430c      	orrs	r4, r1
 80009c4:	0324      	lsls	r4, r4, #12
 80009c6:	003a      	movs	r2, r7
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <__aeabi_dmul+0x580>)
 80009ca:	0b24      	lsrs	r4, r4, #12
 80009cc:	e5cc      	b.n	8000568 <__aeabi_dmul+0xe4>
 80009ce:	2e0b      	cmp	r6, #11
 80009d0:	d000      	beq.n	80009d4 <__aeabi_dmul+0x550>
 80009d2:	e5a2      	b.n	800051a <__aeabi_dmul+0x96>
 80009d4:	468b      	mov	fp, r1
 80009d6:	46aa      	mov	sl, r5
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	e5f7      	b.n	80005cc <__aeabi_dmul+0x148>
 80009dc:	2480      	movs	r4, #128	; 0x80
 80009de:	465b      	mov	r3, fp
 80009e0:	0324      	lsls	r4, r4, #12
 80009e2:	431c      	orrs	r4, r3
 80009e4:	0324      	lsls	r4, r4, #12
 80009e6:	4642      	mov	r2, r8
 80009e8:	4655      	mov	r5, sl
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <__aeabi_dmul+0x580>)
 80009ec:	0b24      	lsrs	r4, r4, #12
 80009ee:	e5bb      	b.n	8000568 <__aeabi_dmul+0xe4>
 80009f0:	464d      	mov	r5, r9
 80009f2:	0021      	movs	r1, r4
 80009f4:	2303      	movs	r3, #3
 80009f6:	e7db      	b.n	80009b0 <__aeabi_dmul+0x52c>
 80009f8:	fffffc0d 	.word	0xfffffc0d
 80009fc:	0000043e 	.word	0x0000043e
 8000a00:	0000041e 	.word	0x0000041e
 8000a04:	000007ff 	.word	0x000007ff

08000a08 <__aeabi_f2d>:
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	0242      	lsls	r2, r0, #9
 8000a0c:	0043      	lsls	r3, r0, #1
 8000a0e:	0fc4      	lsrs	r4, r0, #31
 8000a10:	20fe      	movs	r0, #254	; 0xfe
 8000a12:	0e1b      	lsrs	r3, r3, #24
 8000a14:	1c59      	adds	r1, r3, #1
 8000a16:	0a55      	lsrs	r5, r2, #9
 8000a18:	4208      	tst	r0, r1
 8000a1a:	d00c      	beq.n	8000a36 <__aeabi_f2d+0x2e>
 8000a1c:	21e0      	movs	r1, #224	; 0xe0
 8000a1e:	0089      	lsls	r1, r1, #2
 8000a20:	468c      	mov	ip, r1
 8000a22:	076d      	lsls	r5, r5, #29
 8000a24:	0b12      	lsrs	r2, r2, #12
 8000a26:	4463      	add	r3, ip
 8000a28:	051b      	lsls	r3, r3, #20
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	07e4      	lsls	r4, r4, #31
 8000a2e:	4323      	orrs	r3, r4
 8000a30:	0028      	movs	r0, r5
 8000a32:	0019      	movs	r1, r3
 8000a34:	bd70      	pop	{r4, r5, r6, pc}
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d114      	bne.n	8000a64 <__aeabi_f2d+0x5c>
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d01b      	beq.n	8000a76 <__aeabi_f2d+0x6e>
 8000a3e:	0028      	movs	r0, r5
 8000a40:	f000 f8b0 	bl	8000ba4 <__clzsi2>
 8000a44:	280a      	cmp	r0, #10
 8000a46:	dc1c      	bgt.n	8000a82 <__aeabi_f2d+0x7a>
 8000a48:	230b      	movs	r3, #11
 8000a4a:	002a      	movs	r2, r5
 8000a4c:	1a1b      	subs	r3, r3, r0
 8000a4e:	40da      	lsrs	r2, r3
 8000a50:	0003      	movs	r3, r0
 8000a52:	3315      	adds	r3, #21
 8000a54:	409d      	lsls	r5, r3
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <__aeabi_f2d+0x88>)
 8000a58:	0312      	lsls	r2, r2, #12
 8000a5a:	1a1b      	subs	r3, r3, r0
 8000a5c:	055b      	lsls	r3, r3, #21
 8000a5e:	0b12      	lsrs	r2, r2, #12
 8000a60:	0d5b      	lsrs	r3, r3, #21
 8000a62:	e7e1      	b.n	8000a28 <__aeabi_f2d+0x20>
 8000a64:	2d00      	cmp	r5, #0
 8000a66:	d009      	beq.n	8000a7c <__aeabi_f2d+0x74>
 8000a68:	0b13      	lsrs	r3, r2, #12
 8000a6a:	2280      	movs	r2, #128	; 0x80
 8000a6c:	0312      	lsls	r2, r2, #12
 8000a6e:	431a      	orrs	r2, r3
 8000a70:	076d      	lsls	r5, r5, #29
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <__aeabi_f2d+0x8c>)
 8000a74:	e7d8      	b.n	8000a28 <__aeabi_f2d+0x20>
 8000a76:	2300      	movs	r3, #0
 8000a78:	2200      	movs	r2, #0
 8000a7a:	e7d5      	b.n	8000a28 <__aeabi_f2d+0x20>
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <__aeabi_f2d+0x8c>)
 8000a80:	e7d2      	b.n	8000a28 <__aeabi_f2d+0x20>
 8000a82:	0003      	movs	r3, r0
 8000a84:	002a      	movs	r2, r5
 8000a86:	3b0b      	subs	r3, #11
 8000a88:	409a      	lsls	r2, r3
 8000a8a:	2500      	movs	r5, #0
 8000a8c:	e7e3      	b.n	8000a56 <__aeabi_f2d+0x4e>
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	00000389 	.word	0x00000389
 8000a94:	000007ff 	.word	0x000007ff

08000a98 <__aeabi_d2f>:
 8000a98:	0002      	movs	r2, r0
 8000a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9c:	004b      	lsls	r3, r1, #1
 8000a9e:	030d      	lsls	r5, r1, #12
 8000aa0:	0f40      	lsrs	r0, r0, #29
 8000aa2:	0d5b      	lsrs	r3, r3, #21
 8000aa4:	0fcc      	lsrs	r4, r1, #31
 8000aa6:	0a6d      	lsrs	r5, r5, #9
 8000aa8:	493a      	ldr	r1, [pc, #232]	; (8000b94 <__aeabi_d2f+0xfc>)
 8000aaa:	4305      	orrs	r5, r0
 8000aac:	1c58      	adds	r0, r3, #1
 8000aae:	00d7      	lsls	r7, r2, #3
 8000ab0:	4208      	tst	r0, r1
 8000ab2:	d00a      	beq.n	8000aca <__aeabi_d2f+0x32>
 8000ab4:	4938      	ldr	r1, [pc, #224]	; (8000b98 <__aeabi_d2f+0x100>)
 8000ab6:	1859      	adds	r1, r3, r1
 8000ab8:	29fe      	cmp	r1, #254	; 0xfe
 8000aba:	dd16      	ble.n	8000aea <__aeabi_d2f+0x52>
 8000abc:	20ff      	movs	r0, #255	; 0xff
 8000abe:	2200      	movs	r2, #0
 8000ac0:	05c0      	lsls	r0, r0, #23
 8000ac2:	4310      	orrs	r0, r2
 8000ac4:	07e4      	lsls	r4, r4, #31
 8000ac6:	4320      	orrs	r0, r4
 8000ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d106      	bne.n	8000adc <__aeabi_d2f+0x44>
 8000ace:	433d      	orrs	r5, r7
 8000ad0:	d026      	beq.n	8000b20 <__aeabi_d2f+0x88>
 8000ad2:	2205      	movs	r2, #5
 8000ad4:	0192      	lsls	r2, r2, #6
 8000ad6:	0a52      	lsrs	r2, r2, #9
 8000ad8:	b2d8      	uxtb	r0, r3
 8000ada:	e7f1      	b.n	8000ac0 <__aeabi_d2f+0x28>
 8000adc:	432f      	orrs	r7, r5
 8000ade:	d0ed      	beq.n	8000abc <__aeabi_d2f+0x24>
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	03d2      	lsls	r2, r2, #15
 8000ae4:	20ff      	movs	r0, #255	; 0xff
 8000ae6:	432a      	orrs	r2, r5
 8000ae8:	e7ea      	b.n	8000ac0 <__aeabi_d2f+0x28>
 8000aea:	2900      	cmp	r1, #0
 8000aec:	dd1b      	ble.n	8000b26 <__aeabi_d2f+0x8e>
 8000aee:	0192      	lsls	r2, r2, #6
 8000af0:	1e50      	subs	r0, r2, #1
 8000af2:	4182      	sbcs	r2, r0
 8000af4:	00ed      	lsls	r5, r5, #3
 8000af6:	0f7f      	lsrs	r7, r7, #29
 8000af8:	432a      	orrs	r2, r5
 8000afa:	433a      	orrs	r2, r7
 8000afc:	0753      	lsls	r3, r2, #29
 8000afe:	d047      	beq.n	8000b90 <__aeabi_d2f+0xf8>
 8000b00:	230f      	movs	r3, #15
 8000b02:	4013      	ands	r3, r2
 8000b04:	2b04      	cmp	r3, #4
 8000b06:	d000      	beq.n	8000b0a <__aeabi_d2f+0x72>
 8000b08:	3204      	adds	r2, #4
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	04db      	lsls	r3, r3, #19
 8000b0e:	4013      	ands	r3, r2
 8000b10:	d03e      	beq.n	8000b90 <__aeabi_d2f+0xf8>
 8000b12:	1c48      	adds	r0, r1, #1
 8000b14:	29fe      	cmp	r1, #254	; 0xfe
 8000b16:	d0d1      	beq.n	8000abc <__aeabi_d2f+0x24>
 8000b18:	0192      	lsls	r2, r2, #6
 8000b1a:	0a52      	lsrs	r2, r2, #9
 8000b1c:	b2c0      	uxtb	r0, r0
 8000b1e:	e7cf      	b.n	8000ac0 <__aeabi_d2f+0x28>
 8000b20:	2000      	movs	r0, #0
 8000b22:	2200      	movs	r2, #0
 8000b24:	e7cc      	b.n	8000ac0 <__aeabi_d2f+0x28>
 8000b26:	000a      	movs	r2, r1
 8000b28:	3217      	adds	r2, #23
 8000b2a:	db2f      	blt.n	8000b8c <__aeabi_d2f+0xf4>
 8000b2c:	2680      	movs	r6, #128	; 0x80
 8000b2e:	0436      	lsls	r6, r6, #16
 8000b30:	432e      	orrs	r6, r5
 8000b32:	251e      	movs	r5, #30
 8000b34:	1a6d      	subs	r5, r5, r1
 8000b36:	2d1f      	cmp	r5, #31
 8000b38:	dd11      	ble.n	8000b5e <__aeabi_d2f+0xc6>
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	4252      	negs	r2, r2
 8000b3e:	1a52      	subs	r2, r2, r1
 8000b40:	0031      	movs	r1, r6
 8000b42:	40d1      	lsrs	r1, r2
 8000b44:	2d20      	cmp	r5, #32
 8000b46:	d004      	beq.n	8000b52 <__aeabi_d2f+0xba>
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <__aeabi_d2f+0x104>)
 8000b4a:	4694      	mov	ip, r2
 8000b4c:	4463      	add	r3, ip
 8000b4e:	409e      	lsls	r6, r3
 8000b50:	4337      	orrs	r7, r6
 8000b52:	003a      	movs	r2, r7
 8000b54:	1e53      	subs	r3, r2, #1
 8000b56:	419a      	sbcs	r2, r3
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	e7ce      	b.n	8000afc <__aeabi_d2f+0x64>
 8000b5e:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <__aeabi_d2f+0x108>)
 8000b60:	0038      	movs	r0, r7
 8000b62:	4694      	mov	ip, r2
 8000b64:	4463      	add	r3, ip
 8000b66:	4098      	lsls	r0, r3
 8000b68:	003a      	movs	r2, r7
 8000b6a:	1e41      	subs	r1, r0, #1
 8000b6c:	4188      	sbcs	r0, r1
 8000b6e:	409e      	lsls	r6, r3
 8000b70:	40ea      	lsrs	r2, r5
 8000b72:	4330      	orrs	r0, r6
 8000b74:	4302      	orrs	r2, r0
 8000b76:	2100      	movs	r1, #0
 8000b78:	0753      	lsls	r3, r2, #29
 8000b7a:	d1c1      	bne.n	8000b00 <__aeabi_d2f+0x68>
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	0013      	movs	r3, r2
 8000b80:	04c9      	lsls	r1, r1, #19
 8000b82:	2001      	movs	r0, #1
 8000b84:	400b      	ands	r3, r1
 8000b86:	420a      	tst	r2, r1
 8000b88:	d1c6      	bne.n	8000b18 <__aeabi_d2f+0x80>
 8000b8a:	e7a3      	b.n	8000ad4 <__aeabi_d2f+0x3c>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	e7a0      	b.n	8000ad2 <__aeabi_d2f+0x3a>
 8000b90:	000b      	movs	r3, r1
 8000b92:	e79f      	b.n	8000ad4 <__aeabi_d2f+0x3c>
 8000b94:	000007fe 	.word	0x000007fe
 8000b98:	fffffc80 	.word	0xfffffc80
 8000b9c:	fffffca2 	.word	0xfffffca2
 8000ba0:	fffffc82 	.word	0xfffffc82

08000ba4 <__clzsi2>:
 8000ba4:	211c      	movs	r1, #28
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	041b      	lsls	r3, r3, #16
 8000baa:	4298      	cmp	r0, r3
 8000bac:	d301      	bcc.n	8000bb2 <__clzsi2+0xe>
 8000bae:	0c00      	lsrs	r0, r0, #16
 8000bb0:	3910      	subs	r1, #16
 8000bb2:	0a1b      	lsrs	r3, r3, #8
 8000bb4:	4298      	cmp	r0, r3
 8000bb6:	d301      	bcc.n	8000bbc <__clzsi2+0x18>
 8000bb8:	0a00      	lsrs	r0, r0, #8
 8000bba:	3908      	subs	r1, #8
 8000bbc:	091b      	lsrs	r3, r3, #4
 8000bbe:	4298      	cmp	r0, r3
 8000bc0:	d301      	bcc.n	8000bc6 <__clzsi2+0x22>
 8000bc2:	0900      	lsrs	r0, r0, #4
 8000bc4:	3904      	subs	r1, #4
 8000bc6:	a202      	add	r2, pc, #8	; (adr r2, 8000bd0 <__clzsi2+0x2c>)
 8000bc8:	5c10      	ldrb	r0, [r2, r0]
 8000bca:	1840      	adds	r0, r0, r1
 8000bcc:	4770      	bx	lr
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	02020304 	.word	0x02020304
 8000bd4:	01010101 	.word	0x01010101
	...

08000be0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim17.Instance)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d103      	bne.n	8000bfc <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		TASK_GetBatteryData(&battery);
 8000bf4:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f003 fa28 	bl	800404c <TASK_GetBatteryData>
	}
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200001ac 	.word	0x200001ac
 8000c08:	200001f4 	.word	0x200001f4

08000c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c0c:	b5b0      	push	{r4, r5, r7, lr}
 8000c0e:	b08e      	sub	sp, #56	; 0x38
 8000c10:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c12:	f000 fd35 	bl	8001680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c16:	f000 f851 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1a:	f000 fa9d 	bl	8001158 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c1e:	f000 fa7d 	bl	800111c <MX_DMA_Init>
  MX_ADC_Init();
 8000c22:	f000 f8b7 	bl	8000d94 <MX_ADC_Init>
  MX_I2C1_Init();
 8000c26:	f000 f96b 	bl	8000f00 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000c2a:	f000 f9a9 	bl	8000f80 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000c2e:	f000 f9e5 	bl	8000ffc <MX_TIM1_Init>
  MX_TIM17_Init();
 8000c32:	f000 fa4b 	bl	80010cc <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim17);
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <main+0x94>)
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f002 fd67 	bl	800370c <HAL_TIM_Base_Start_IT>
  BUTTON_Init(&button, GPIOA, GPIO_PIN_8);
 8000c3e:	2380      	movs	r3, #128	; 0x80
 8000c40:	005a      	lsls	r2, r3, #1
 8000c42:	2390      	movs	r3, #144	; 0x90
 8000c44:	05d9      	lsls	r1, r3, #23
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <main+0x98>)
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f003 fa33 	bl	80040b4 <BUTTON_Init>
  RE_Init(&rotary, &htim1);
 8000c4e:	4a16      	ldr	r2, [pc, #88]	; (8000ca8 <main+0x9c>)
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <main+0xa0>)
 8000c52:	0011      	movs	r1, r2
 8000c54:	0018      	movs	r0, r3
 8000c56:	f003 fbf5 	bl	8004444 <RE_Init>
  BAT_InitInfo(&battery, hadc, BAT_NUMBEROFCELLS);
 8000c5a:	4c15      	ldr	r4, [pc, #84]	; (8000cb0 <main+0xa4>)
 8000c5c:	4d15      	ldr	r5, [pc, #84]	; (8000cb4 <main+0xa8>)
 8000c5e:	2304      	movs	r3, #4
 8000c60:	930d      	str	r3, [sp, #52]	; 0x34
 8000c62:	466b      	mov	r3, sp
 8000c64:	0018      	movs	r0, r3
 8000c66:	0023      	movs	r3, r4
 8000c68:	330c      	adds	r3, #12
 8000c6a:	2234      	movs	r2, #52	; 0x34
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	f003 fc69 	bl	8004544 <memcpy>
 8000c72:	6821      	ldr	r1, [r4, #0]
 8000c74:	6862      	ldr	r2, [r4, #4]
 8000c76:	68a3      	ldr	r3, [r4, #8]
 8000c78:	0028      	movs	r0, r5
 8000c7a:	f003 faba 	bl	80041f2 <BAT_InitInfo>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BUTTON_Handle(&button);
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <main+0x98>)
 8000c80:	0018      	movs	r0, r3
 8000c82:	f003 fa38 	bl	80040f6 <BUTTON_Handle>
	  RE_Handle(&rotary);
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <main+0xa0>)
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f003 fbfb 	bl	8004484 <RE_Handle>
	  MODE_BatteryManager(&battery, bat_mode);
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <main+0xac>)
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <main+0xa8>)
 8000c94:	0011      	movs	r1, r2
 8000c96:	0018      	movs	r0, r3
 8000c98:	f003 f9b4 	bl	8004004 <MODE_BatteryManager>
	  BUTTON_Handle(&button);
 8000c9c:	e7ef      	b.n	8000c7e <main+0x72>
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	200001ac 	.word	0x200001ac
 8000ca4:	2000026c 	.word	0x2000026c
 8000ca8:	20000164 	.word	0x20000164
 8000cac:	20000284 	.word	0x20000284
 8000cb0:	20000028 	.word	0x20000028
 8000cb4:	200001f4 	.word	0x200001f4
 8000cb8:	2000028c 	.word	0x2000028c

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b095      	sub	sp, #84	; 0x54
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	2420      	movs	r4, #32
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	2330      	movs	r3, #48	; 0x30
 8000cca:	001a      	movs	r2, r3
 8000ccc:	2100      	movs	r1, #0
 8000cce:	f003 fc0d 	bl	80044ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	2310      	movs	r3, #16
 8000cda:	001a      	movs	r2, r3
 8000cdc:	2100      	movs	r1, #0
 8000cde:	f003 fc05 	bl	80044ec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce2:	003b      	movs	r3, r7
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	001a      	movs	r2, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	f003 fbfe 	bl	80044ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000cf0:	0021      	movs	r1, r4
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2213      	movs	r2, #19
 8000cf6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2201      	movs	r2, #1
 8000d02:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2201      	movs	r2, #1
 8000d08:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2210      	movs	r2, #16
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2210      	movs	r2, #16
 8000d14:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2202      	movs	r2, #2
 8000d1a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	0252      	lsls	r2, r2, #9
 8000d22:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	0352      	lsls	r2, r2, #13
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	2200      	movs	r2, #0
 8000d30:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	0018      	movs	r0, r3
 8000d36:	f001 fed5 	bl	8002ae4 <HAL_RCC_OscConfig>
 8000d3a:	1e03      	subs	r3, r0, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000d3e:	f000 fa91 	bl	8001264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d42:	2110      	movs	r1, #16
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2207      	movs	r2, #7
 8000d48:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2101      	movs	r1, #1
 8000d60:	0018      	movs	r0, r3
 8000d62:	f002 f9d9 	bl	8003118 <HAL_RCC_ClockConfig>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000d6a:	f000 fa7b 	bl	8001264 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d6e:	003b      	movs	r3, r7
 8000d70:	2220      	movs	r2, #32
 8000d72:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d74:	003b      	movs	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7a:	003b      	movs	r3, r7
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f002 faef 	bl	8003360 <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	1e03      	subs	r3, r0, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000d86:	f000 fa6d 	bl	8001264 <Error_Handler>
  }
}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b015      	add	sp, #84	; 0x54
 8000d90:	bd90      	pop	{r4, r7, pc}
	...

08000d94 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	230c      	movs	r3, #12
 8000da0:	001a      	movs	r2, r3
 8000da2:	2100      	movs	r1, #0
 8000da4:	f003 fba2 	bl	80044ec <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000da8:	4b53      	ldr	r3, [pc, #332]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000daa:	4a54      	ldr	r2, [pc, #336]	; (8000efc <MX_ADC_Init+0x168>)
 8000dac:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dae:	4b52      	ldr	r3, [pc, #328]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000db4:	4b50      	ldr	r3, [pc, #320]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dba:	4b4f      	ldr	r3, [pc, #316]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000dc0:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc6:	4b4c      	ldr	r3, [pc, #304]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000dc8:	2204      	movs	r2, #4
 8000dca:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000dcc:	4b4a      	ldr	r3, [pc, #296]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000dd2:	4b49      	ldr	r3, [pc, #292]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000dd8:	4b47      	ldr	r3, [pc, #284]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000dde:	4b46      	ldr	r3, [pc, #280]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de4:	4b44      	ldr	r3, [pc, #272]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000de6:	22c2      	movs	r2, #194	; 0xc2
 8000de8:	32ff      	adds	r2, #255	; 0xff
 8000dea:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dec:	4b42      	ldr	r3, [pc, #264]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000df2:	4b41      	ldr	r3, [pc, #260]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000df4:	2224      	movs	r2, #36	; 0x24
 8000df6:	2100      	movs	r1, #0
 8000df8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dfa:	4b3f      	ldr	r3, [pc, #252]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e00:	4b3d      	ldr	r3, [pc, #244]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 fca0 	bl	8001748 <HAL_ADC_Init>
 8000e08:	1e03      	subs	r3, r0, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000e0c:	f000 fa2a 	bl	8001264 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2201      	movs	r2, #1
 8000e14:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2280      	movs	r2, #128	; 0x80
 8000e1a:	0152      	lsls	r2, r2, #5
 8000e1c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2207      	movs	r2, #7
 8000e22:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e24:	1d3a      	adds	r2, r7, #4
 8000e26:	4b34      	ldr	r3, [pc, #208]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000e28:	0011      	movs	r1, r2
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 fe66 	bl	8001afc <HAL_ADC_ConfigChannel>
 8000e30:	1e03      	subs	r3, r0, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000e34:	f000 fa16 	bl	8001264 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e3e:	1d3a      	adds	r2, r7, #4
 8000e40:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000e42:	0011      	movs	r1, r2
 8000e44:	0018      	movs	r0, r3
 8000e46:	f000 fe59 	bl	8001afc <HAL_ADC_ConfigChannel>
 8000e4a:	1e03      	subs	r3, r0, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000e4e:	f000 fa09 	bl	8001264 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2203      	movs	r2, #3
 8000e56:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e58:	1d3a      	adds	r2, r7, #4
 8000e5a:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000e5c:	0011      	movs	r1, r2
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 fe4c 	bl	8001afc <HAL_ADC_ConfigChannel>
 8000e64:	1e03      	subs	r3, r0, #0
 8000e66:	d001      	beq.n	8000e6c <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000e68:	f000 f9fc 	bl	8001264 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	2204      	movs	r2, #4
 8000e70:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e72:	1d3a      	adds	r2, r7, #4
 8000e74:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f000 fe3f 	bl	8001afc <HAL_ADC_ConfigChannel>
 8000e7e:	1e03      	subs	r3, r0, #0
 8000e80:	d001      	beq.n	8000e86 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8000e82:	f000 f9ef 	bl	8001264 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2205      	movs	r2, #5
 8000e8a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e8c:	1d3a      	adds	r2, r7, #4
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000e90:	0011      	movs	r1, r2
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 fe32 	bl	8001afc <HAL_ADC_ConfigChannel>
 8000e98:	1e03      	subs	r3, r0, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8000e9c:	f000 f9e2 	bl	8001264 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2206      	movs	r2, #6
 8000ea4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ea6:	1d3a      	adds	r2, r7, #4
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f000 fe25 	bl	8001afc <HAL_ADC_ConfigChannel>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d001      	beq.n	8000eba <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8000eb6:	f000 f9d5 	bl	8001264 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ec0:	1d3a      	adds	r2, r7, #4
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000ec4:	0011      	movs	r1, r2
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 fe18 	bl	8001afc <HAL_ADC_ConfigChannel>
 8000ecc:	1e03      	subs	r3, r0, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8000ed0:	f000 f9c8 	bl	8001264 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2210      	movs	r2, #16
 8000ed8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eda:	1d3a      	adds	r2, r7, #4
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_ADC_Init+0x164>)
 8000ede:	0011      	movs	r1, r2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f000 fe0b 	bl	8001afc <HAL_ADC_ConfigChannel>
 8000ee6:	1e03      	subs	r3, r0, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8000eea:	f000 f9bb 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b004      	add	sp, #16
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	20000028 	.word	0x20000028
 8000efc:	40012400 	.word	0x40012400

08000f00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f06:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <MX_I2C1_Init+0x78>)
 8000f08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f0c:	4a1b      	ldr	r2, [pc, #108]	; (8000f7c <MX_I2C1_Init+0x7c>)
 8000f0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f001 fca3 	bl	8002888 <HAL_I2C_Init>
 8000f42:	1e03      	subs	r3, r0, #0
 8000f44:	d001      	beq.n	8000f4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f46:	f000 f98d 	bl	8001264 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f001 fd30 	bl	80029b4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f54:	1e03      	subs	r3, r0, #0
 8000f56:	d001      	beq.n	8000f5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f58:	f000 f984 	bl	8001264 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	0018      	movs	r0, r3
 8000f62:	f001 fd73 	bl	8002a4c <HAL_I2CEx_ConfigDigitalFilter>
 8000f66:	1e03      	subs	r3, r0, #0
 8000f68:	d001      	beq.n	8000f6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f6a:	f000 f97b 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200000ac 	.word	0x200000ac
 8000f78:	40005400 	.word	0x40005400
 8000f7c:	2000090e 	.word	0x2000090e

08000f80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MX_SPI1_Init+0x74>)
 8000f86:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <MX_SPI1_Init+0x78>)
 8000f88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_SPI1_Init+0x74>)
 8000f8c:	2282      	movs	r2, #130	; 0x82
 8000f8e:	0052      	lsls	r2, r2, #1
 8000f90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f92:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_SPI1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f98:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_SPI1_Init+0x74>)
 8000f9a:	22e0      	movs	r2, #224	; 0xe0
 8000f9c:	00d2      	lsls	r2, r2, #3
 8000f9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_SPI1_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_SPI1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_SPI1_Init+0x74>)
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	0092      	lsls	r2, r2, #2
 8000fb2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_SPI1_Init+0x74>)
 8000fb6:	2220      	movs	r2, #32
 8000fb8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_SPI1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_SPI1_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_SPI1_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_SPI1_Init+0x74>)
 8000fce:	2207      	movs	r2, #7
 8000fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_SPI1_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_SPI1_Init+0x74>)
 8000fda:	2208      	movs	r2, #8
 8000fdc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <MX_SPI1_Init+0x74>)
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f002 fa8b 	bl	80034fc <HAL_SPI_Init>
 8000fe6:	1e03      	subs	r3, r0, #0
 8000fe8:	d001      	beq.n	8000fee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f000 f93b 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000100 	.word	0x20000100
 8000ff8:	40013000 	.word	0x40013000

08000ffc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b08d      	sub	sp, #52	; 0x34
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001002:	240c      	movs	r4, #12
 8001004:	193b      	adds	r3, r7, r4
 8001006:	0018      	movs	r0, r3
 8001008:	2324      	movs	r3, #36	; 0x24
 800100a:	001a      	movs	r2, r3
 800100c:	2100      	movs	r1, #0
 800100e:	f003 fa6d 	bl	80044ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	0018      	movs	r0, r3
 8001016:	2308      	movs	r3, #8
 8001018:	001a      	movs	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	f003 fa66 	bl	80044ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001020:	4b27      	ldr	r3, [pc, #156]	; (80010c0 <MX_TIM1_Init+0xc4>)
 8001022:	4a28      	ldr	r2, [pc, #160]	; (80010c4 <MX_TIM1_Init+0xc8>)
 8001024:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <MX_TIM1_Init+0xc4>)
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <MX_TIM1_Init+0xc4>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001032:	4b23      	ldr	r3, [pc, #140]	; (80010c0 <MX_TIM1_Init+0xc4>)
 8001034:	4a24      	ldr	r2, [pc, #144]	; (80010c8 <MX_TIM1_Init+0xcc>)
 8001036:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <MX_TIM1_Init+0xc4>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800103e:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <MX_TIM1_Init+0xc4>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <MX_TIM1_Init+0xc4>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800104a:	0021      	movs	r1, r4
 800104c:	187b      	adds	r3, r7, r1
 800104e:	2203      	movs	r2, #3
 8001050:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2201      	movs	r2, #1
 800105c:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800105e:	187b      	adds	r3, r7, r1
 8001060:	2200      	movs	r2, #0
 8001062:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001064:	187b      	adds	r3, r7, r1
 8001066:	2200      	movs	r2, #0
 8001068:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800106a:	187b      	adds	r3, r7, r1
 800106c:	2200      	movs	r2, #0
 800106e:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001070:	187b      	adds	r3, r7, r1
 8001072:	2201      	movs	r2, #1
 8001074:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001076:	187b      	adds	r3, r7, r1
 8001078:	2200      	movs	r2, #0
 800107a:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001082:	187a      	adds	r2, r7, r1
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_TIM1_Init+0xc4>)
 8001086:	0011      	movs	r1, r2
 8001088:	0018      	movs	r0, r3
 800108a:	f002 fb8b 	bl	80037a4 <HAL_TIM_Encoder_Init>
 800108e:	1e03      	subs	r3, r0, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001092:	f000 f8e7 	bl	8001264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2200      	movs	r2, #0
 80010a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010a2:	1d3a      	adds	r2, r7, #4
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <MX_TIM1_Init+0xc4>)
 80010a6:	0011      	movs	r1, r2
 80010a8:	0018      	movs	r0, r3
 80010aa:	f002 feaf 	bl	8003e0c <HAL_TIMEx_MasterConfigSynchronization>
 80010ae:	1e03      	subs	r3, r0, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80010b2:	f000 f8d7 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b00d      	add	sp, #52	; 0x34
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	20000164 	.word	0x20000164
 80010c4:	40012c00 	.word	0x40012c00
 80010c8:	0000ffff 	.word	0x0000ffff

080010cc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_TIM17_Init+0x44>)
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <MX_TIM17_Init+0x48>)
 80010d4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 239;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_TIM17_Init+0x44>)
 80010d8:	22ef      	movs	r2, #239	; 0xef
 80010da:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_TIM17_Init+0x44>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 39999;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <MX_TIM17_Init+0x44>)
 80010e4:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <MX_TIM17_Init+0x4c>)
 80010e6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_TIM17_Init+0x44>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <MX_TIM17_Init+0x44>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_TIM17_Init+0x44>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <MX_TIM17_Init+0x44>)
 80010fc:	0018      	movs	r0, r3
 80010fe:	f002 fab5 	bl	800366c <HAL_TIM_Base_Init>
 8001102:	1e03      	subs	r3, r0, #0
 8001104:	d001      	beq.n	800110a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8001106:	f000 f8ad 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200001ac 	.word	0x200001ac
 8001114:	40014800 	.word	0x40014800
 8001118:	00009c3f 	.word	0x00009c3f

0800111c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_DMA_Init+0x38>)
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <MX_DMA_Init+0x38>)
 8001128:	2101      	movs	r1, #1
 800112a:	430a      	orrs	r2, r1
 800112c:	615a      	str	r2, [r3, #20]
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_DMA_Init+0x38>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	2201      	movs	r2, #1
 8001134:	4013      	ands	r3, r2
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	2009      	movs	r0, #9
 8001140:	f001 f82e 	bl	80021a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001144:	2009      	movs	r0, #9
 8001146:	f001 f840 	bl	80021ca <HAL_NVIC_EnableIRQ>

}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46bd      	mov	sp, r7
 800114e:	b002      	add	sp, #8
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	40021000 	.word	0x40021000

08001158 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115e:	240c      	movs	r4, #12
 8001160:	193b      	adds	r3, r7, r4
 8001162:	0018      	movs	r0, r3
 8001164:	2314      	movs	r3, #20
 8001166:	001a      	movs	r2, r3
 8001168:	2100      	movs	r1, #0
 800116a:	f003 f9bf 	bl	80044ec <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800116e:	4b3b      	ldr	r3, [pc, #236]	; (800125c <MX_GPIO_Init+0x104>)
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	4b3a      	ldr	r3, [pc, #232]	; (800125c <MX_GPIO_Init+0x104>)
 8001174:	2180      	movs	r1, #128	; 0x80
 8001176:	03c9      	lsls	r1, r1, #15
 8001178:	430a      	orrs	r2, r1
 800117a:	615a      	str	r2, [r3, #20]
 800117c:	4b37      	ldr	r3, [pc, #220]	; (800125c <MX_GPIO_Init+0x104>)
 800117e:	695a      	ldr	r2, [r3, #20]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	03db      	lsls	r3, r3, #15
 8001184:	4013      	ands	r3, r2
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	4b34      	ldr	r3, [pc, #208]	; (800125c <MX_GPIO_Init+0x104>)
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	4b33      	ldr	r3, [pc, #204]	; (800125c <MX_GPIO_Init+0x104>)
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	0289      	lsls	r1, r1, #10
 8001194:	430a      	orrs	r2, r1
 8001196:	615a      	str	r2, [r3, #20]
 8001198:	4b30      	ldr	r3, [pc, #192]	; (800125c <MX_GPIO_Init+0x104>)
 800119a:	695a      	ldr	r2, [r3, #20]
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	029b      	lsls	r3, r3, #10
 80011a0:	4013      	ands	r3, r2
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <MX_GPIO_Init+0x104>)
 80011a8:	695a      	ldr	r2, [r3, #20]
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <MX_GPIO_Init+0x104>)
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	02c9      	lsls	r1, r1, #11
 80011b0:	430a      	orrs	r2, r1
 80011b2:	615a      	str	r2, [r3, #20]
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <MX_GPIO_Init+0x104>)
 80011b6:	695a      	ldr	r2, [r3, #20]
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	02db      	lsls	r3, r3, #11
 80011bc:	4013      	ands	r3, r2
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 80011c2:	2385      	movs	r3, #133	; 0x85
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	4826      	ldr	r0, [pc, #152]	; (8001260 <MX_GPIO_Init+0x108>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	0019      	movs	r1, r3
 80011cc:	f001 fb3f 	bl	800284e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80011d0:	2388      	movs	r3, #136	; 0x88
 80011d2:	0219      	lsls	r1, r3, #8
 80011d4:	2390      	movs	r3, #144	; 0x90
 80011d6:	05db      	lsls	r3, r3, #23
 80011d8:	2200      	movs	r2, #0
 80011da:	0018      	movs	r0, r3
 80011dc:	f001 fb37 	bl	800284e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB11 PB4 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_6;
 80011e0:	193b      	adds	r3, r7, r4
 80011e2:	2285      	movs	r2, #133	; 0x85
 80011e4:	0112      	lsls	r2, r2, #4
 80011e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	193b      	adds	r3, r7, r4
 80011ea:	2201      	movs	r2, #1
 80011ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	193b      	adds	r3, r7, r4
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	193b      	adds	r3, r7, r4
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	193b      	adds	r3, r7, r4
 80011fc:	4a18      	ldr	r2, [pc, #96]	; (8001260 <MX_GPIO_Init+0x108>)
 80011fe:	0019      	movs	r1, r3
 8001200:	0010      	movs	r0, r2
 8001202:	f001 f997 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001206:	0021      	movs	r1, r4
 8001208:	187b      	adds	r3, r7, r1
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	0212      	lsls	r2, r2, #8
 800120e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001210:	000c      	movs	r4, r1
 8001212:	193b      	adds	r3, r7, r4
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001218:	193b      	adds	r3, r7, r4
 800121a:	2201      	movs	r2, #1
 800121c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	193b      	adds	r3, r7, r4
 8001220:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <MX_GPIO_Init+0x108>)
 8001222:	0019      	movs	r1, r3
 8001224:	0010      	movs	r0, r2
 8001226:	f001 f985 	bl	8002534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_15;
 800122a:	0021      	movs	r1, r4
 800122c:	187b      	adds	r3, r7, r1
 800122e:	2288      	movs	r2, #136	; 0x88
 8001230:	0212      	lsls	r2, r2, #8
 8001232:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	187b      	adds	r3, r7, r1
 8001236:	2201      	movs	r2, #1
 8001238:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	187b      	adds	r3, r7, r1
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	187b      	adds	r3, r7, r1
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	187a      	adds	r2, r7, r1
 8001248:	2390      	movs	r3, #144	; 0x90
 800124a:	05db      	lsls	r3, r3, #23
 800124c:	0011      	movs	r1, r2
 800124e:	0018      	movs	r0, r3
 8001250:	f001 f970 	bl	8002534 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b009      	add	sp, #36	; 0x24
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	40021000 	.word	0x40021000
 8001260:	48000400 	.word	0x48000400

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126c:	e7fe      	b.n	800126c <Error_Handler+0x8>
	...

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_MspInit+0x44>)
 8001278:	699a      	ldr	r2, [r3, #24]
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <HAL_MspInit+0x44>)
 800127c:	2101      	movs	r1, #1
 800127e:	430a      	orrs	r2, r1
 8001280:	619a      	str	r2, [r3, #24]
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <HAL_MspInit+0x44>)
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	2201      	movs	r2, #1
 8001288:	4013      	ands	r3, r2
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_MspInit+0x44>)
 8001290:	69da      	ldr	r2, [r3, #28]
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_MspInit+0x44>)
 8001294:	2180      	movs	r1, #128	; 0x80
 8001296:	0549      	lsls	r1, r1, #21
 8001298:	430a      	orrs	r2, r1
 800129a:	61da      	str	r2, [r3, #28]
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <HAL_MspInit+0x44>)
 800129e:	69da      	ldr	r2, [r3, #28]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	055b      	lsls	r3, r3, #21
 80012a4:	4013      	ands	r3, r2
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b002      	add	sp, #8
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	40021000 	.word	0x40021000

080012b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b08b      	sub	sp, #44	; 0x2c
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	2414      	movs	r4, #20
 80012c2:	193b      	adds	r3, r7, r4
 80012c4:	0018      	movs	r0, r3
 80012c6:	2314      	movs	r3, #20
 80012c8:	001a      	movs	r2, r3
 80012ca:	2100      	movs	r1, #0
 80012cc:	f003 f90e 	bl	80044ec <memset>
  if(hadc->Instance==ADC1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a2d      	ldr	r2, [pc, #180]	; (800138c <HAL_ADC_MspInit+0xd4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d153      	bne.n	8001382 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <HAL_ADC_MspInit+0xd8>)
 80012dc:	699a      	ldr	r2, [r3, #24]
 80012de:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <HAL_ADC_MspInit+0xd8>)
 80012e0:	2180      	movs	r1, #128	; 0x80
 80012e2:	0089      	lsls	r1, r1, #2
 80012e4:	430a      	orrs	r2, r1
 80012e6:	619a      	str	r2, [r3, #24]
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <HAL_ADC_MspInit+0xd8>)
 80012ea:	699a      	ldr	r2, [r3, #24]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <HAL_ADC_MspInit+0xd8>)
 80012f8:	695a      	ldr	r2, [r3, #20]
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <HAL_ADC_MspInit+0xd8>)
 80012fc:	2180      	movs	r1, #128	; 0x80
 80012fe:	0289      	lsls	r1, r1, #10
 8001300:	430a      	orrs	r2, r1
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <HAL_ADC_MspInit+0xd8>)
 8001306:	695a      	ldr	r2, [r3, #20]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	029b      	lsls	r3, r3, #10
 800130c:	4013      	ands	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001312:	193b      	adds	r3, r7, r4
 8001314:	22fe      	movs	r2, #254	; 0xfe
 8001316:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001318:	193b      	adds	r3, r7, r4
 800131a:	2203      	movs	r2, #3
 800131c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	193b      	adds	r3, r7, r4
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001324:	193a      	adds	r2, r7, r4
 8001326:	2390      	movs	r3, #144	; 0x90
 8001328:	05db      	lsls	r3, r3, #23
 800132a:	0011      	movs	r1, r2
 800132c:	0018      	movs	r0, r3
 800132e:	f001 f901 	bl	8002534 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_ADC_MspInit+0xdc>)
 8001334:	4a18      	ldr	r2, [pc, #96]	; (8001398 <HAL_ADC_MspInit+0xe0>)
 8001336:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <HAL_ADC_MspInit+0xdc>)
 800133a:	2200      	movs	r2, #0
 800133c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_ADC_MspInit+0xdc>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_ADC_MspInit+0xdc>)
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_ADC_MspInit+0xdc>)
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	0052      	lsls	r2, r2, #1
 8001350:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_ADC_MspInit+0xdc>)
 8001354:	2280      	movs	r2, #128	; 0x80
 8001356:	00d2      	lsls	r2, r2, #3
 8001358:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <HAL_ADC_MspInit+0xdc>)
 800135c:	2220      	movs	r2, #32
 800135e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_ADC_MspInit+0xdc>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <HAL_ADC_MspInit+0xdc>)
 8001368:	0018      	movs	r0, r3
 800136a:	f000 ff4b 	bl	8002204 <HAL_DMA_Init>
 800136e:	1e03      	subs	r3, r0, #0
 8001370:	d001      	beq.n	8001376 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001372:	f7ff ff77 	bl	8001264 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_ADC_MspInit+0xdc>)
 800137a:	631a      	str	r2, [r3, #48]	; 0x30
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_ADC_MspInit+0xdc>)
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	b00b      	add	sp, #44	; 0x2c
 8001388:	bd90      	pop	{r4, r7, pc}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	40012400 	.word	0x40012400
 8001390:	40021000 	.word	0x40021000
 8001394:	20000068 	.word	0x20000068
 8001398:	40020008 	.word	0x40020008

0800139c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b08b      	sub	sp, #44	; 0x2c
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	2414      	movs	r4, #20
 80013a6:	193b      	adds	r3, r7, r4
 80013a8:	0018      	movs	r0, r3
 80013aa:	2314      	movs	r3, #20
 80013ac:	001a      	movs	r2, r3
 80013ae:	2100      	movs	r1, #0
 80013b0:	f003 f89c 	bl	80044ec <memset>
  if(hi2c->Instance==I2C1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1c      	ldr	r2, [pc, #112]	; (800142c <HAL_I2C_MspInit+0x90>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d132      	bne.n	8001424 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <HAL_I2C_MspInit+0x94>)
 80013c0:	695a      	ldr	r2, [r3, #20]
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <HAL_I2C_MspInit+0x94>)
 80013c4:	2180      	movs	r1, #128	; 0x80
 80013c6:	02c9      	lsls	r1, r1, #11
 80013c8:	430a      	orrs	r2, r1
 80013ca:	615a      	str	r2, [r3, #20]
 80013cc:	4b18      	ldr	r3, [pc, #96]	; (8001430 <HAL_I2C_MspInit+0x94>)
 80013ce:	695a      	ldr	r2, [r3, #20]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	02db      	lsls	r3, r3, #11
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80013da:	193b      	adds	r3, r7, r4
 80013dc:	22c0      	movs	r2, #192	; 0xc0
 80013de:	0052      	lsls	r2, r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e2:	0021      	movs	r1, r4
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2212      	movs	r2, #18
 80013e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2203      	movs	r2, #3
 80013f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2201      	movs	r2, #1
 80013fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <HAL_I2C_MspInit+0x98>)
 8001400:	0019      	movs	r1, r3
 8001402:	0010      	movs	r0, r2
 8001404:	f001 f896 	bl	8002534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_I2C_MspInit+0x94>)
 800140a:	69da      	ldr	r2, [r3, #28]
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_I2C_MspInit+0x94>)
 800140e:	2180      	movs	r1, #128	; 0x80
 8001410:	0389      	lsls	r1, r1, #14
 8001412:	430a      	orrs	r2, r1
 8001414:	61da      	str	r2, [r3, #28]
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_I2C_MspInit+0x94>)
 8001418:	69da      	ldr	r2, [r3, #28]
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	039b      	lsls	r3, r3, #14
 800141e:	4013      	ands	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	b00b      	add	sp, #44	; 0x2c
 800142a:	bd90      	pop	{r4, r7, pc}
 800142c:	40005400 	.word	0x40005400
 8001430:	40021000 	.word	0x40021000
 8001434:	48000400 	.word	0x48000400

08001438 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b08b      	sub	sp, #44	; 0x2c
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	2414      	movs	r4, #20
 8001442:	193b      	adds	r3, r7, r4
 8001444:	0018      	movs	r0, r3
 8001446:	2314      	movs	r3, #20
 8001448:	001a      	movs	r2, r3
 800144a:	2100      	movs	r1, #0
 800144c:	f003 f84e 	bl	80044ec <memset>
  if(hspi->Instance==SPI1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <HAL_SPI_MspInit+0x90>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d131      	bne.n	80014be <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_SPI_MspInit+0x94>)
 800145c:	699a      	ldr	r2, [r3, #24]
 800145e:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <HAL_SPI_MspInit+0x94>)
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	0149      	lsls	r1, r1, #5
 8001464:	430a      	orrs	r2, r1
 8001466:	619a      	str	r2, [r3, #24]
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_SPI_MspInit+0x94>)
 800146a:	699a      	ldr	r2, [r3, #24]
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	015b      	lsls	r3, r3, #5
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_SPI_MspInit+0x94>)
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <HAL_SPI_MspInit+0x94>)
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	02c9      	lsls	r1, r1, #11
 8001480:	430a      	orrs	r2, r1
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_SPI_MspInit+0x94>)
 8001486:	695a      	ldr	r2, [r3, #20]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	02db      	lsls	r3, r3, #11
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001492:	0021      	movs	r1, r4
 8001494:	187b      	adds	r3, r7, r1
 8001496:	2228      	movs	r2, #40	; 0x28
 8001498:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	187b      	adds	r3, r7, r1
 800149c:	2202      	movs	r2, #2
 800149e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	2203      	movs	r2, #3
 80014aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	4a06      	ldr	r2, [pc, #24]	; (80014d0 <HAL_SPI_MspInit+0x98>)
 80014b6:	0019      	movs	r1, r3
 80014b8:	0010      	movs	r0, r2
 80014ba:	f001 f83b 	bl	8002534 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	46bd      	mov	sp, r7
 80014c2:	b00b      	add	sp, #44	; 0x2c
 80014c4:	bd90      	pop	{r4, r7, pc}
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	40013000 	.word	0x40013000
 80014cc:	40021000 	.word	0x40021000
 80014d0:	48000400 	.word	0x48000400

080014d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b08b      	sub	sp, #44	; 0x2c
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	2414      	movs	r4, #20
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	0018      	movs	r0, r3
 80014e2:	2314      	movs	r3, #20
 80014e4:	001a      	movs	r2, r3
 80014e6:	2100      	movs	r1, #0
 80014e8:	f003 f800 	bl	80044ec <memset>
  if(htim_encoder->Instance==TIM1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <HAL_TIM_Encoder_MspInit+0x94>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d133      	bne.n	800155e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <HAL_TIM_Encoder_MspInit+0x98>)
 80014f8:	699a      	ldr	r2, [r3, #24]
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_TIM_Encoder_MspInit+0x98>)
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	0109      	lsls	r1, r1, #4
 8001500:	430a      	orrs	r2, r1
 8001502:	619a      	str	r2, [r3, #24]
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_TIM_Encoder_MspInit+0x98>)
 8001506:	699a      	ldr	r2, [r3, #24]
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_TIM_Encoder_MspInit+0x98>)
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_TIM_Encoder_MspInit+0x98>)
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	0289      	lsls	r1, r1, #10
 800151c:	430a      	orrs	r2, r1
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_TIM_Encoder_MspInit+0x98>)
 8001522:	695a      	ldr	r2, [r3, #20]
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	029b      	lsls	r3, r3, #10
 8001528:	4013      	ands	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800152e:	193b      	adds	r3, r7, r4
 8001530:	22c0      	movs	r2, #192	; 0xc0
 8001532:	0092      	lsls	r2, r2, #2
 8001534:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	0021      	movs	r1, r4
 8001538:	187b      	adds	r3, r7, r1
 800153a:	2202      	movs	r2, #2
 800153c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	187b      	adds	r3, r7, r1
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2202      	movs	r2, #2
 800154e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	187a      	adds	r2, r7, r1
 8001552:	2390      	movs	r3, #144	; 0x90
 8001554:	05db      	lsls	r3, r3, #23
 8001556:	0011      	movs	r1, r2
 8001558:	0018      	movs	r0, r3
 800155a:	f000 ffeb 	bl	8002534 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	46bd      	mov	sp, r7
 8001562:	b00b      	add	sp, #44	; 0x2c
 8001564:	bd90      	pop	{r4, r7, pc}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	40012c00 	.word	0x40012c00
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <HAL_TIM_Base_MspInit+0x48>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d115      	bne.n	80015ae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_TIM_Base_MspInit+0x4c>)
 8001584:	699a      	ldr	r2, [r3, #24]
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_TIM_Base_MspInit+0x4c>)
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	02c9      	lsls	r1, r1, #11
 800158c:	430a      	orrs	r2, r1
 800158e:	619a      	str	r2, [r3, #24]
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_TIM_Base_MspInit+0x4c>)
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	02db      	lsls	r3, r3, #11
 8001598:	4013      	ands	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2016      	movs	r0, #22
 80015a4:	f000 fdfc 	bl	80021a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80015a8:	2016      	movs	r0, #22
 80015aa:	f000 fe0e 	bl	80021ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b004      	add	sp, #16
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	40014800 	.word	0x40014800
 80015bc:	40021000 	.word	0x40021000

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler+0x4>

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e4:	f000 f894 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <DMA1_Channel1_IRQHandler+0x14>)
 80015f6:	0018      	movs	r0, r3
 80015f8:	f000 feb2 	bl	8002360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015fc:	46c0      	nop			; (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	20000068 	.word	0x20000068

08001608 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <TIM17_IRQHandler+0x14>)
 800160e:	0018      	movs	r0, r3
 8001610:	f002 fa34 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001614:	46c0      	nop			; (mov r8, r8)
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	200001ac 	.word	0x200001ac

08001620 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800162e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001630:	f7ff fff6 	bl	8001620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001634:	480c      	ldr	r0, [pc, #48]	; (8001668 <LoopForever+0x6>)
  ldr r1, =_edata
 8001636:	490d      	ldr	r1, [pc, #52]	; (800166c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <LoopForever+0xe>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800164c:	4c0a      	ldr	r4, [pc, #40]	; (8001678 <LoopForever+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800165a:	f002 ff4f 	bl	80044fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800165e:	f7ff fad5 	bl	8000c0c <main>

08001662 <LoopForever>:

LoopForever:
    b LoopForever
 8001662:	e7fe      	b.n	8001662 <LoopForever>
  ldr   r0, =_estack
 8001664:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001670:	080045a8 	.word	0x080045a8
  ldr r2, =_sbss
 8001674:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001678:	20000294 	.word	0x20000294

0800167c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC1_IRQHandler>
	...

08001680 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <HAL_Init+0x24>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_Init+0x24>)
 800168a:	2110      	movs	r1, #16
 800168c:	430a      	orrs	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 f809 	bl	80016a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001696:	f7ff fdeb 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	40022000 	.word	0x40022000

080016a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <HAL_InitTick+0x5c>)
 80016b2:	681c      	ldr	r4, [r3, #0]
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <HAL_InitTick+0x60>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	0019      	movs	r1, r3
 80016ba:	23fa      	movs	r3, #250	; 0xfa
 80016bc:	0098      	lsls	r0, r3, #2
 80016be:	f7fe fd23 	bl	8000108 <__udivsi3>
 80016c2:	0003      	movs	r3, r0
 80016c4:	0019      	movs	r1, r3
 80016c6:	0020      	movs	r0, r4
 80016c8:	f7fe fd1e 	bl	8000108 <__udivsi3>
 80016cc:	0003      	movs	r3, r0
 80016ce:	0018      	movs	r0, r3
 80016d0:	f000 fd8b 	bl	80021ea <HAL_SYSTICK_Config>
 80016d4:	1e03      	subs	r3, r0, #0
 80016d6:	d001      	beq.n	80016dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e00f      	b.n	80016fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b03      	cmp	r3, #3
 80016e0:	d80b      	bhi.n	80016fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	2301      	movs	r3, #1
 80016e6:	425b      	negs	r3, r3
 80016e8:	2200      	movs	r2, #0
 80016ea:	0018      	movs	r0, r3
 80016ec:	f000 fd58 	bl	80021a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_InitTick+0x64>)
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	0018      	movs	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	b003      	add	sp, #12
 8001702:	bd90      	pop	{r4, r7, pc}
 8001704:	20000000 	.word	0x20000000
 8001708:	20000008 	.word	0x20000008
 800170c:	20000004 	.word	0x20000004

08001710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_IncTick+0x1c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	001a      	movs	r2, r3
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_IncTick+0x20>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	18d2      	adds	r2, r2, r3
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_IncTick+0x20>)
 8001722:	601a      	str	r2, [r3, #0]
}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	20000008 	.word	0x20000008
 8001730:	20000290 	.word	0x20000290

08001734 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;
 8001738:	4b02      	ldr	r3, [pc, #8]	; (8001744 <HAL_GetTick+0x10>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	20000290 	.word	0x20000290

08001748 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001750:	230f      	movs	r3, #15
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e125      	b.n	80019b2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10a      	bne.n	8001784 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2234      	movs	r2, #52	; 0x34
 8001778:	2100      	movs	r1, #0
 800177a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	0018      	movs	r0, r3
 8001780:	f7ff fd9a 	bl	80012b8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001788:	2210      	movs	r2, #16
 800178a:	4013      	ands	r3, r2
 800178c:	d000      	beq.n	8001790 <HAL_ADC_Init+0x48>
 800178e:	e103      	b.n	8001998 <HAL_ADC_Init+0x250>
 8001790:	230f      	movs	r3, #15
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d000      	beq.n	800179c <HAL_ADC_Init+0x54>
 800179a:	e0fd      	b.n	8001998 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2204      	movs	r2, #4
 80017a4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80017a6:	d000      	beq.n	80017aa <HAL_ADC_Init+0x62>
 80017a8:	e0f6      	b.n	8001998 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ae:	4a83      	ldr	r2, [pc, #524]	; (80019bc <HAL_ADC_Init+0x274>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	2202      	movs	r2, #2
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2203      	movs	r2, #3
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d112      	bne.n	80017ee <HAL_ADC_Init+0xa6>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2201      	movs	r2, #1
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d009      	beq.n	80017ea <HAL_ADC_Init+0xa2>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	401a      	ands	r2, r3
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d101      	bne.n	80017ee <HAL_ADC_Init+0xa6>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <HAL_ADC_Init+0xa8>
 80017ee:	2300      	movs	r3, #0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d116      	bne.n	8001822 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2218      	movs	r2, #24
 80017fc:	4393      	bics	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	0899      	lsrs	r1, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68da      	ldr	r2, [r3, #12]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4964      	ldr	r1, [pc, #400]	; (80019c0 <HAL_ADC_Init+0x278>)
 800182e:	400a      	ands	r2, r1
 8001830:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7e1b      	ldrb	r3, [r3, #24]
 8001836:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7e5b      	ldrb	r3, [r3, #25]
 800183c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800183e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7e9b      	ldrb	r3, [r3, #26]
 8001844:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001846:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	2b01      	cmp	r3, #1
 800184e:	d002      	beq.n	8001856 <HAL_ADC_Init+0x10e>
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	015b      	lsls	r3, r3, #5
 8001854:	e000      	b.n	8001858 <HAL_ADC_Init+0x110>
 8001856:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001858:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800185e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d101      	bne.n	800186c <HAL_ADC_Init+0x124>
 8001868:	2304      	movs	r3, #4
 800186a:	e000      	b.n	800186e <HAL_ADC_Init+0x126>
 800186c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800186e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2124      	movs	r1, #36	; 0x24
 8001874:	5c5b      	ldrb	r3, [r3, r1]
 8001876:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001878:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	4313      	orrs	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7edb      	ldrb	r3, [r3, #27]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d115      	bne.n	80018b4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	7e9b      	ldrb	r3, [r3, #26]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	0252      	lsls	r2, r2, #9
 8001896:	4313      	orrs	r3, r2
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	e00b      	b.n	80018b4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a0:	2220      	movs	r2, #32
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ac:	2201      	movs	r2, #1
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69da      	ldr	r2, [r3, #28]
 80018b8:	23c2      	movs	r3, #194	; 0xc2
 80018ba:	33ff      	adds	r3, #255	; 0xff
 80018bc:	429a      	cmp	r2, r3
 80018be:	d007      	beq.n	80018d0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80018c8:	4313      	orrs	r3, r2
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68d9      	ldr	r1, [r3, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	430a      	orrs	r2, r1
 80018de:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e4:	2380      	movs	r3, #128	; 0x80
 80018e6:	055b      	lsls	r3, r3, #21
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d01b      	beq.n	8001924 <HAL_ADC_Init+0x1dc>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d017      	beq.n	8001924 <HAL_ADC_Init+0x1dc>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d013      	beq.n	8001924 <HAL_ADC_Init+0x1dc>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001900:	2b03      	cmp	r3, #3
 8001902:	d00f      	beq.n	8001924 <HAL_ADC_Init+0x1dc>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	2b04      	cmp	r3, #4
 800190a:	d00b      	beq.n	8001924 <HAL_ADC_Init+0x1dc>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	2b05      	cmp	r3, #5
 8001912:	d007      	beq.n	8001924 <HAL_ADC_Init+0x1dc>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	2b06      	cmp	r3, #6
 800191a:	d003      	beq.n	8001924 <HAL_ADC_Init+0x1dc>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	2b07      	cmp	r3, #7
 8001922:	d112      	bne.n	800194a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2107      	movs	r1, #7
 8001930:	438a      	bics	r2, r1
 8001932:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6959      	ldr	r1, [r3, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	2207      	movs	r2, #7
 8001940:	401a      	ands	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4a1c      	ldr	r2, [pc, #112]	; (80019c4 <HAL_ADC_Init+0x27c>)
 8001952:	4013      	ands	r3, r2
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	429a      	cmp	r2, r3
 8001958:	d10b      	bne.n	8001972 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001964:	2203      	movs	r2, #3
 8001966:	4393      	bics	r3, r2
 8001968:	2201      	movs	r2, #1
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001970:	e01c      	b.n	80019ac <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001976:	2212      	movs	r2, #18
 8001978:	4393      	bics	r3, r2
 800197a:	2210      	movs	r2, #16
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001986:	2201      	movs	r2, #1
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800198e:	230f      	movs	r3, #15
 8001990:	18fb      	adds	r3, r7, r3
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001996:	e009      	b.n	80019ac <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199c:	2210      	movs	r2, #16
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80019a4:	230f      	movs	r3, #15
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019ac:	230f      	movs	r3, #15
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	781b      	ldrb	r3, [r3, #0]
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b004      	add	sp, #16
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	fffffefd 	.word	0xfffffefd
 80019c0:	fffe0219 	.word	0xfffe0219
 80019c4:	833fffe7 	.word	0x833fffe7

080019c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d4:	2317      	movs	r3, #23
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2204      	movs	r2, #4
 80019e4:	4013      	ands	r3, r2
 80019e6:	d15e      	bne.n	8001aa6 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2234      	movs	r2, #52	; 0x34
 80019ec:	5c9b      	ldrb	r3, [r3, r2]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <HAL_ADC_Start_DMA+0x2e>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e05e      	b.n	8001ab4 <HAL_ADC_Start_DMA+0xec>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2234      	movs	r2, #52	; 0x34
 80019fa:	2101      	movs	r1, #1
 80019fc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	7e5b      	ldrb	r3, [r3, #25]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d007      	beq.n	8001a16 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001a06:	2317      	movs	r3, #23
 8001a08:	18fc      	adds	r4, r7, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f000 f96b 	bl	8001ce8 <ADC_Enable>
 8001a12:	0003      	movs	r3, r0
 8001a14:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a16:	2317      	movs	r3, #23
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d146      	bne.n	8001aae <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a24:	4a25      	ldr	r2, [pc, #148]	; (8001abc <HAL_ADC_Start_DMA+0xf4>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	2280      	movs	r2, #128	; 0x80
 8001a2a:	0052      	lsls	r2, r2, #1
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2234      	movs	r2, #52	; 0x34
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <HAL_ADC_Start_DMA+0xf8>)
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	; (8001ac4 <HAL_ADC_Start_DMA+0xfc>)
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	4a1c      	ldr	r2, [pc, #112]	; (8001ac8 <HAL_ADC_Start_DMA+0x100>)
 8001a56:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	221c      	movs	r2, #28
 8001a5e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2110      	movs	r1, #16
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	3340      	adds	r3, #64	; 0x40
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f000 fc00 	bl	8002294 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	e003      	b.n	8001aae <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001aa6:	2317      	movs	r3, #23
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	2202      	movs	r2, #2
 8001aac:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001aae:	2317      	movs	r3, #23
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	781b      	ldrb	r3, [r3, #0]
}
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b007      	add	sp, #28
 8001aba:	bd90      	pop	{r4, r7, pc}
 8001abc:	fffff0fe 	.word	0xfffff0fe
 8001ac0:	08001df1 	.word	0x08001df1
 8001ac4:	08001ea5 	.word	0x08001ea5
 8001ac8:	08001ec3 	.word	0x08001ec3

08001acc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ae4:	46c0      	nop			; (mov r8, r8)
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b002      	add	sp, #8
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b06:	230f      	movs	r3, #15
 8001b08:	18fb      	adds	r3, r7, r3
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	055b      	lsls	r3, r3, #21
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d011      	beq.n	8001b42 <HAL_ADC_ConfigChannel+0x46>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d00d      	beq.n	8001b42 <HAL_ADC_ConfigChannel+0x46>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d009      	beq.n	8001b42 <HAL_ADC_ConfigChannel+0x46>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d005      	beq.n	8001b42 <HAL_ADC_ConfigChannel+0x46>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d001      	beq.n	8001b42 <HAL_ADC_ConfigChannel+0x46>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2234      	movs	r2, #52	; 0x34
 8001b46:	5c9b      	ldrb	r3, [r3, r2]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x54>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e0bb      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x1cc>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2234      	movs	r2, #52	; 0x34
 8001b54:	2101      	movs	r1, #1
 8001b56:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2204      	movs	r2, #4
 8001b60:	4013      	ands	r3, r2
 8001b62:	d000      	beq.n	8001b66 <HAL_ADC_ConfigChannel+0x6a>
 8001b64:	e09f      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4a59      	ldr	r2, [pc, #356]	; (8001cd0 <HAL_ADC_ConfigChannel+0x1d4>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d100      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x76>
 8001b70:	e077      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	430a      	orrs	r2, r1
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	055b      	lsls	r3, r3, #21
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d037      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0x108>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d033      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0x108>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d02f      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0x108>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d02b      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0x108>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d027      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0x108>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d023      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0x108>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	2b06      	cmp	r3, #6
 8001bc2:	d01f      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0x108>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc8:	2b07      	cmp	r3, #7
 8001bca:	d01b      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	2107      	movs	r1, #7
 8001bd8:	400b      	ands	r3, r1
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d012      	beq.n	8001c04 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2107      	movs	r1, #7
 8001bea:	438a      	bics	r2, r1
 8001bec:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6959      	ldr	r1, [r3, #20]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b10      	cmp	r3, #16
 8001c0a:	d003      	beq.n	8001c14 <HAL_ADC_ConfigChannel+0x118>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b11      	cmp	r3, #17
 8001c12:	d152      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c14:	4b2f      	ldr	r3, [pc, #188]	; (8001cd4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001c16:	6819      	ldr	r1, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b10      	cmp	r3, #16
 8001c1e:	d102      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x12a>
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	041b      	lsls	r3, r3, #16
 8001c24:	e001      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x12e>
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	03db      	lsls	r3, r3, #15
 8001c2a:	4a2a      	ldr	r2, [pc, #168]	; (8001cd4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b10      	cmp	r3, #16
 8001c36:	d140      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c38:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <HAL_ADC_ConfigChannel+0x1dc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4927      	ldr	r1, [pc, #156]	; (8001cdc <HAL_ADC_ConfigChannel+0x1e0>)
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f7fe fa62 	bl	8000108 <__udivsi3>
 8001c44:	0003      	movs	r3, r0
 8001c46:	001a      	movs	r2, r3
 8001c48:	0013      	movs	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	189b      	adds	r3, r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c52:	e002      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f9      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x158>
 8001c60:	e02b      	b.n	8001cba <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	4099      	lsls	r1, r3
 8001c70:	000b      	movs	r3, r1
 8001c72:	43d9      	mvns	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	400a      	ands	r2, r1
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b10      	cmp	r3, #16
 8001c82:	d003      	beq.n	8001c8c <HAL_ADC_ConfigChannel+0x190>
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b11      	cmp	r3, #17
 8001c8a:	d116      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001c8e:	6819      	ldr	r1, [r3, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	d101      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x1a0>
 8001c98:	4a11      	ldr	r2, [pc, #68]	; (8001ce0 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c9a:	e000      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1a2>
 8001c9c:	4a11      	ldr	r2, [pc, #68]	; (8001ce4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e009      	b.n	8001cba <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001caa:	2220      	movs	r2, #32
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001cb2:	230f      	movs	r3, #15
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2234      	movs	r2, #52	; 0x34
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001cc2:	230f      	movs	r3, #15
 8001cc4:	18fb      	adds	r3, r7, r3
 8001cc6:	781b      	ldrb	r3, [r3, #0]
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b004      	add	sp, #16
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	00001001 	.word	0x00001001
 8001cd4:	40012708 	.word	0x40012708
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	000f4240 	.word	0x000f4240
 8001ce0:	ff7fffff 	.word	0xff7fffff
 8001ce4:	ffbfffff 	.word	0xffbfffff

08001ce8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2203      	movs	r2, #3
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d112      	bne.n	8001d2c <ADC_Enable+0x44>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4013      	ands	r3, r2
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d009      	beq.n	8001d28 <ADC_Enable+0x40>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	2380      	movs	r3, #128	; 0x80
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	401a      	ands	r2, r3
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	021b      	lsls	r3, r3, #8
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d101      	bne.n	8001d2c <ADC_Enable+0x44>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <ADC_Enable+0x46>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d152      	bne.n	8001dd8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <ADC_Enable+0xfc>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d00d      	beq.n	8001d5a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d42:	2210      	movs	r2, #16
 8001d44:	431a      	orrs	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4e:	2201      	movs	r2, #1
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e03f      	b.n	8001dda <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2101      	movs	r1, #1
 8001d66:	430a      	orrs	r2, r1
 8001d68:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d6a:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <ADC_Enable+0x100>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	491f      	ldr	r1, [pc, #124]	; (8001dec <ADC_Enable+0x104>)
 8001d70:	0018      	movs	r0, r3
 8001d72:	f7fe f9c9 	bl	8000108 <__udivsi3>
 8001d76:	0003      	movs	r3, r0
 8001d78:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d7a:	e002      	b.n	8001d82 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f9      	bne.n	8001d7c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d88:	f7ff fcd4 	bl	8001734 <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d90:	e01b      	b.n	8001dca <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d92:	f7ff fccf 	bl	8001734 <HAL_GetTick>
 8001d96:	0002      	movs	r2, r0
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d914      	bls.n	8001dca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2201      	movs	r2, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d00d      	beq.n	8001dca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db2:	2210      	movs	r2, #16
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e007      	b.n	8001dda <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d1dc      	bne.n	8001d92 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b004      	add	sp, #16
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	80000017 	.word	0x80000017
 8001de8:	20000000 	.word	0x20000000
 8001dec:	000f4240 	.word	0x000f4240

08001df0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e02:	2250      	movs	r2, #80	; 0x50
 8001e04:	4013      	ands	r3, r2
 8001e06:	d140      	bne.n	8001e8a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0c:	2280      	movs	r2, #128	; 0x80
 8001e0e:	0092      	lsls	r2, r2, #2
 8001e10:	431a      	orrs	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	23c0      	movs	r3, #192	; 0xc0
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	4013      	ands	r3, r2
 8001e22:	d12d      	bne.n	8001e80 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d129      	bne.n	8001e80 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2208      	movs	r2, #8
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d122      	bne.n	8001e80 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2204      	movs	r2, #4
 8001e42:	4013      	ands	r3, r2
 8001e44:	d110      	bne.n	8001e68 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	210c      	movs	r1, #12
 8001e52:	438a      	bics	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5a:	4a11      	ldr	r2, [pc, #68]	; (8001ea0 <ADC_DMAConvCplt+0xb0>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2201      	movs	r2, #1
 8001e60:	431a      	orrs	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	639a      	str	r2, [r3, #56]	; 0x38
 8001e66:	e00b      	b.n	8001e80 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e78:	2201      	movs	r2, #1
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7ff fe22 	bl	8001acc <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001e88:	e005      	b.n	8001e96 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	0010      	movs	r0, r2
 8001e94:	4798      	blx	r3
}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b004      	add	sp, #16
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	fffffefe 	.word	0xfffffefe

08001ea4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7ff fe11 	bl	8001adc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b004      	add	sp, #16
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed4:	2240      	movs	r2, #64	; 0x40
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	0018      	movs	r0, r3
 8001eec:	f7ff fdfe 	bl	8001aec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b004      	add	sp, #16
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f00:	2317      	movs	r3, #23
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2234      	movs	r2, #52	; 0x34
 8001f14:	5c9b      	ldrb	r3, [r3, r2]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_ADCEx_Calibration_Start+0x26>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e08d      	b.n	800203a <HAL_ADCEx_Calibration_Start+0x142>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2234      	movs	r2, #52	; 0x34
 8001f22:	2101      	movs	r1, #1
 8001f24:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d112      	bne.n	8001f5a <HAL_ADCEx_Calibration_Start+0x62>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d009      	beq.n	8001f56 <HAL_ADCEx_Calibration_Start+0x5e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	2380      	movs	r3, #128	; 0x80
 8001f4a:	021b      	lsls	r3, r3, #8
 8001f4c:	401a      	ands	r2, r3
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d101      	bne.n	8001f5a <HAL_ADCEx_Calibration_Start+0x62>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_ADCEx_Calibration_Start+0x64>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d15b      	bne.n	8002018 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f64:	4a37      	ldr	r2, [pc, #220]	; (8002044 <HAL_ADCEx_Calibration_Start+0x14c>)
 8001f66:	4013      	ands	r3, r2
 8001f68:	2202      	movs	r2, #2
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2203      	movs	r2, #3
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2103      	movs	r1, #3
 8001f88:	438a      	bics	r2, r1
 8001f8a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	0609      	lsls	r1, r1, #24
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001f9e:	f7ff fbc9 	bl	8001734 <HAL_GetTick>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001fa6:	e01d      	b.n	8001fe4 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001fa8:	f7ff fbc4 	bl	8001734 <HAL_GetTick>
 8001fac:	0002      	movs	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d916      	bls.n	8001fe4 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	0fdb      	lsrs	r3, r3, #31
 8001fbe:	07da      	lsls	r2, r3, #31
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	061b      	lsls	r3, r3, #24
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d10d      	bne.n	8001fe4 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	2212      	movs	r2, #18
 8001fce:	4393      	bics	r3, r2
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2234      	movs	r2, #52	; 0x34
 8001fdc:	2100      	movs	r1, #0
 8001fde:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e02a      	b.n	800203a <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	0fdb      	lsrs	r3, r3, #31
 8001fec:	07da      	lsls	r2, r3, #31
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d0d8      	beq.n	8001fa8 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68d9      	ldr	r1, [r3, #12]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	430a      	orrs	r2, r1
 8002004:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200a:	2203      	movs	r2, #3
 800200c:	4393      	bics	r3, r2
 800200e:	2201      	movs	r2, #1
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	639a      	str	r2, [r3, #56]	; 0x38
 8002016:	e009      	b.n	800202c <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	2220      	movs	r2, #32
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002024:	2317      	movs	r3, #23
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2234      	movs	r2, #52	; 0x34
 8002030:	2100      	movs	r1, #0
 8002032:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002034:	2317      	movs	r3, #23
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	781b      	ldrb	r3, [r3, #0]
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b006      	add	sp, #24
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	fffffefd 	.word	0xfffffefd

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	0002      	movs	r2, r0
 8002050:	1dfb      	adds	r3, r7, #7
 8002052:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002054:	1dfb      	adds	r3, r7, #7
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b7f      	cmp	r3, #127	; 0x7f
 800205a:	d809      	bhi.n	8002070 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205c:	1dfb      	adds	r3, r7, #7
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	001a      	movs	r2, r3
 8002062:	231f      	movs	r3, #31
 8002064:	401a      	ands	r2, r3
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <__NVIC_EnableIRQ+0x30>)
 8002068:	2101      	movs	r1, #1
 800206a:	4091      	lsls	r1, r2
 800206c:	000a      	movs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
  }
}
 8002070:	46c0      	nop			; (mov r8, r8)
 8002072:	46bd      	mov	sp, r7
 8002074:	b002      	add	sp, #8
 8002076:	bd80      	pop	{r7, pc}
 8002078:	e000e100 	.word	0xe000e100

0800207c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800207c:	b590      	push	{r4, r7, lr}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	0002      	movs	r2, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b7f      	cmp	r3, #127	; 0x7f
 8002090:	d828      	bhi.n	80020e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002092:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <__NVIC_SetPriority+0xd4>)
 8002094:	1dfb      	adds	r3, r7, #7
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	b25b      	sxtb	r3, r3
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	33c0      	adds	r3, #192	; 0xc0
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	589b      	ldr	r3, [r3, r2]
 80020a2:	1dfa      	adds	r2, r7, #7
 80020a4:	7812      	ldrb	r2, [r2, #0]
 80020a6:	0011      	movs	r1, r2
 80020a8:	2203      	movs	r2, #3
 80020aa:	400a      	ands	r2, r1
 80020ac:	00d2      	lsls	r2, r2, #3
 80020ae:	21ff      	movs	r1, #255	; 0xff
 80020b0:	4091      	lsls	r1, r2
 80020b2:	000a      	movs	r2, r1
 80020b4:	43d2      	mvns	r2, r2
 80020b6:	401a      	ands	r2, r3
 80020b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	019b      	lsls	r3, r3, #6
 80020be:	22ff      	movs	r2, #255	; 0xff
 80020c0:	401a      	ands	r2, r3
 80020c2:	1dfb      	adds	r3, r7, #7
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	0018      	movs	r0, r3
 80020c8:	2303      	movs	r3, #3
 80020ca:	4003      	ands	r3, r0
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020d0:	481f      	ldr	r0, [pc, #124]	; (8002150 <__NVIC_SetPriority+0xd4>)
 80020d2:	1dfb      	adds	r3, r7, #7
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	b25b      	sxtb	r3, r3
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	430a      	orrs	r2, r1
 80020dc:	33c0      	adds	r3, #192	; 0xc0
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020e2:	e031      	b.n	8002148 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020e4:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <__NVIC_SetPriority+0xd8>)
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	0019      	movs	r1, r3
 80020ec:	230f      	movs	r3, #15
 80020ee:	400b      	ands	r3, r1
 80020f0:	3b08      	subs	r3, #8
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	3306      	adds	r3, #6
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	18d3      	adds	r3, r2, r3
 80020fa:	3304      	adds	r3, #4
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	1dfa      	adds	r2, r7, #7
 8002100:	7812      	ldrb	r2, [r2, #0]
 8002102:	0011      	movs	r1, r2
 8002104:	2203      	movs	r2, #3
 8002106:	400a      	ands	r2, r1
 8002108:	00d2      	lsls	r2, r2, #3
 800210a:	21ff      	movs	r1, #255	; 0xff
 800210c:	4091      	lsls	r1, r2
 800210e:	000a      	movs	r2, r1
 8002110:	43d2      	mvns	r2, r2
 8002112:	401a      	ands	r2, r3
 8002114:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	019b      	lsls	r3, r3, #6
 800211a:	22ff      	movs	r2, #255	; 0xff
 800211c:	401a      	ands	r2, r3
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	0018      	movs	r0, r3
 8002124:	2303      	movs	r3, #3
 8002126:	4003      	ands	r3, r0
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800212c:	4809      	ldr	r0, [pc, #36]	; (8002154 <__NVIC_SetPriority+0xd8>)
 800212e:	1dfb      	adds	r3, r7, #7
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	001c      	movs	r4, r3
 8002134:	230f      	movs	r3, #15
 8002136:	4023      	ands	r3, r4
 8002138:	3b08      	subs	r3, #8
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	430a      	orrs	r2, r1
 800213e:	3306      	adds	r3, #6
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	18c3      	adds	r3, r0, r3
 8002144:	3304      	adds	r3, #4
 8002146:	601a      	str	r2, [r3, #0]
}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	b003      	add	sp, #12
 800214e:	bd90      	pop	{r4, r7, pc}
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1e5a      	subs	r2, r3, #1
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	045b      	lsls	r3, r3, #17
 8002168:	429a      	cmp	r2, r3
 800216a:	d301      	bcc.n	8002170 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216c:	2301      	movs	r3, #1
 800216e:	e010      	b.n	8002192 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <SysTick_Config+0x44>)
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	3a01      	subs	r2, #1
 8002176:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002178:	2301      	movs	r3, #1
 800217a:	425b      	negs	r3, r3
 800217c:	2103      	movs	r1, #3
 800217e:	0018      	movs	r0, r3
 8002180:	f7ff ff7c 	bl	800207c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <SysTick_Config+0x44>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <SysTick_Config+0x44>)
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002190:	2300      	movs	r3, #0
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b002      	add	sp, #8
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	e000e010 	.word	0xe000e010

080021a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	210f      	movs	r1, #15
 80021ac:	187b      	adds	r3, r7, r1
 80021ae:	1c02      	adds	r2, r0, #0
 80021b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	187b      	adds	r3, r7, r1
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b25b      	sxtb	r3, r3
 80021ba:	0011      	movs	r1, r2
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff ff5d 	bl	800207c <__NVIC_SetPriority>
}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b004      	add	sp, #16
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	0002      	movs	r2, r0
 80021d2:	1dfb      	adds	r3, r7, #7
 80021d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b25b      	sxtb	r3, r3
 80021dc:	0018      	movs	r0, r3
 80021de:	f7ff ff33 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b002      	add	sp, #8
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff ffaf 	bl	8002158 <SysTick_Config>
 80021fa:	0003      	movs	r3, r0
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	b002      	add	sp, #8
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e036      	b.n	8002288 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2221      	movs	r2, #33	; 0x21
 800221e:	2102      	movs	r1, #2
 8002220:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4a18      	ldr	r2, [pc, #96]	; (8002290 <HAL_DMA_Init+0x8c>)
 800222e:	4013      	ands	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800223a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002246:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002252:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4313      	orrs	r3, r2
 800225e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	0018      	movs	r0, r3
 800226c:	f000 f946 	bl	80024fc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2221      	movs	r2, #33	; 0x21
 800227a:	2101      	movs	r1, #1
 800227c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2220      	movs	r2, #32
 8002282:	2100      	movs	r1, #0
 8002284:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	b004      	add	sp, #16
 800228e:	bd80      	pop	{r7, pc}
 8002290:	ffffc00f 	.word	0xffffc00f

08002294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022a2:	2317      	movs	r3, #23
 80022a4:	18fb      	adds	r3, r7, r3
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2220      	movs	r2, #32
 80022ae:	5c9b      	ldrb	r3, [r3, r2]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_DMA_Start_IT+0x24>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e04f      	b.n	8002358 <HAL_DMA_Start_IT+0xc4>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	2101      	movs	r1, #1
 80022be:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2221      	movs	r2, #33	; 0x21
 80022c4:	5c9b      	ldrb	r3, [r3, r2]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d13a      	bne.n	8002342 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2221      	movs	r2, #33	; 0x21
 80022d0:	2102      	movs	r1, #2
 80022d2:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2101      	movs	r1, #1
 80022e6:	438a      	bics	r2, r1
 80022e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f8d7 	bl	80024a4 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	210e      	movs	r1, #14
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e00f      	b.n	8002330 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	210a      	movs	r1, #10
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2104      	movs	r1, #4
 800232c:	438a      	bics	r2, r1
 800232e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2101      	movs	r1, #1
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e007      	b.n	8002352 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2220      	movs	r2, #32
 8002346:	2100      	movs	r1, #0
 8002348:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800234a:	2317      	movs	r3, #23
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	2202      	movs	r2, #2
 8002350:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002352:	2317      	movs	r3, #23
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	781b      	ldrb	r3, [r3, #0]
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b006      	add	sp, #24
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	2204      	movs	r2, #4
 800237e:	409a      	lsls	r2, r3
 8002380:	0013      	movs	r3, r2
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4013      	ands	r3, r2
 8002386:	d024      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x72>
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2204      	movs	r2, #4
 800238c:	4013      	ands	r3, r2
 800238e:	d020      	beq.n	80023d2 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2220      	movs	r2, #32
 8002398:	4013      	ands	r3, r2
 800239a:	d107      	bne.n	80023ac <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2104      	movs	r1, #4
 80023a8:	438a      	bics	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b4:	2104      	movs	r1, #4
 80023b6:	4091      	lsls	r1, r2
 80023b8:	000a      	movs	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d100      	bne.n	80023c6 <HAL_DMA_IRQHandler+0x66>
 80023c4:	e06a      	b.n	800249c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	0010      	movs	r0, r2
 80023ce:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80023d0:	e064      	b.n	800249c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	2202      	movs	r2, #2
 80023d8:	409a      	lsls	r2, r3
 80023da:	0013      	movs	r3, r2
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4013      	ands	r3, r2
 80023e0:	d02b      	beq.n	800243a <HAL_DMA_IRQHandler+0xda>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2202      	movs	r2, #2
 80023e6:	4013      	ands	r3, r2
 80023e8:	d027      	beq.n	800243a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2220      	movs	r2, #32
 80023f2:	4013      	ands	r3, r2
 80023f4:	d10b      	bne.n	800240e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	210a      	movs	r1, #10
 8002402:	438a      	bics	r2, r1
 8002404:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2221      	movs	r2, #33	; 0x21
 800240a:	2101      	movs	r1, #1
 800240c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002416:	2102      	movs	r1, #2
 8002418:	4091      	lsls	r1, r2
 800241a:	000a      	movs	r2, r1
 800241c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2220      	movs	r2, #32
 8002422:	2100      	movs	r1, #0
 8002424:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	2b00      	cmp	r3, #0
 800242c:	d036      	beq.n	800249c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	0010      	movs	r0, r2
 8002436:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002438:	e030      	b.n	800249c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	2208      	movs	r2, #8
 8002440:	409a      	lsls	r2, r3
 8002442:	0013      	movs	r3, r2
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	d028      	beq.n	800249c <HAL_DMA_IRQHandler+0x13c>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2208      	movs	r2, #8
 800244e:	4013      	ands	r3, r2
 8002450:	d024      	beq.n	800249c <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	210e      	movs	r1, #14
 800245e:	438a      	bics	r2, r1
 8002460:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	2101      	movs	r1, #1
 800246c:	4091      	lsls	r1, r2
 800246e:	000a      	movs	r2, r1
 8002470:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2221      	movs	r2, #33	; 0x21
 800247c:	2101      	movs	r1, #1
 800247e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2220      	movs	r2, #32
 8002484:	2100      	movs	r1, #0
 8002486:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	0010      	movs	r0, r2
 8002498:	4798      	blx	r3
    }
  }
}
 800249a:	e7ff      	b.n	800249c <HAL_DMA_IRQHandler+0x13c>
 800249c:	46c0      	nop			; (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b004      	add	sp, #16
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ba:	2101      	movs	r1, #1
 80024bc:	4091      	lsls	r1, r2
 80024be:	000a      	movs	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d108      	bne.n	80024e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80024e2:	e007      	b.n	80024f4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	60da      	str	r2, [r3, #12]
}
 80024f4:	46c0      	nop			; (mov r8, r8)
 80024f6:	46bd      	mov	sp, r7
 80024f8:	b004      	add	sp, #16
 80024fa:	bd80      	pop	{r7, pc}

080024fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a08      	ldr	r2, [pc, #32]	; (800252c <DMA_CalcBaseAndBitshift+0x30>)
 800250a:	4694      	mov	ip, r2
 800250c:	4463      	add	r3, ip
 800250e:	2114      	movs	r1, #20
 8002510:	0018      	movs	r0, r3
 8002512:	f7fd fdf9 	bl	8000108 <__udivsi3>
 8002516:	0003      	movs	r3, r0
 8002518:	009a      	lsls	r2, r3, #2
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a03      	ldr	r2, [pc, #12]	; (8002530 <DMA_CalcBaseAndBitshift+0x34>)
 8002522:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	b002      	add	sp, #8
 800252a:	bd80      	pop	{r7, pc}
 800252c:	bffdfff8 	.word	0xbffdfff8
 8002530:	40020000 	.word	0x40020000

08002534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002542:	e14f      	b.n	80027e4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2101      	movs	r1, #1
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4091      	lsls	r1, r2
 800254e:	000a      	movs	r2, r1
 8002550:	4013      	ands	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d100      	bne.n	800255c <HAL_GPIO_Init+0x28>
 800255a:	e140      	b.n	80027de <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2203      	movs	r2, #3
 8002562:	4013      	ands	r3, r2
 8002564:	2b01      	cmp	r3, #1
 8002566:	d005      	beq.n	8002574 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2203      	movs	r2, #3
 800256e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002570:	2b02      	cmp	r3, #2
 8002572:	d130      	bne.n	80025d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	409a      	lsls	r2, r3
 8002582:	0013      	movs	r3, r2
 8002584:	43da      	mvns	r2, r3
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	409a      	lsls	r2, r3
 8002596:	0013      	movs	r3, r2
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025aa:	2201      	movs	r2, #1
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	409a      	lsls	r2, r3
 80025b0:	0013      	movs	r3, r2
 80025b2:	43da      	mvns	r2, r3
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	2201      	movs	r2, #1
 80025c2:	401a      	ands	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	409a      	lsls	r2, r3
 80025c8:	0013      	movs	r3, r2
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2203      	movs	r2, #3
 80025dc:	4013      	ands	r3, r2
 80025de:	2b03      	cmp	r3, #3
 80025e0:	d017      	beq.n	8002612 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	2203      	movs	r2, #3
 80025ee:	409a      	lsls	r2, r3
 80025f0:	0013      	movs	r3, r2
 80025f2:	43da      	mvns	r2, r3
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	409a      	lsls	r2, r3
 8002604:	0013      	movs	r3, r2
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2203      	movs	r2, #3
 8002618:	4013      	ands	r3, r2
 800261a:	2b02      	cmp	r3, #2
 800261c:	d123      	bne.n	8002666 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	08da      	lsrs	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3208      	adds	r2, #8
 8002626:	0092      	lsls	r2, r2, #2
 8002628:	58d3      	ldr	r3, [r2, r3]
 800262a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2207      	movs	r2, #7
 8002630:	4013      	ands	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	409a      	lsls	r2, r3
 8002638:	0013      	movs	r3, r2
 800263a:	43da      	mvns	r2, r3
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4013      	ands	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2107      	movs	r1, #7
 800264a:	400b      	ands	r3, r1
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	409a      	lsls	r2, r3
 8002650:	0013      	movs	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	08da      	lsrs	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3208      	adds	r2, #8
 8002660:	0092      	lsls	r2, r2, #2
 8002662:	6939      	ldr	r1, [r7, #16]
 8002664:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	2203      	movs	r2, #3
 8002672:	409a      	lsls	r2, r3
 8002674:	0013      	movs	r3, r2
 8002676:	43da      	mvns	r2, r3
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4013      	ands	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2203      	movs	r2, #3
 8002684:	401a      	ands	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	409a      	lsls	r2, r3
 800268c:	0013      	movs	r3, r2
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	23c0      	movs	r3, #192	; 0xc0
 80026a0:	029b      	lsls	r3, r3, #10
 80026a2:	4013      	ands	r3, r2
 80026a4:	d100      	bne.n	80026a8 <HAL_GPIO_Init+0x174>
 80026a6:	e09a      	b.n	80027de <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a8:	4b54      	ldr	r3, [pc, #336]	; (80027fc <HAL_GPIO_Init+0x2c8>)
 80026aa:	699a      	ldr	r2, [r3, #24]
 80026ac:	4b53      	ldr	r3, [pc, #332]	; (80027fc <HAL_GPIO_Init+0x2c8>)
 80026ae:	2101      	movs	r1, #1
 80026b0:	430a      	orrs	r2, r1
 80026b2:	619a      	str	r2, [r3, #24]
 80026b4:	4b51      	ldr	r3, [pc, #324]	; (80027fc <HAL_GPIO_Init+0x2c8>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	2201      	movs	r2, #1
 80026ba:	4013      	ands	r3, r2
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026c0:	4a4f      	ldr	r2, [pc, #316]	; (8002800 <HAL_GPIO_Init+0x2cc>)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3302      	adds	r3, #2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	589b      	ldr	r3, [r3, r2]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2203      	movs	r2, #3
 80026d2:	4013      	ands	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	409a      	lsls	r2, r3
 80026da:	0013      	movs	r3, r2
 80026dc:	43da      	mvns	r2, r3
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	2390      	movs	r3, #144	; 0x90
 80026e8:	05db      	lsls	r3, r3, #23
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d013      	beq.n	8002716 <HAL_GPIO_Init+0x1e2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a44      	ldr	r2, [pc, #272]	; (8002804 <HAL_GPIO_Init+0x2d0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00d      	beq.n	8002712 <HAL_GPIO_Init+0x1de>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a43      	ldr	r2, [pc, #268]	; (8002808 <HAL_GPIO_Init+0x2d4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d007      	beq.n	800270e <HAL_GPIO_Init+0x1da>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a42      	ldr	r2, [pc, #264]	; (800280c <HAL_GPIO_Init+0x2d8>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_GPIO_Init+0x1d6>
 8002706:	2303      	movs	r3, #3
 8002708:	e006      	b.n	8002718 <HAL_GPIO_Init+0x1e4>
 800270a:	2305      	movs	r3, #5
 800270c:	e004      	b.n	8002718 <HAL_GPIO_Init+0x1e4>
 800270e:	2302      	movs	r3, #2
 8002710:	e002      	b.n	8002718 <HAL_GPIO_Init+0x1e4>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_GPIO_Init+0x1e4>
 8002716:	2300      	movs	r3, #0
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	2103      	movs	r1, #3
 800271c:	400a      	ands	r2, r1
 800271e:	0092      	lsls	r2, r2, #2
 8002720:	4093      	lsls	r3, r2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002728:	4935      	ldr	r1, [pc, #212]	; (8002800 <HAL_GPIO_Init+0x2cc>)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	089b      	lsrs	r3, r3, #2
 800272e:	3302      	adds	r3, #2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002736:	4b36      	ldr	r3, [pc, #216]	; (8002810 <HAL_GPIO_Init+0x2dc>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	43da      	mvns	r2, r3
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	035b      	lsls	r3, r3, #13
 800274e:	4013      	ands	r3, r2
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800275a:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <HAL_GPIO_Init+0x2dc>)
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002760:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <HAL_GPIO_Init+0x2dc>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	43da      	mvns	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685a      	ldr	r2, [r3, #4]
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	039b      	lsls	r3, r3, #14
 8002778:	4013      	ands	r3, r2
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002784:	4b22      	ldr	r3, [pc, #136]	; (8002810 <HAL_GPIO_Init+0x2dc>)
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800278a:	4b21      	ldr	r3, [pc, #132]	; (8002810 <HAL_GPIO_Init+0x2dc>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	43da      	mvns	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	029b      	lsls	r3, r3, #10
 80027a2:	4013      	ands	r3, r2
 80027a4:	d003      	beq.n	80027ae <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027ae:	4b18      	ldr	r3, [pc, #96]	; (8002810 <HAL_GPIO_Init+0x2dc>)
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80027b4:	4b16      	ldr	r3, [pc, #88]	; (8002810 <HAL_GPIO_Init+0x2dc>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	43da      	mvns	r2, r3
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	025b      	lsls	r3, r3, #9
 80027cc:	4013      	ands	r3, r2
 80027ce:	d003      	beq.n	80027d8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027d8:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <HAL_GPIO_Init+0x2dc>)
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	3301      	adds	r3, #1
 80027e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	40da      	lsrs	r2, r3
 80027ec:	1e13      	subs	r3, r2, #0
 80027ee:	d000      	beq.n	80027f2 <HAL_GPIO_Init+0x2be>
 80027f0:	e6a8      	b.n	8002544 <HAL_GPIO_Init+0x10>
  } 
}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	46c0      	nop			; (mov r8, r8)
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b006      	add	sp, #24
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000
 8002800:	40010000 	.word	0x40010000
 8002804:	48000400 	.word	0x48000400
 8002808:	48000800 	.word	0x48000800
 800280c:	48000c00 	.word	0x48000c00
 8002810:	40010400 	.word	0x40010400

08002814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	000a      	movs	r2, r1
 800281e:	1cbb      	adds	r3, r7, #2
 8002820:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	1cba      	adds	r2, r7, #2
 8002828:	8812      	ldrh	r2, [r2, #0]
 800282a:	4013      	ands	r3, r2
 800282c:	d004      	beq.n	8002838 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800282e:	230f      	movs	r3, #15
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
 8002836:	e003      	b.n	8002840 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002838:	230f      	movs	r3, #15
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002840:	230f      	movs	r3, #15
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	781b      	ldrb	r3, [r3, #0]
  }
 8002846:	0018      	movs	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	b004      	add	sp, #16
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	0008      	movs	r0, r1
 8002858:	0011      	movs	r1, r2
 800285a:	1cbb      	adds	r3, r7, #2
 800285c:	1c02      	adds	r2, r0, #0
 800285e:	801a      	strh	r2, [r3, #0]
 8002860:	1c7b      	adds	r3, r7, #1
 8002862:	1c0a      	adds	r2, r1, #0
 8002864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002866:	1c7b      	adds	r3, r7, #1
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d004      	beq.n	8002878 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800286e:	1cbb      	adds	r3, r7, #2
 8002870:	881a      	ldrh	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002876:	e003      	b.n	8002880 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002878:	1cbb      	adds	r3, r7, #2
 800287a:	881a      	ldrh	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e082      	b.n	80029a0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2241      	movs	r2, #65	; 0x41
 800289e:	5c9b      	ldrb	r3, [r3, r2]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2240      	movs	r2, #64	; 0x40
 80028aa:	2100      	movs	r1, #0
 80028ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f7fe fd73 	bl	800139c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2241      	movs	r2, #65	; 0x41
 80028ba:	2124      	movs	r1, #36	; 0x24
 80028bc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2101      	movs	r1, #1
 80028ca:	438a      	bics	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685a      	ldr	r2, [r3, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4934      	ldr	r1, [pc, #208]	; (80029a8 <HAL_I2C_Init+0x120>)
 80028d8:	400a      	ands	r2, r1
 80028da:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4931      	ldr	r1, [pc, #196]	; (80029ac <HAL_I2C_Init+0x124>)
 80028e8:	400a      	ands	r2, r1
 80028ea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d108      	bne.n	8002906 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2180      	movs	r1, #128	; 0x80
 80028fe:	0209      	lsls	r1, r1, #8
 8002900:	430a      	orrs	r2, r1
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	e007      	b.n	8002916 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2184      	movs	r1, #132	; 0x84
 8002910:	0209      	lsls	r1, r1, #8
 8002912:	430a      	orrs	r2, r1
 8002914:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d104      	bne.n	8002928 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	491f      	ldr	r1, [pc, #124]	; (80029b0 <HAL_I2C_Init+0x128>)
 8002934:	430a      	orrs	r2, r1
 8002936:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	491a      	ldr	r1, [pc, #104]	; (80029ac <HAL_I2C_Init+0x124>)
 8002944:	400a      	ands	r2, r1
 8002946:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	431a      	orrs	r2, r3
 8002952:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69d9      	ldr	r1, [r3, #28]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1a      	ldr	r2, [r3, #32]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2101      	movs	r1, #1
 800297e:	430a      	orrs	r2, r1
 8002980:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2241      	movs	r2, #65	; 0x41
 800298c:	2120      	movs	r1, #32
 800298e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2242      	movs	r2, #66	; 0x42
 800299a:	2100      	movs	r1, #0
 800299c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b002      	add	sp, #8
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	f0ffffff 	.word	0xf0ffffff
 80029ac:	ffff7fff 	.word	0xffff7fff
 80029b0:	02008000 	.word	0x02008000

080029b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2241      	movs	r2, #65	; 0x41
 80029c2:	5c9b      	ldrb	r3, [r3, r2]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b20      	cmp	r3, #32
 80029c8:	d138      	bne.n	8002a3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2240      	movs	r2, #64	; 0x40
 80029ce:	5c9b      	ldrb	r3, [r3, r2]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e032      	b.n	8002a3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2240      	movs	r2, #64	; 0x40
 80029dc:	2101      	movs	r1, #1
 80029de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2241      	movs	r2, #65	; 0x41
 80029e4:	2124      	movs	r1, #36	; 0x24
 80029e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2101      	movs	r1, #1
 80029f4:	438a      	bics	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4911      	ldr	r1, [pc, #68]	; (8002a48 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002a04:	400a      	ands	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6819      	ldr	r1, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2101      	movs	r1, #1
 8002a24:	430a      	orrs	r2, r1
 8002a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2241      	movs	r2, #65	; 0x41
 8002a2c:	2120      	movs	r1, #32
 8002a2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2240      	movs	r2, #64	; 0x40
 8002a34:	2100      	movs	r1, #0
 8002a36:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e000      	b.n	8002a3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
  }
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b002      	add	sp, #8
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	ffffefff 	.word	0xffffefff

08002a4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2241      	movs	r2, #65	; 0x41
 8002a5a:	5c9b      	ldrb	r3, [r3, r2]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d139      	bne.n	8002ad6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2240      	movs	r2, #64	; 0x40
 8002a66:	5c9b      	ldrb	r3, [r3, r2]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e033      	b.n	8002ad8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2240      	movs	r2, #64	; 0x40
 8002a74:	2101      	movs	r1, #1
 8002a76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2241      	movs	r2, #65	; 0x41
 8002a7c:	2124      	movs	r1, #36	; 0x24
 8002a7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	438a      	bics	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4a11      	ldr	r2, [pc, #68]	; (8002ae0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	021b      	lsls	r3, r3, #8
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2101      	movs	r1, #1
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2241      	movs	r2, #65	; 0x41
 8002ac6:	2120      	movs	r1, #32
 8002ac8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2240      	movs	r2, #64	; 0x40
 8002ace:	2100      	movs	r1, #0
 8002ad0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ad6:	2302      	movs	r3, #2
  }
}
 8002ad8:	0018      	movs	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b004      	add	sp, #16
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	fffff0ff 	.word	0xfffff0ff

08002ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e301      	b.n	80030fa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2201      	movs	r2, #1
 8002afc:	4013      	ands	r3, r2
 8002afe:	d100      	bne.n	8002b02 <HAL_RCC_OscConfig+0x1e>
 8002b00:	e08d      	b.n	8002c1e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b02:	4bc3      	ldr	r3, [pc, #780]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	220c      	movs	r2, #12
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d00e      	beq.n	8002b2c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b0e:	4bc0      	ldr	r3, [pc, #768]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	220c      	movs	r2, #12
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d116      	bne.n	8002b48 <HAL_RCC_OscConfig+0x64>
 8002b1a:	4bbd      	ldr	r3, [pc, #756]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	025b      	lsls	r3, r3, #9
 8002b22:	401a      	ands	r2, r3
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	025b      	lsls	r3, r3, #9
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d10d      	bne.n	8002b48 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2c:	4bb8      	ldr	r3, [pc, #736]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	029b      	lsls	r3, r3, #10
 8002b34:	4013      	ands	r3, r2
 8002b36:	d100      	bne.n	8002b3a <HAL_RCC_OscConfig+0x56>
 8002b38:	e070      	b.n	8002c1c <HAL_RCC_OscConfig+0x138>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d000      	beq.n	8002b44 <HAL_RCC_OscConfig+0x60>
 8002b42:	e06b      	b.n	8002c1c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e2d8      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_OscConfig+0x7c>
 8002b50:	4baf      	ldr	r3, [pc, #700]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4bae      	ldr	r3, [pc, #696]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002b56:	2180      	movs	r1, #128	; 0x80
 8002b58:	0249      	lsls	r1, r1, #9
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e02f      	b.n	8002bc0 <HAL_RCC_OscConfig+0xdc>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10c      	bne.n	8002b82 <HAL_RCC_OscConfig+0x9e>
 8002b68:	4ba9      	ldr	r3, [pc, #676]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4ba8      	ldr	r3, [pc, #672]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002b6e:	49a9      	ldr	r1, [pc, #676]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002b70:	400a      	ands	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	4ba6      	ldr	r3, [pc, #664]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4ba5      	ldr	r3, [pc, #660]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002b7a:	49a7      	ldr	r1, [pc, #668]	; (8002e18 <HAL_RCC_OscConfig+0x334>)
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e01e      	b.n	8002bc0 <HAL_RCC_OscConfig+0xdc>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d10e      	bne.n	8002ba8 <HAL_RCC_OscConfig+0xc4>
 8002b8a:	4ba1      	ldr	r3, [pc, #644]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4ba0      	ldr	r3, [pc, #640]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	02c9      	lsls	r1, r1, #11
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	4b9d      	ldr	r3, [pc, #628]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4b9c      	ldr	r3, [pc, #624]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002b9e:	2180      	movs	r1, #128	; 0x80
 8002ba0:	0249      	lsls	r1, r1, #9
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCC_OscConfig+0xdc>
 8002ba8:	4b99      	ldr	r3, [pc, #612]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b98      	ldr	r3, [pc, #608]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002bae:	4999      	ldr	r1, [pc, #612]	; (8002e14 <HAL_RCC_OscConfig+0x330>)
 8002bb0:	400a      	ands	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	4b96      	ldr	r3, [pc, #600]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b95      	ldr	r3, [pc, #596]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002bba:	4997      	ldr	r1, [pc, #604]	; (8002e18 <HAL_RCC_OscConfig+0x334>)
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d014      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fdb4 	bl	8001734 <HAL_GetTick>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd2:	f7fe fdaf 	bl	8001734 <HAL_GetTick>
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b64      	cmp	r3, #100	; 0x64
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e28a      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be4:	4b8a      	ldr	r3, [pc, #552]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	029b      	lsls	r3, r3, #10
 8002bec:	4013      	ands	r3, r2
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0xee>
 8002bf0:	e015      	b.n	8002c1e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fd9f 	bl	8001734 <HAL_GetTick>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe fd9a 	bl	8001734 <HAL_GetTick>
 8002c00:	0002      	movs	r2, r0
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	; 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e275      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0e:	4b80      	ldr	r3, [pc, #512]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	029b      	lsls	r3, r3, #10
 8002c16:	4013      	ands	r3, r2
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x118>
 8002c1a:	e000      	b.n	8002c1e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2202      	movs	r2, #2
 8002c24:	4013      	ands	r3, r2
 8002c26:	d100      	bne.n	8002c2a <HAL_RCC_OscConfig+0x146>
 8002c28:	e069      	b.n	8002cfe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c2a:	4b79      	ldr	r3, [pc, #484]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	220c      	movs	r2, #12
 8002c30:	4013      	ands	r3, r2
 8002c32:	d00b      	beq.n	8002c4c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c34:	4b76      	ldr	r3, [pc, #472]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	220c      	movs	r2, #12
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d11c      	bne.n	8002c7a <HAL_RCC_OscConfig+0x196>
 8002c40:	4b73      	ldr	r3, [pc, #460]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	025b      	lsls	r3, r3, #9
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d116      	bne.n	8002c7a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4c:	4b70      	ldr	r3, [pc, #448]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2202      	movs	r2, #2
 8002c52:	4013      	ands	r3, r2
 8002c54:	d005      	beq.n	8002c62 <HAL_RCC_OscConfig+0x17e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e24b      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	4b6b      	ldr	r3, [pc, #428]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	22f8      	movs	r2, #248	; 0xf8
 8002c68:	4393      	bics	r3, r2
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	00da      	lsls	r2, r3, #3
 8002c72:	4b67      	ldr	r3, [pc, #412]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c78:	e041      	b.n	8002cfe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d024      	beq.n	8002ccc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c82:	4b63      	ldr	r3, [pc, #396]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	4b62      	ldr	r3, [pc, #392]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002c88:	2101      	movs	r1, #1
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fd51 	bl	8001734 <HAL_GetTick>
 8002c92:	0003      	movs	r3, r0
 8002c94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c98:	f7fe fd4c 	bl	8001734 <HAL_GetTick>
 8002c9c:	0002      	movs	r2, r0
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e227      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002caa:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d0f1      	beq.n	8002c98 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	4b56      	ldr	r3, [pc, #344]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	22f8      	movs	r2, #248	; 0xf8
 8002cba:	4393      	bics	r3, r2
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00da      	lsls	r2, r3, #3
 8002cc4:	4b52      	ldr	r3, [pc, #328]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	e018      	b.n	8002cfe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ccc:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4b4f      	ldr	r3, [pc, #316]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fd2c 	bl	8001734 <HAL_GetTick>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce2:	f7fe fd27 	bl	8001734 <HAL_GetTick>
 8002ce6:	0002      	movs	r2, r0
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e202      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf4:	4b46      	ldr	r3, [pc, #280]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	d1f1      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2208      	movs	r2, #8
 8002d04:	4013      	ands	r3, r2
 8002d06:	d036      	beq.n	8002d76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d019      	beq.n	8002d44 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d10:	4b3f      	ldr	r3, [pc, #252]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d14:	4b3e      	ldr	r3, [pc, #248]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002d16:	2101      	movs	r1, #1
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d1c:	f7fe fd0a 	bl	8001734 <HAL_GetTick>
 8002d20:	0003      	movs	r3, r0
 8002d22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d26:	f7fe fd05 	bl	8001734 <HAL_GetTick>
 8002d2a:	0002      	movs	r2, r0
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e1e0      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d38:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d0f1      	beq.n	8002d26 <HAL_RCC_OscConfig+0x242>
 8002d42:	e018      	b.n	8002d76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d44:	4b32      	ldr	r3, [pc, #200]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d48:	4b31      	ldr	r3, [pc, #196]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	438a      	bics	r2, r1
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d50:	f7fe fcf0 	bl	8001734 <HAL_GetTick>
 8002d54:	0003      	movs	r3, r0
 8002d56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d5a:	f7fe fceb 	bl	8001734 <HAL_GetTick>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e1c6      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6c:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2202      	movs	r2, #2
 8002d72:	4013      	ands	r3, r2
 8002d74:	d1f1      	bne.n	8002d5a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d100      	bne.n	8002d82 <HAL_RCC_OscConfig+0x29e>
 8002d80:	e0b4      	b.n	8002eec <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d82:	201f      	movs	r0, #31
 8002d84:	183b      	adds	r3, r7, r0
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d8a:	4b21      	ldr	r3, [pc, #132]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	055b      	lsls	r3, r3, #21
 8002d92:	4013      	ands	r3, r2
 8002d94:	d110      	bne.n	8002db8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d96:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	0549      	lsls	r1, r1, #21
 8002da0:	430a      	orrs	r2, r1
 8002da2:	61da      	str	r2, [r3, #28]
 8002da4:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002da6:	69da      	ldr	r2, [r3, #28]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	055b      	lsls	r3, r3, #21
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002db2:	183b      	adds	r3, r7, r0
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db8:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <HAL_RCC_OscConfig+0x338>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d11a      	bne.n	8002dfa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dc4:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <HAL_RCC_OscConfig+0x338>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <HAL_RCC_OscConfig+0x338>)
 8002dca:	2180      	movs	r1, #128	; 0x80
 8002dcc:	0049      	lsls	r1, r1, #1
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fcaf 	bl	8001734 <HAL_GetTick>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ddc:	f7fe fcaa 	bl	8001734 <HAL_GetTick>
 8002de0:	0002      	movs	r2, r0
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e185      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_RCC_OscConfig+0x338>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4013      	ands	r3, r2
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d10e      	bne.n	8002e20 <HAL_RCC_OscConfig+0x33c>
 8002e02:	4b03      	ldr	r3, [pc, #12]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002e04:	6a1a      	ldr	r2, [r3, #32]
 8002e06:	4b02      	ldr	r3, [pc, #8]	; (8002e10 <HAL_RCC_OscConfig+0x32c>)
 8002e08:	2101      	movs	r1, #1
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	621a      	str	r2, [r3, #32]
 8002e0e:	e035      	b.n	8002e7c <HAL_RCC_OscConfig+0x398>
 8002e10:	40021000 	.word	0x40021000
 8002e14:	fffeffff 	.word	0xfffeffff
 8002e18:	fffbffff 	.word	0xfffbffff
 8002e1c:	40007000 	.word	0x40007000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10c      	bne.n	8002e42 <HAL_RCC_OscConfig+0x35e>
 8002e28:	4bb6      	ldr	r3, [pc, #728]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002e2a:	6a1a      	ldr	r2, [r3, #32]
 8002e2c:	4bb5      	ldr	r3, [pc, #724]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002e2e:	2101      	movs	r1, #1
 8002e30:	438a      	bics	r2, r1
 8002e32:	621a      	str	r2, [r3, #32]
 8002e34:	4bb3      	ldr	r3, [pc, #716]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002e36:	6a1a      	ldr	r2, [r3, #32]
 8002e38:	4bb2      	ldr	r3, [pc, #712]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002e3a:	2104      	movs	r1, #4
 8002e3c:	438a      	bics	r2, r1
 8002e3e:	621a      	str	r2, [r3, #32]
 8002e40:	e01c      	b.n	8002e7c <HAL_RCC_OscConfig+0x398>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b05      	cmp	r3, #5
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x380>
 8002e4a:	4bae      	ldr	r3, [pc, #696]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002e4c:	6a1a      	ldr	r2, [r3, #32]
 8002e4e:	4bad      	ldr	r3, [pc, #692]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002e50:	2104      	movs	r1, #4
 8002e52:	430a      	orrs	r2, r1
 8002e54:	621a      	str	r2, [r3, #32]
 8002e56:	4bab      	ldr	r3, [pc, #684]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002e58:	6a1a      	ldr	r2, [r3, #32]
 8002e5a:	4baa      	ldr	r3, [pc, #680]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	621a      	str	r2, [r3, #32]
 8002e62:	e00b      	b.n	8002e7c <HAL_RCC_OscConfig+0x398>
 8002e64:	4ba7      	ldr	r3, [pc, #668]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002e66:	6a1a      	ldr	r2, [r3, #32]
 8002e68:	4ba6      	ldr	r3, [pc, #664]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	438a      	bics	r2, r1
 8002e6e:	621a      	str	r2, [r3, #32]
 8002e70:	4ba4      	ldr	r3, [pc, #656]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002e72:	6a1a      	ldr	r2, [r3, #32]
 8002e74:	4ba3      	ldr	r3, [pc, #652]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002e76:	2104      	movs	r1, #4
 8002e78:	438a      	bics	r2, r1
 8002e7a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d014      	beq.n	8002eae <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e84:	f7fe fc56 	bl	8001734 <HAL_GetTick>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8c:	e009      	b.n	8002ea2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e8e:	f7fe fc51 	bl	8001734 <HAL_GetTick>
 8002e92:	0002      	movs	r2, r0
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	4a9b      	ldr	r2, [pc, #620]	; (8003108 <HAL_RCC_OscConfig+0x624>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e12b      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea2:	4b98      	ldr	r3, [pc, #608]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x3aa>
 8002eac:	e013      	b.n	8002ed6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fe fc41 	bl	8001734 <HAL_GetTick>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb6:	e009      	b.n	8002ecc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb8:	f7fe fc3c 	bl	8001734 <HAL_GetTick>
 8002ebc:	0002      	movs	r2, r0
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	4a91      	ldr	r2, [pc, #580]	; (8003108 <HAL_RCC_OscConfig+0x624>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e116      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ecc:	4b8d      	ldr	r3, [pc, #564]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ed6:	231f      	movs	r3, #31
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d105      	bne.n	8002eec <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee0:	4b88      	ldr	r3, [pc, #544]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002ee2:	69da      	ldr	r2, [r3, #28]
 8002ee4:	4b87      	ldr	r3, [pc, #540]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002ee6:	4989      	ldr	r1, [pc, #548]	; (800310c <HAL_RCC_OscConfig+0x628>)
 8002ee8:	400a      	ands	r2, r1
 8002eea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d063      	beq.n	8002fbe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d12a      	bne.n	8002f54 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002efe:	4b81      	ldr	r3, [pc, #516]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f02:	4b80      	ldr	r3, [pc, #512]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002f04:	2104      	movs	r1, #4
 8002f06:	430a      	orrs	r2, r1
 8002f08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002f0a:	4b7e      	ldr	r3, [pc, #504]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f0e:	4b7d      	ldr	r3, [pc, #500]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002f10:	2101      	movs	r1, #1
 8002f12:	430a      	orrs	r2, r1
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7fe fc0d 	bl	8001734 <HAL_GetTick>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f20:	f7fe fc08 	bl	8001734 <HAL_GetTick>
 8002f24:	0002      	movs	r2, r0
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e0e3      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002f32:	4b74      	ldr	r3, [pc, #464]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f36:	2202      	movs	r2, #2
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d0f1      	beq.n	8002f20 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f3c:	4b71      	ldr	r3, [pc, #452]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f40:	22f8      	movs	r2, #248	; 0xf8
 8002f42:	4393      	bics	r3, r2
 8002f44:	0019      	movs	r1, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	00da      	lsls	r2, r3, #3
 8002f4c:	4b6d      	ldr	r3, [pc, #436]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	635a      	str	r2, [r3, #52]	; 0x34
 8002f52:	e034      	b.n	8002fbe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	3305      	adds	r3, #5
 8002f5a:	d111      	bne.n	8002f80 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002f5c:	4b69      	ldr	r3, [pc, #420]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f60:	4b68      	ldr	r3, [pc, #416]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002f62:	2104      	movs	r1, #4
 8002f64:	438a      	bics	r2, r1
 8002f66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f68:	4b66      	ldr	r3, [pc, #408]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6c:	22f8      	movs	r2, #248	; 0xf8
 8002f6e:	4393      	bics	r3, r2
 8002f70:	0019      	movs	r1, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	00da      	lsls	r2, r3, #3
 8002f78:	4b62      	ldr	r3, [pc, #392]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f7e:	e01e      	b.n	8002fbe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f80:	4b60      	ldr	r3, [pc, #384]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f84:	4b5f      	ldr	r3, [pc, #380]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002f86:	2104      	movs	r1, #4
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002f8c:	4b5d      	ldr	r3, [pc, #372]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f90:	4b5c      	ldr	r3, [pc, #368]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002f92:	2101      	movs	r1, #1
 8002f94:	438a      	bics	r2, r1
 8002f96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f98:	f7fe fbcc 	bl	8001734 <HAL_GetTick>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002fa2:	f7fe fbc7 	bl	8001734 <HAL_GetTick>
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0a2      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002fb4:	4b53      	ldr	r3, [pc, #332]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb8:	2202      	movs	r2, #2
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d1f1      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d100      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x4e4>
 8002fc6:	e097      	b.n	80030f8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fc8:	4b4e      	ldr	r3, [pc, #312]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	220c      	movs	r2, #12
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d100      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x4f2>
 8002fd4:	e06b      	b.n	80030ae <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d14c      	bne.n	8003078 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	4b49      	ldr	r3, [pc, #292]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4b48      	ldr	r3, [pc, #288]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8002fe4:	494a      	ldr	r1, [pc, #296]	; (8003110 <HAL_RCC_OscConfig+0x62c>)
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fe fba3 	bl	8001734 <HAL_GetTick>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff4:	f7fe fb9e 	bl	8001734 <HAL_GetTick>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e079      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003006:	4b3f      	ldr	r3, [pc, #252]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	2380      	movs	r3, #128	; 0x80
 800300c:	049b      	lsls	r3, r3, #18
 800300e:	4013      	ands	r3, r2
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003012:	4b3c      	ldr	r3, [pc, #240]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	220f      	movs	r2, #15
 8003018:	4393      	bics	r3, r2
 800301a:	0019      	movs	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003020:	4b38      	ldr	r3, [pc, #224]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8003022:	430a      	orrs	r2, r1
 8003024:	62da      	str	r2, [r3, #44]	; 0x2c
 8003026:	4b37      	ldr	r3, [pc, #220]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4a3a      	ldr	r2, [pc, #232]	; (8003114 <HAL_RCC_OscConfig+0x630>)
 800302c:	4013      	ands	r3, r2
 800302e:	0019      	movs	r1, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	431a      	orrs	r2, r3
 800303a:	4b32      	ldr	r3, [pc, #200]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 800303c:	430a      	orrs	r2, r1
 800303e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003040:	4b30      	ldr	r3, [pc, #192]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4b2f      	ldr	r3, [pc, #188]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	0449      	lsls	r1, r1, #17
 800304a:	430a      	orrs	r2, r1
 800304c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fe fb71 	bl	8001734 <HAL_GetTick>
 8003052:	0003      	movs	r3, r0
 8003054:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003058:	f7fe fb6c 	bl	8001734 <HAL_GetTick>
 800305c:	0002      	movs	r2, r0
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e047      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800306a:	4b26      	ldr	r3, [pc, #152]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	2380      	movs	r3, #128	; 0x80
 8003070:	049b      	lsls	r3, r3, #18
 8003072:	4013      	ands	r3, r2
 8003074:	d0f0      	beq.n	8003058 <HAL_RCC_OscConfig+0x574>
 8003076:	e03f      	b.n	80030f8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003078:	4b22      	ldr	r3, [pc, #136]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b21      	ldr	r3, [pc, #132]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 800307e:	4924      	ldr	r1, [pc, #144]	; (8003110 <HAL_RCC_OscConfig+0x62c>)
 8003080:	400a      	ands	r2, r1
 8003082:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe fb56 	bl	8001734 <HAL_GetTick>
 8003088:	0003      	movs	r3, r0
 800308a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308e:	f7fe fb51 	bl	8001734 <HAL_GetTick>
 8003092:	0002      	movs	r2, r0
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e02c      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a0:	4b18      	ldr	r3, [pc, #96]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	049b      	lsls	r3, r3, #18
 80030a8:	4013      	ands	r3, r2
 80030aa:	d1f0      	bne.n	800308e <HAL_RCC_OscConfig+0x5aa>
 80030ac:	e024      	b.n	80030f8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e01f      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80030c0:	4b10      	ldr	r3, [pc, #64]	; (8003104 <HAL_RCC_OscConfig+0x620>)
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	025b      	lsls	r3, r3, #9
 80030cc:	401a      	ands	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d10e      	bne.n	80030f4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	220f      	movs	r2, #15
 80030da:	401a      	ands	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d107      	bne.n	80030f4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	23f0      	movs	r3, #240	; 0xf0
 80030e8:	039b      	lsls	r3, r3, #14
 80030ea:	401a      	ands	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	0018      	movs	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b008      	add	sp, #32
 8003100:	bd80      	pop	{r7, pc}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	40021000 	.word	0x40021000
 8003108:	00001388 	.word	0x00001388
 800310c:	efffffff 	.word	0xefffffff
 8003110:	feffffff 	.word	0xfeffffff
 8003114:	ffc2ffff 	.word	0xffc2ffff

08003118 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0b3      	b.n	8003294 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800312c:	4b5b      	ldr	r3, [pc, #364]	; (800329c <HAL_RCC_ClockConfig+0x184>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2201      	movs	r2, #1
 8003132:	4013      	ands	r3, r2
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d911      	bls.n	800315e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b58      	ldr	r3, [pc, #352]	; (800329c <HAL_RCC_ClockConfig+0x184>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2201      	movs	r2, #1
 8003140:	4393      	bics	r3, r2
 8003142:	0019      	movs	r1, r3
 8003144:	4b55      	ldr	r3, [pc, #340]	; (800329c <HAL_RCC_ClockConfig+0x184>)
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800314c:	4b53      	ldr	r3, [pc, #332]	; (800329c <HAL_RCC_ClockConfig+0x184>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2201      	movs	r2, #1
 8003152:	4013      	ands	r3, r2
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d001      	beq.n	800315e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e09a      	b.n	8003294 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2202      	movs	r2, #2
 8003164:	4013      	ands	r3, r2
 8003166:	d015      	beq.n	8003194 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2204      	movs	r2, #4
 800316e:	4013      	ands	r3, r2
 8003170:	d006      	beq.n	8003180 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003172:	4b4b      	ldr	r3, [pc, #300]	; (80032a0 <HAL_RCC_ClockConfig+0x188>)
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	4b4a      	ldr	r3, [pc, #296]	; (80032a0 <HAL_RCC_ClockConfig+0x188>)
 8003178:	21e0      	movs	r1, #224	; 0xe0
 800317a:	00c9      	lsls	r1, r1, #3
 800317c:	430a      	orrs	r2, r1
 800317e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003180:	4b47      	ldr	r3, [pc, #284]	; (80032a0 <HAL_RCC_ClockConfig+0x188>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	22f0      	movs	r2, #240	; 0xf0
 8003186:	4393      	bics	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	4b44      	ldr	r3, [pc, #272]	; (80032a0 <HAL_RCC_ClockConfig+0x188>)
 8003190:	430a      	orrs	r2, r1
 8003192:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2201      	movs	r2, #1
 800319a:	4013      	ands	r3, r2
 800319c:	d040      	beq.n	8003220 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d107      	bne.n	80031b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a6:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <HAL_RCC_ClockConfig+0x188>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	029b      	lsls	r3, r3, #10
 80031ae:	4013      	ands	r3, r2
 80031b0:	d114      	bne.n	80031dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e06e      	b.n	8003294 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d107      	bne.n	80031ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031be:	4b38      	ldr	r3, [pc, #224]	; (80032a0 <HAL_RCC_ClockConfig+0x188>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	049b      	lsls	r3, r3, #18
 80031c6:	4013      	ands	r3, r2
 80031c8:	d108      	bne.n	80031dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e062      	b.n	8003294 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ce:	4b34      	ldr	r3, [pc, #208]	; (80032a0 <HAL_RCC_ClockConfig+0x188>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2202      	movs	r2, #2
 80031d4:	4013      	ands	r3, r2
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e05b      	b.n	8003294 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <HAL_RCC_ClockConfig+0x188>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2203      	movs	r2, #3
 80031e2:	4393      	bics	r3, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <HAL_RCC_ClockConfig+0x188>)
 80031ec:	430a      	orrs	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f0:	f7fe faa0 	bl	8001734 <HAL_GetTick>
 80031f4:	0003      	movs	r3, r0
 80031f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f8:	e009      	b.n	800320e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fa:	f7fe fa9b 	bl	8001734 <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	4a27      	ldr	r2, [pc, #156]	; (80032a4 <HAL_RCC_ClockConfig+0x18c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e042      	b.n	8003294 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_RCC_ClockConfig+0x188>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	220c      	movs	r2, #12
 8003214:	401a      	ands	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	429a      	cmp	r2, r3
 800321e:	d1ec      	bne.n	80031fa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003220:	4b1e      	ldr	r3, [pc, #120]	; (800329c <HAL_RCC_ClockConfig+0x184>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2201      	movs	r2, #1
 8003226:	4013      	ands	r3, r2
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d211      	bcs.n	8003252 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_RCC_ClockConfig+0x184>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2201      	movs	r2, #1
 8003234:	4393      	bics	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	4b18      	ldr	r3, [pc, #96]	; (800329c <HAL_RCC_ClockConfig+0x184>)
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_RCC_ClockConfig+0x184>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2201      	movs	r2, #1
 8003246:	4013      	ands	r3, r2
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d001      	beq.n	8003252 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e020      	b.n	8003294 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2204      	movs	r2, #4
 8003258:	4013      	ands	r3, r2
 800325a:	d009      	beq.n	8003270 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800325c:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_RCC_ClockConfig+0x188>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4a11      	ldr	r2, [pc, #68]	; (80032a8 <HAL_RCC_ClockConfig+0x190>)
 8003262:	4013      	ands	r3, r2
 8003264:	0019      	movs	r1, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <HAL_RCC_ClockConfig+0x188>)
 800326c:	430a      	orrs	r2, r1
 800326e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003270:	f000 f820 	bl	80032b4 <HAL_RCC_GetSysClockFreq>
 8003274:	0001      	movs	r1, r0
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <HAL_RCC_ClockConfig+0x188>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	220f      	movs	r2, #15
 800327e:	4013      	ands	r3, r2
 8003280:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <HAL_RCC_ClockConfig+0x194>)
 8003282:	5cd3      	ldrb	r3, [r2, r3]
 8003284:	000a      	movs	r2, r1
 8003286:	40da      	lsrs	r2, r3
 8003288:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_RCC_ClockConfig+0x198>)
 800328a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800328c:	2003      	movs	r0, #3
 800328e:	f7fe fa0b 	bl	80016a8 <HAL_InitTick>
  
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b004      	add	sp, #16
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40022000 	.word	0x40022000
 80032a0:	40021000 	.word	0x40021000
 80032a4:	00001388 	.word	0x00001388
 80032a8:	fffff8ff 	.word	0xfffff8ff
 80032ac:	08004570 	.word	0x08004570
 80032b0:	20000000 	.word	0x20000000

080032b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	220c      	movs	r2, #12
 80032d8:	4013      	ands	r3, r2
 80032da:	2b04      	cmp	r3, #4
 80032dc:	d002      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x30>
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d003      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0x36>
 80032e2:	e02c      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032e4:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032e6:	613b      	str	r3, [r7, #16]
      break;
 80032e8:	e02c      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	0c9b      	lsrs	r3, r3, #18
 80032ee:	220f      	movs	r2, #15
 80032f0:	4013      	ands	r3, r2
 80032f2:	4a19      	ldr	r2, [pc, #100]	; (8003358 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032f4:	5cd3      	ldrb	r3, [r2, r3]
 80032f6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80032f8:	4b15      	ldr	r3, [pc, #84]	; (8003350 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fc:	220f      	movs	r2, #15
 80032fe:	4013      	ands	r3, r2
 8003300:	4a16      	ldr	r2, [pc, #88]	; (800335c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003302:	5cd3      	ldrb	r3, [r2, r3]
 8003304:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	025b      	lsls	r3, r3, #9
 800330c:	4013      	ands	r3, r2
 800330e:	d009      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	4810      	ldr	r0, [pc, #64]	; (8003354 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003314:	f7fc fef8 	bl	8000108 <__udivsi3>
 8003318:	0003      	movs	r3, r0
 800331a:	001a      	movs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4353      	muls	r3, r2
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	e009      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	000a      	movs	r2, r1
 8003328:	0152      	lsls	r2, r2, #5
 800332a:	1a52      	subs	r2, r2, r1
 800332c:	0193      	lsls	r3, r2, #6
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	185b      	adds	r3, r3, r1
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	613b      	str	r3, [r7, #16]
      break;
 800333c:	e002      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003340:	613b      	str	r3, [r7, #16]
      break;
 8003342:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003344:	693b      	ldr	r3, [r7, #16]
}
 8003346:	0018      	movs	r0, r3
 8003348:	46bd      	mov	sp, r7
 800334a:	b006      	add	sp, #24
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	40021000 	.word	0x40021000
 8003354:	007a1200 	.word	0x007a1200
 8003358:	08004580 	.word	0x08004580
 800335c:	08004590 	.word	0x08004590

08003360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	025b      	lsls	r3, r3, #9
 8003378:	4013      	ands	r3, r2
 800337a:	d100      	bne.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800337c:	e08e      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800337e:	2017      	movs	r0, #23
 8003380:	183b      	adds	r3, r7, r0
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003386:	4b57      	ldr	r3, [pc, #348]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003388:	69da      	ldr	r2, [r3, #28]
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	055b      	lsls	r3, r3, #21
 800338e:	4013      	ands	r3, r2
 8003390:	d110      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003392:	4b54      	ldr	r3, [pc, #336]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	0549      	lsls	r1, r1, #21
 800339c:	430a      	orrs	r2, r1
 800339e:	61da      	str	r2, [r3, #28]
 80033a0:	4b50      	ldr	r3, [pc, #320]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	055b      	lsls	r3, r3, #21
 80033a8:	4013      	ands	r3, r2
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ae:	183b      	adds	r3, r7, r0
 80033b0:	2201      	movs	r2, #1
 80033b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4013      	ands	r3, r2
 80033be:	d11a      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c0:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b48      	ldr	r3, [pc, #288]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80033c6:	2180      	movs	r1, #128	; 0x80
 80033c8:	0049      	lsls	r1, r1, #1
 80033ca:	430a      	orrs	r2, r1
 80033cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ce:	f7fe f9b1 	bl	8001734 <HAL_GetTick>
 80033d2:	0003      	movs	r3, r0
 80033d4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d6:	e008      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d8:	f7fe f9ac 	bl	8001734 <HAL_GetTick>
 80033dc:	0002      	movs	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	; 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e077      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	2380      	movs	r3, #128	; 0x80
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	4013      	ands	r3, r2
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033f6:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80033f8:	6a1a      	ldr	r2, [r3, #32]
 80033fa:	23c0      	movs	r3, #192	; 0xc0
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4013      	ands	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d034      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	23c0      	movs	r3, #192	; 0xc0
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4013      	ands	r3, r2
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	429a      	cmp	r2, r3
 8003416:	d02c      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003418:	4b32      	ldr	r3, [pc, #200]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	4a33      	ldr	r2, [pc, #204]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800341e:	4013      	ands	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003422:	4b30      	ldr	r3, [pc, #192]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003424:	6a1a      	ldr	r2, [r3, #32]
 8003426:	4b2f      	ldr	r3, [pc, #188]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003428:	2180      	movs	r1, #128	; 0x80
 800342a:	0249      	lsls	r1, r1, #9
 800342c:	430a      	orrs	r2, r1
 800342e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003430:	4b2c      	ldr	r3, [pc, #176]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003432:	6a1a      	ldr	r2, [r3, #32]
 8003434:	4b2b      	ldr	r3, [pc, #172]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003436:	492e      	ldr	r1, [pc, #184]	; (80034f0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003438:	400a      	ands	r2, r1
 800343a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800343c:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	4013      	ands	r3, r2
 8003448:	d013      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344a:	f7fe f973 	bl	8001734 <HAL_GetTick>
 800344e:	0003      	movs	r3, r0
 8003450:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003452:	e009      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003454:	f7fe f96e 	bl	8001734 <HAL_GetTick>
 8003458:	0002      	movs	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	4a25      	ldr	r2, [pc, #148]	; (80034f4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d901      	bls.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e038      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003468:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	2202      	movs	r2, #2
 800346e:	4013      	ands	r3, r2
 8003470:	d0f0      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003472:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003478:	4013      	ands	r3, r2
 800347a:	0019      	movs	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	4b18      	ldr	r3, [pc, #96]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003482:	430a      	orrs	r2, r1
 8003484:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003486:	2317      	movs	r3, #23
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d105      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003490:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003496:	4918      	ldr	r1, [pc, #96]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003498:	400a      	ands	r2, r1
 800349a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2201      	movs	r2, #1
 80034a2:	4013      	ands	r3, r2
 80034a4:	d009      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	2203      	movs	r2, #3
 80034ac:	4393      	bics	r3, r2
 80034ae:	0019      	movs	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034b6:	430a      	orrs	r2, r1
 80034b8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2220      	movs	r2, #32
 80034c0:	4013      	ands	r3, r2
 80034c2:	d009      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034c4:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	2210      	movs	r2, #16
 80034ca:	4393      	bics	r3, r2
 80034cc:	0019      	movs	r1, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80034d4:	430a      	orrs	r2, r1
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	0018      	movs	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	b006      	add	sp, #24
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40007000 	.word	0x40007000
 80034ec:	fffffcff 	.word	0xfffffcff
 80034f0:	fffeffff 	.word	0xfffeffff
 80034f4:	00001388 	.word	0x00001388
 80034f8:	efffffff 	.word	0xefffffff

080034fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e0a8      	b.n	8003660 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	2b00      	cmp	r3, #0
 8003514:	d109      	bne.n	800352a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	2382      	movs	r3, #130	; 0x82
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	429a      	cmp	r2, r3
 8003520:	d009      	beq.n	8003536 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	61da      	str	r2, [r3, #28]
 8003528:	e005      	b.n	8003536 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	225d      	movs	r2, #93	; 0x5d
 8003540:	5c9b      	ldrb	r3, [r3, r2]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d107      	bne.n	8003558 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	225c      	movs	r2, #92	; 0x5c
 800354c:	2100      	movs	r1, #0
 800354e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	0018      	movs	r0, r3
 8003554:	f7fd ff70 	bl	8001438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	225d      	movs	r2, #93	; 0x5d
 800355c:	2102      	movs	r1, #2
 800355e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2140      	movs	r1, #64	; 0x40
 800356c:	438a      	bics	r2, r1
 800356e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	23e0      	movs	r3, #224	; 0xe0
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	429a      	cmp	r2, r3
 800357a:	d902      	bls.n	8003582 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e002      	b.n	8003588 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003582:	2380      	movs	r3, #128	; 0x80
 8003584:	015b      	lsls	r3, r3, #5
 8003586:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	23f0      	movs	r3, #240	; 0xf0
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	429a      	cmp	r2, r3
 8003592:	d008      	beq.n	80035a6 <HAL_SPI_Init+0xaa>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	23e0      	movs	r3, #224	; 0xe0
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	429a      	cmp	r2, r3
 800359e:	d002      	beq.n	80035a6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	2382      	movs	r3, #130	; 0x82
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	401a      	ands	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6899      	ldr	r1, [r3, #8]
 80035b4:	2384      	movs	r3, #132	; 0x84
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	400b      	ands	r3, r1
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	2102      	movs	r1, #2
 80035c2:	400b      	ands	r3, r1
 80035c4:	431a      	orrs	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	2101      	movs	r1, #1
 80035cc:	400b      	ands	r3, r1
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6999      	ldr	r1, [r3, #24]
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	400b      	ands	r3, r1
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	2138      	movs	r1, #56	; 0x38
 80035e2:	400b      	ands	r3, r1
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	2180      	movs	r1, #128	; 0x80
 80035ec:	400b      	ands	r3, r1
 80035ee:	431a      	orrs	r2, r3
 80035f0:	0011      	movs	r1, r2
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	019b      	lsls	r3, r3, #6
 80035fa:	401a      	ands	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	2204      	movs	r2, #4
 800360c:	401a      	ands	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	2110      	movs	r1, #16
 8003614:	400b      	ands	r3, r1
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361c:	2108      	movs	r1, #8
 800361e:	400b      	ands	r3, r1
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	68d9      	ldr	r1, [r3, #12]
 8003626:	23f0      	movs	r3, #240	; 0xf0
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	400b      	ands	r3, r1
 800362c:	431a      	orrs	r2, r3
 800362e:	0011      	movs	r1, r2
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	2380      	movs	r3, #128	; 0x80
 8003634:	015b      	lsls	r3, r3, #5
 8003636:	401a      	ands	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	69da      	ldr	r2, [r3, #28]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4907      	ldr	r1, [pc, #28]	; (8003668 <HAL_SPI_Init+0x16c>)
 800364c:	400a      	ands	r2, r1
 800364e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	225d      	movs	r2, #93	; 0x5d
 800365a:	2101      	movs	r1, #1
 800365c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b004      	add	sp, #16
 8003666:	bd80      	pop	{r7, pc}
 8003668:	fffff7ff 	.word	0xfffff7ff

0800366c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e042      	b.n	8003704 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	223d      	movs	r2, #61	; 0x3d
 8003682:	5c9b      	ldrb	r3, [r3, r2]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d107      	bne.n	800369a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	223c      	movs	r2, #60	; 0x3c
 800368e:	2100      	movs	r1, #0
 8003690:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	0018      	movs	r0, r3
 8003696:	f7fd ff6b 	bl	8001570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	223d      	movs	r2, #61	; 0x3d
 800369e:	2102      	movs	r1, #2
 80036a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3304      	adds	r3, #4
 80036aa:	0019      	movs	r1, r3
 80036ac:	0010      	movs	r0, r2
 80036ae:	f000 fb13 	bl	8003cd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2246      	movs	r2, #70	; 0x46
 80036b6:	2101      	movs	r1, #1
 80036b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	223e      	movs	r2, #62	; 0x3e
 80036be:	2101      	movs	r1, #1
 80036c0:	5499      	strb	r1, [r3, r2]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	223f      	movs	r2, #63	; 0x3f
 80036c6:	2101      	movs	r1, #1
 80036c8:	5499      	strb	r1, [r3, r2]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2240      	movs	r2, #64	; 0x40
 80036ce:	2101      	movs	r1, #1
 80036d0:	5499      	strb	r1, [r3, r2]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2241      	movs	r2, #65	; 0x41
 80036d6:	2101      	movs	r1, #1
 80036d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2242      	movs	r2, #66	; 0x42
 80036de:	2101      	movs	r1, #1
 80036e0:	5499      	strb	r1, [r3, r2]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2243      	movs	r2, #67	; 0x43
 80036e6:	2101      	movs	r1, #1
 80036e8:	5499      	strb	r1, [r3, r2]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2244      	movs	r2, #68	; 0x44
 80036ee:	2101      	movs	r1, #1
 80036f0:	5499      	strb	r1, [r3, r2]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2245      	movs	r2, #69	; 0x45
 80036f6:	2101      	movs	r1, #1
 80036f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	223d      	movs	r2, #61	; 0x3d
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	0018      	movs	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	b002      	add	sp, #8
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	223d      	movs	r2, #61	; 0x3d
 8003718:	5c9b      	ldrb	r3, [r3, r2]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d001      	beq.n	8003724 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e035      	b.n	8003790 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	223d      	movs	r2, #61	; 0x3d
 8003728:	2102      	movs	r1, #2
 800372a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2101      	movs	r1, #1
 8003738:	430a      	orrs	r2, r1
 800373a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a15      	ldr	r2, [pc, #84]	; (8003798 <HAL_TIM_Base_Start_IT+0x8c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d009      	beq.n	800375a <HAL_TIM_Base_Start_IT+0x4e>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a14      	ldr	r2, [pc, #80]	; (800379c <HAL_TIM_Base_Start_IT+0x90>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d004      	beq.n	800375a <HAL_TIM_Base_Start_IT+0x4e>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <HAL_TIM_Base_Start_IT+0x94>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d111      	bne.n	800377e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2207      	movs	r2, #7
 8003762:	4013      	ands	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b06      	cmp	r3, #6
 800376a:	d010      	beq.n	800378e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2101      	movs	r1, #1
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377c:	e007      	b.n	800378e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2101      	movs	r1, #1
 800378a:	430a      	orrs	r2, r1
 800378c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	b004      	add	sp, #16
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40000400 	.word	0x40000400
 80037a0:	40014000 	.word	0x40014000

080037a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e090      	b.n	80038da <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	223d      	movs	r2, #61	; 0x3d
 80037bc:	5c9b      	ldrb	r3, [r3, r2]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d107      	bne.n	80037d4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	223c      	movs	r2, #60	; 0x3c
 80037c8:	2100      	movs	r1, #0
 80037ca:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	0018      	movs	r0, r3
 80037d0:	f7fd fe80 	bl	80014d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	223d      	movs	r2, #61	; 0x3d
 80037d8:	2102      	movs	r1, #2
 80037da:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	493f      	ldr	r1, [pc, #252]	; (80038e4 <HAL_TIM_Encoder_Init+0x140>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3304      	adds	r3, #4
 80037f4:	0019      	movs	r1, r3
 80037f6:	0010      	movs	r0, r2
 80037f8:	f000 fa6e 	bl	8003cd8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	4a31      	ldr	r2, [pc, #196]	; (80038e8 <HAL_TIM_Encoder_Init+0x144>)
 8003822:	4013      	ands	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	4313      	orrs	r3, r2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4a2c      	ldr	r2, [pc, #176]	; (80038ec <HAL_TIM_Encoder_Init+0x148>)
 800383c:	4013      	ands	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4a2b      	ldr	r2, [pc, #172]	; (80038f0 <HAL_TIM_Encoder_Init+0x14c>)
 8003844:	4013      	ands	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	4313      	orrs	r3, r2
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4313      	orrs	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	011a      	lsls	r2, r3, #4
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	031b      	lsls	r3, r3, #12
 8003866:	4313      	orrs	r3, r2
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2222      	movs	r2, #34	; 0x22
 8003872:	4393      	bics	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2288      	movs	r2, #136	; 0x88
 800387a:	4393      	bics	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	4313      	orrs	r3, r2
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4313      	orrs	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2246      	movs	r2, #70	; 0x46
 80038ac:	2101      	movs	r1, #1
 80038ae:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	223e      	movs	r2, #62	; 0x3e
 80038b4:	2101      	movs	r1, #1
 80038b6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	223f      	movs	r2, #63	; 0x3f
 80038bc:	2101      	movs	r1, #1
 80038be:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2242      	movs	r2, #66	; 0x42
 80038c4:	2101      	movs	r1, #1
 80038c6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2243      	movs	r2, #67	; 0x43
 80038cc:	2101      	movs	r1, #1
 80038ce:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	223d      	movs	r2, #61	; 0x3d
 80038d4:	2101      	movs	r1, #1
 80038d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b006      	add	sp, #24
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	ffffbff8 	.word	0xffffbff8
 80038e8:	fffffcfc 	.word	0xfffffcfc
 80038ec:	fffff3f3 	.word	0xfffff3f3
 80038f0:	ffff0f0f 	.word	0xffff0f0f

080038f4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038f4:	b590      	push	{r4, r7, lr}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80038fe:	200f      	movs	r0, #15
 8003900:	183b      	adds	r3, r7, r0
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	213e      	movs	r1, #62	; 0x3e
 8003906:	5c52      	ldrb	r2, [r2, r1]
 8003908:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800390a:	230e      	movs	r3, #14
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	213f      	movs	r1, #63	; 0x3f
 8003912:	5c52      	ldrb	r2, [r2, r1]
 8003914:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003916:	240d      	movs	r4, #13
 8003918:	193b      	adds	r3, r7, r4
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	2142      	movs	r1, #66	; 0x42
 800391e:	5c52      	ldrb	r2, [r2, r1]
 8003920:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003922:	230c      	movs	r3, #12
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	2143      	movs	r1, #67	; 0x43
 800392a:	5c52      	ldrb	r2, [r2, r1]
 800392c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d112      	bne.n	800395a <HAL_TIM_Encoder_Start_IT+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003934:	183b      	adds	r3, r7, r0
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d103      	bne.n	8003944 <HAL_TIM_Encoder_Start_IT+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800393c:	193b      	adds	r3, r7, r4
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d001      	beq.n	8003948 <HAL_TIM_Encoder_Start_IT+0x54>
    {
      return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e095      	b.n	8003a74 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	223e      	movs	r2, #62	; 0x3e
 800394c:	2102      	movs	r1, #2
 800394e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2242      	movs	r2, #66	; 0x42
 8003954:	2102      	movs	r1, #2
 8003956:	5499      	strb	r1, [r3, r2]
 8003958:	e03d      	b.n	80039d6 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d114      	bne.n	800398a <HAL_TIM_Encoder_Start_IT+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003960:	230e      	movs	r3, #14
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d104      	bne.n	8003974 <HAL_TIM_Encoder_Start_IT+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800396a:	230c      	movs	r3, #12
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d001      	beq.n	8003978 <HAL_TIM_Encoder_Start_IT+0x84>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e07d      	b.n	8003a74 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	223f      	movs	r2, #63	; 0x3f
 800397c:	2102      	movs	r1, #2
 800397e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2243      	movs	r2, #67	; 0x43
 8003984:	2102      	movs	r1, #2
 8003986:	5499      	strb	r1, [r3, r2]
 8003988:	e025      	b.n	80039d6 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800398a:	230f      	movs	r3, #15
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d10e      	bne.n	80039b2 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003994:	230e      	movs	r3, #14
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d109      	bne.n	80039b2 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800399e:	230d      	movs	r3, #13
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d104      	bne.n	80039b2 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80039a8:	230c      	movs	r3, #12
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d001      	beq.n	80039b6 <HAL_TIM_Encoder_Start_IT+0xc2>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e05e      	b.n	8003a74 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	223e      	movs	r2, #62	; 0x3e
 80039ba:	2102      	movs	r1, #2
 80039bc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	223f      	movs	r2, #63	; 0x3f
 80039c2:	2102      	movs	r1, #2
 80039c4:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2242      	movs	r2, #66	; 0x42
 80039ca:	2102      	movs	r1, #2
 80039cc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2243      	movs	r2, #67	; 0x43
 80039d2:	2102      	movs	r1, #2
 80039d4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_TIM_Encoder_Start_IT+0xf0>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d010      	beq.n	8003a04 <HAL_TIM_Encoder_Start_IT+0x110>
 80039e2:	e01f      	b.n	8003a24 <HAL_TIM_Encoder_Start_IT+0x130>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2201      	movs	r2, #1
 80039ea:	2100      	movs	r1, #0
 80039ec:	0018      	movs	r0, r3
 80039ee:	f000 f9e9 	bl	8003dc4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2102      	movs	r1, #2
 80039fe:	430a      	orrs	r2, r1
 8003a00:	60da      	str	r2, [r3, #12]
      break;
 8003a02:	e02e      	b.n	8003a62 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	2104      	movs	r1, #4
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f000 f9d9 	bl	8003dc4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2104      	movs	r1, #4
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	60da      	str	r2, [r3, #12]
      break;
 8003a22:	e01e      	b.n	8003a62 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f000 f9c9 	bl	8003dc4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2201      	movs	r2, #1
 8003a38:	2104      	movs	r1, #4
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f000 f9c2 	bl	8003dc4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2102      	movs	r1, #2
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2104      	movs	r1, #4
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	60da      	str	r2, [r3, #12]
      break;
 8003a60:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b005      	add	sp, #20
 8003a7a:	bd90      	pop	{r4, r7, pc}

08003a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d124      	bne.n	8003adc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d11d      	bne.n	8003adc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	4252      	negs	r2, r2
 8003aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	4013      	ands	r3, r2
 8003aba:	d004      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f000 fcd8 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e007      	b.n	8003ad6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f000 f8ed 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f000 f8f1 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d125      	bne.n	8003b36 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	2204      	movs	r2, #4
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d11e      	bne.n	8003b36 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2205      	movs	r2, #5
 8003afe:	4252      	negs	r2, r2
 8003b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	23c0      	movs	r3, #192	; 0xc0
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4013      	ands	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f000 fcab 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8003b1e:	e007      	b.n	8003b30 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	0018      	movs	r0, r3
 8003b24:	f000 f8c0 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f000 f8c4 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d124      	bne.n	8003b8e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d11d      	bne.n	8003b8e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2209      	movs	r2, #9
 8003b58:	4252      	negs	r2, r2
 8003b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2204      	movs	r2, #4
 8003b60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	2203      	movs	r2, #3
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	0018      	movs	r0, r3
 8003b72:	f000 fc7f 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8003b76:	e007      	b.n	8003b88 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f000 f894 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	0018      	movs	r0, r3
 8003b84:	f000 f898 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	2210      	movs	r2, #16
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b10      	cmp	r3, #16
 8003b9a:	d125      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	2210      	movs	r2, #16
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2b10      	cmp	r3, #16
 8003ba8:	d11e      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2211      	movs	r2, #17
 8003bb0:	4252      	negs	r2, r2
 8003bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2208      	movs	r2, #8
 8003bb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	23c0      	movs	r3, #192	; 0xc0
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d004      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 fc52 	bl	8004474 <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e007      	b.n	8003be2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f000 f867 	bl	8003ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f000 f86b 	bl	8003cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d10f      	bne.n	8003c16 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d108      	bne.n	8003c16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	4252      	negs	r2, r2
 8003c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	0018      	movs	r0, r3
 8003c12:	f7fc ffe5 	bl	8000be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b80      	cmp	r3, #128	; 0x80
 8003c22:	d10f      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	2280      	movs	r2, #128	; 0x80
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	2b80      	cmp	r3, #128	; 0x80
 8003c30:	d108      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2281      	movs	r2, #129	; 0x81
 8003c38:	4252      	negs	r2, r2
 8003c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f000 f944 	bl	8003ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2240      	movs	r2, #64	; 0x40
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d10f      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2240      	movs	r2, #64	; 0x40
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d108      	bne.n	8003c72 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2241      	movs	r2, #65	; 0x41
 8003c66:	4252      	negs	r2, r2
 8003c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f000 f82b 	bl	8003cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d10f      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b20      	cmp	r3, #32
 8003c8c:	d108      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2221      	movs	r2, #33	; 0x21
 8003c94:	4252      	negs	r2, r2
 8003c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	f000 f90e 	bl	8003ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ca0:	46c0      	nop			; (mov r8, r8)
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b002      	add	sp, #8
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b002      	add	sp, #8
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b002      	add	sp, #8
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a2f      	ldr	r2, [pc, #188]	; (8003da8 <TIM_Base_SetConfig+0xd0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d003      	beq.n	8003cf8 <TIM_Base_SetConfig+0x20>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a2e      	ldr	r2, [pc, #184]	; (8003dac <TIM_Base_SetConfig+0xd4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d108      	bne.n	8003d0a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2270      	movs	r2, #112	; 0x70
 8003cfc:	4393      	bics	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a26      	ldr	r2, [pc, #152]	; (8003da8 <TIM_Base_SetConfig+0xd0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <TIM_Base_SetConfig+0x62>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a25      	ldr	r2, [pc, #148]	; (8003dac <TIM_Base_SetConfig+0xd4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00f      	beq.n	8003d3a <TIM_Base_SetConfig+0x62>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a24      	ldr	r2, [pc, #144]	; (8003db0 <TIM_Base_SetConfig+0xd8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00b      	beq.n	8003d3a <TIM_Base_SetConfig+0x62>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a23      	ldr	r2, [pc, #140]	; (8003db4 <TIM_Base_SetConfig+0xdc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d007      	beq.n	8003d3a <TIM_Base_SetConfig+0x62>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a22      	ldr	r2, [pc, #136]	; (8003db8 <TIM_Base_SetConfig+0xe0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d003      	beq.n	8003d3a <TIM_Base_SetConfig+0x62>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a21      	ldr	r2, [pc, #132]	; (8003dbc <TIM_Base_SetConfig+0xe4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d108      	bne.n	8003d4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4a20      	ldr	r2, [pc, #128]	; (8003dc0 <TIM_Base_SetConfig+0xe8>)
 8003d3e:	4013      	ands	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2280      	movs	r2, #128	; 0x80
 8003d50:	4393      	bics	r3, r2
 8003d52:	001a      	movs	r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a0c      	ldr	r2, [pc, #48]	; (8003da8 <TIM_Base_SetConfig+0xd0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00b      	beq.n	8003d92 <TIM_Base_SetConfig+0xba>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <TIM_Base_SetConfig+0xdc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d007      	beq.n	8003d92 <TIM_Base_SetConfig+0xba>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a0c      	ldr	r2, [pc, #48]	; (8003db8 <TIM_Base_SetConfig+0xe0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d003      	beq.n	8003d92 <TIM_Base_SetConfig+0xba>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a0b      	ldr	r2, [pc, #44]	; (8003dbc <TIM_Base_SetConfig+0xe4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d103      	bne.n	8003d9a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	691a      	ldr	r2, [r3, #16]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	615a      	str	r2, [r3, #20]
}
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b004      	add	sp, #16
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	40012c00 	.word	0x40012c00
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40002000 	.word	0x40002000
 8003db4:	40014000 	.word	0x40014000
 8003db8:	40014400 	.word	0x40014400
 8003dbc:	40014800 	.word	0x40014800
 8003dc0:	fffffcff 	.word	0xfffffcff

08003dc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	221f      	movs	r2, #31
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	409a      	lsls	r2, r3
 8003dda:	0013      	movs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	43d2      	mvns	r2, r2
 8003de6:	401a      	ands	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a1a      	ldr	r2, [r3, #32]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	211f      	movs	r1, #31
 8003df4:	400b      	ands	r3, r1
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4099      	lsls	r1, r3
 8003dfa:	000b      	movs	r3, r1
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	621a      	str	r2, [r3, #32]
}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	46bd      	mov	sp, r7
 8003e06:	b006      	add	sp, #24
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	223c      	movs	r2, #60	; 0x3c
 8003e1a:	5c9b      	ldrb	r3, [r3, r2]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e041      	b.n	8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	223c      	movs	r2, #60	; 0x3c
 8003e28:	2101      	movs	r1, #1
 8003e2a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	223d      	movs	r2, #61	; 0x3d
 8003e30:	2102      	movs	r1, #2
 8003e32:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2270      	movs	r2, #112	; 0x70
 8003e48:	4393      	bics	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a13      	ldr	r2, [pc, #76]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d009      	beq.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a11      	ldr	r2, [pc, #68]	; (8003eb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d004      	beq.n	8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a10      	ldr	r2, [pc, #64]	; (8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d10c      	bne.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2280      	movs	r2, #128	; 0x80
 8003e80:	4393      	bics	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	223d      	movs	r2, #61	; 0x3d
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	223c      	movs	r2, #60	; 0x3c
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b004      	add	sp, #16
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	40014000 	.word	0x40014000

08003ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ec4:	46c0      	nop			; (mov r8, r8)
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	b002      	add	sp, #8
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ed4:	46c0      	nop			; (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b002      	add	sp, #8
 8003eda:	bd80      	pop	{r7, pc}

08003edc <MODE_BatteryCharging>:
#include "control_bat.h"

#define BAT_ControlSwitch(x) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, x)

void MODE_BatteryCharging(BAT_t *bat)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	while ((bat->BAT_Current < 0) && ((GPIOA->ODR & 0x11) == 1))
 8003ee4:	e03b      	b.n	8003f5e <MODE_BatteryCharging+0x82>
	{
		for (uint8_t i = 0; i < bat->number_of_cells; i++)
 8003ee6:	230f      	movs	r3, #15
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	e02e      	b.n	8003f4e <MODE_BatteryCharging+0x72>
		{
			while (bat->BAT_Voltage[i] > bat->BAT_UpperThreshold)
			{
				BAT_ControlSwitch(0);
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	0119      	lsls	r1, r3, #4
 8003ef4:	2390      	movs	r3, #144	; 0x90
 8003ef6:	05db      	lsls	r3, r3, #23
 8003ef8:	2200      	movs	r2, #0
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7fe fca7 	bl	800284e <HAL_GPIO_WritePin>
				bat->BAT_State = BAT_OVERCHARGE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2240      	movs	r2, #64	; 0x40
 8003f04:	2102      	movs	r1, #2
 8003f06:	5499      	strb	r1, [r3, r2]
				break;
 8003f08:	e00f      	b.n	8003f2a <MODE_BatteryCharging+0x4e>
			while (bat->BAT_Voltage[i] > bat->BAT_UpperThreshold)
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	230f      	movs	r3, #15
 8003f0e:	18fb      	adds	r3, r7, r3
 8003f10:	781a      	ldrb	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3214      	adds	r2, #20
 8003f16:	0092      	lsls	r2, r2, #2
 8003f18:	58d2      	ldr	r2, [r2, r3]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f1e:	1c19      	adds	r1, r3, #0
 8003f20:	1c10      	adds	r0, r2, #0
 8003f22:	f7fc f9a3 	bl	800026c <__aeabi_fcmpgt>
 8003f26:	1e03      	subs	r3, r0, #0
 8003f28:	d1e2      	bne.n	8003ef0 <MODE_BatteryCharging+0x14>
			}
			BAT_ControlSwitch(1);
 8003f2a:	2380      	movs	r3, #128	; 0x80
 8003f2c:	0119      	lsls	r1, r3, #4
 8003f2e:	2390      	movs	r3, #144	; 0x90
 8003f30:	05db      	lsls	r3, r3, #23
 8003f32:	2201      	movs	r2, #1
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7fe fc8a 	bl	800284e <HAL_GPIO_WritePin>
			bat->BAT_State = BAT_NORMAL;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2240      	movs	r2, #64	; 0x40
 8003f3e:	2100      	movs	r1, #0
 8003f40:	5499      	strb	r1, [r3, r2]
		for (uint8_t i = 0; i < bat->number_of_cells; i++)
 8003f42:	210f      	movs	r1, #15
 8003f44:	187b      	adds	r3, r7, r1
 8003f46:	781a      	ldrb	r2, [r3, #0]
 8003f48:	187b      	adds	r3, r7, r1
 8003f4a:	3201      	adds	r2, #1
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2241      	movs	r2, #65	; 0x41
 8003f52:	5c9b      	ldrb	r3, [r3, r2]
 8003f54:	220f      	movs	r2, #15
 8003f56:	18ba      	adds	r2, r7, r2
 8003f58:	7812      	ldrb	r2, [r2, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d3d5      	bcc.n	8003f0a <MODE_BatteryCharging+0x2e>
	while ((bat->BAT_Current < 0) && ((GPIOA->ODR & 0x11) == 1))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f62:	2100      	movs	r1, #0
 8003f64:	1c18      	adds	r0, r3, #0
 8003f66:	f7fc f96d 	bl	8000244 <__aeabi_fcmplt>
 8003f6a:	1e03      	subs	r3, r0, #0
 8003f6c:	d100      	bne.n	8003f70 <MODE_BatteryCharging+0x94>
		}
	}
}
 8003f6e:	e006      	b.n	8003f7e <MODE_BatteryCharging+0xa2>
	while ((bat->BAT_Current < 0) && ((GPIOA->ODR & 0x11) == 1))
 8003f70:	2390      	movs	r3, #144	; 0x90
 8003f72:	05db      	lsls	r3, r3, #23
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	2211      	movs	r2, #17
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d0b3      	beq.n	8003ee6 <MODE_BatteryCharging+0xa>
}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b004      	add	sp, #16
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <MODE_BatteryDischarging>:

void MODE_BatteryDischarging(BAT_t *bat)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
	while (bat->BAT_Current > bat->BAT_CurrentThreshold)
 8003f8e:	e00b      	b.n	8003fa8 <MODE_BatteryDischarging+0x22>
	{
		BAT_ControlSwitch(0);
 8003f90:	2380      	movs	r3, #128	; 0x80
 8003f92:	0119      	lsls	r1, r3, #4
 8003f94:	2390      	movs	r3, #144	; 0x90
 8003f96:	05db      	lsls	r3, r3, #23
 8003f98:	2200      	movs	r2, #0
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f7fe fc57 	bl	800284e <HAL_GPIO_WritePin>
		bat->BAT_State = BAT_OVERDISCHARGE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2240      	movs	r2, #64	; 0x40
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	5499      	strb	r1, [r3, r2]
	while (bat->BAT_Current > bat->BAT_CurrentThreshold)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb0:	1c19      	adds	r1, r3, #0
 8003fb2:	1c10      	adds	r0, r2, #0
 8003fb4:	f7fc f95a 	bl	800026c <__aeabi_fcmpgt>
 8003fb8:	1e03      	subs	r3, r0, #0
 8003fba:	d1e9      	bne.n	8003f90 <MODE_BatteryDischarging+0xa>
	}
	BAT_ControlSwitch(1);
 8003fbc:	2380      	movs	r3, #128	; 0x80
 8003fbe:	0119      	lsls	r1, r3, #4
 8003fc0:	2390      	movs	r3, #144	; 0x90
 8003fc2:	05db      	lsls	r3, r3, #23
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f7fe fc41 	bl	800284e <HAL_GPIO_WritePin>
	bat->BAT_State = BAT_NORMAL;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2240      	movs	r2, #64	; 0x40
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	5499      	strb	r1, [r3, r2]
}
 8003fd4:	46c0      	nop			; (mov r8, r8)
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b002      	add	sp, #8
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <MODE_BatteryStoring>:

void MODE_BatteryStoring(BAT_t *bat)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	BAT_ControlSwitch(0);
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	0119      	lsls	r1, r3, #4
 8003fe8:	2390      	movs	r3, #144	; 0x90
 8003fea:	05db      	lsls	r3, r3, #23
 8003fec:	2200      	movs	r2, #0
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f7fe fc2d 	bl	800284e <HAL_GPIO_WritePin>
	bat->BAT_State = BAT_NORMAL;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2240      	movs	r2, #64	; 0x40
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	5499      	strb	r1, [r3, r2]
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b002      	add	sp, #8
 8004002:	bd80      	pop	{r7, pc}

08004004 <MODE_BatteryManager>:

void MODE_BatteryManager(BAT_t *bat, MODE_t bat_mode)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	000a      	movs	r2, r1
 800400e:	1cfb      	adds	r3, r7, #3
 8004010:	701a      	strb	r2, [r3, #0]
	switch(bat_mode)
 8004012:	1cfb      	adds	r3, r7, #3
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d00f      	beq.n	800403a <MODE_BatteryManager+0x36>
 800401a:	dc13      	bgt.n	8004044 <MODE_BatteryManager+0x40>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <MODE_BatteryManager+0x22>
 8004020:	2b01      	cmp	r3, #1
 8004022:	d005      	beq.n	8004030 <MODE_BatteryManager+0x2c>
		break;
	case STORING_MODE:
		MODE_BatteryStoring(bat);
		break;
	}
}
 8004024:	e00e      	b.n	8004044 <MODE_BatteryManager+0x40>
		MODE_BatteryCharging(bat);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	0018      	movs	r0, r3
 800402a:	f7ff ff57 	bl	8003edc <MODE_BatteryCharging>
		break;
 800402e:	e009      	b.n	8004044 <MODE_BatteryManager+0x40>
		MODE_BatteryDischarging(bat);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	0018      	movs	r0, r3
 8004034:	f7ff ffa7 	bl	8003f86 <MODE_BatteryDischarging>
		break;
 8004038:	e004      	b.n	8004044 <MODE_BatteryManager+0x40>
		MODE_BatteryStoring(bat);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	0018      	movs	r0, r3
 800403e:	f7ff ffcd 	bl	8003fdc <MODE_BatteryStoring>
		break;
 8004042:	46c0      	nop			; (mov r8, r8)
}
 8004044:	46c0      	nop			; (mov r8, r8)
 8004046:	46bd      	mov	sp, r7
 8004048:	b002      	add	sp, #8
 800404a:	bd80      	pop	{r7, pc}

0800404c <TASK_GetBatteryData>:
 *      Author: phang
 */
#include "get_data.h"

void TASK_GetBatteryData(BAT_t *bat)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
	  BAT_GetVoltageAllCells(bat);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	0018      	movs	r0, r3
 8004058:	f000 f92e 	bl	80042b8 <BAT_GetVoltageAllCells>
	  BAT_GetCurremt(bat);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	0018      	movs	r0, r3
 8004060:	f000 f974 	bl	800434c <BAT_GetCurremt>
	  BAT_GetTemperature(bat);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	0018      	movs	r0, r3
 8004068:	f000 f99a 	bl	80043a0 <BAT_GetTemperature>
}
 800406c:	46c0      	nop			; (mov r8, r8)
 800406e:	46bd      	mov	sp, r7
 8004070:	b002      	add	sp, #8
 8004072:	bd80      	pop	{r7, pc}

08004074 <BUTTON_PressingCallback>:
 * 
 * @param p_button 
 * @return __weak 
 */
__weak void BUTTON_PressingCallback(BUTTON_t *p_button)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
	;
}
 800407c:	46c0      	nop			; (mov r8, r8)
 800407e:	46bd      	mov	sp, r7
 8004080:	b002      	add	sp, #8
 8004082:	bd80      	pop	{r7, pc}

08004084 <BUTTON_ShortPressingCallback>:
 * 
 * @param p_button 
 * @return __weak 
 */
__weak void BUTTON_ShortPressingCallback(BUTTON_t *p_button)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
	;
}
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	b002      	add	sp, #8
 8004092:	bd80      	pop	{r7, pc}

08004094 <BUTTON_LongPressingCallback>:
 * 
 * @param p_button 
 * @return __weak 
 */
__weak void BUTTON_LongPressingCallback(BUTTON_t *p_button)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	;
}
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	46bd      	mov	sp, r7
 80040a0:	b002      	add	sp, #8
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <BUTTON_ReleasingCallback>:
 * 
 * @param p_button 
 * @return __weak 
 */
__weak void BUTTON_ReleasingCallback(BUTTON_t *p_button)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	;
}
 80040ac:	46c0      	nop			; (mov r8, r8)
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b002      	add	sp, #8
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <BUTTON_Init>:
 * @param p_button 
 * @param GPIOx 
 * @param GPIO_Pin 
 */
void BUTTON_Init(BUTTON_t *p_button, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	1dbb      	adds	r3, r7, #6
 80040c0:	801a      	strh	r2, [r3, #0]
    p_button->GPIOx = GPIOx;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	611a      	str	r2, [r3, #16]
    p_button->GPIO_Pin = GPIO_Pin;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	1dba      	adds	r2, r7, #6
 80040cc:	8812      	ldrh	r2, [r2, #0]
 80040ce:	829a      	strh	r2, [r3, #20]
    p_button->button_current_state = NOT_PRESSING;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
    p_button->button_last_state = NOT_PRESSING;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	705a      	strb	r2, [r3, #1]
    p_button->button_filter = BUTTON_FILTER;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	709a      	strb	r2, [r3, #2]
    p_button->is_debouncing = NOT_DEBOUNCING;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	70da      	strb	r2, [r3, #3]
    p_button->is_press_long = NOT_PRESS_LONG;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	711a      	strb	r2, [r3, #4]
}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b004      	add	sp, #16
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <BUTTON_Handle>:
 * @brief 
 * 
 * @param p_button 
 */
void BUTTON_Handle(BUTTON_t *p_button)
{
 80040f6:	b5b0      	push	{r4, r5, r7, lr}
 80040f8:	b084      	sub	sp, #16
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
    uint8_t temp_state = HAL_GPIO_ReadPin(p_button->GPIOx,p_button->GPIO_Pin);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691a      	ldr	r2, [r3, #16]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	8a9b      	ldrh	r3, [r3, #20]
 8004106:	250f      	movs	r5, #15
 8004108:	197c      	adds	r4, r7, r5
 800410a:	0019      	movs	r1, r3
 800410c:	0010      	movs	r0, r2
 800410e:	f7fe fb81 	bl	8002814 <HAL_GPIO_ReadPin>
 8004112:	0003      	movs	r3, r0
 8004114:	7023      	strb	r3, [r4, #0]

    if (temp_state != p_button->button_filter)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	789b      	ldrb	r3, [r3, #2]
 800411a:	197a      	adds	r2, r7, r5
 800411c:	7812      	ldrb	r2, [r2, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d00b      	beq.n	800413a <BUTTON_Handle+0x44>
    {
    	p_button->button_filter = temp_state;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	197a      	adds	r2, r7, r5
 8004126:	7812      	ldrb	r2, [r2, #0]
 8004128:	709a      	strb	r2, [r3, #2]
    	p_button->is_debouncing = DEBOUNCING;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	70da      	strb	r2, [r3, #3]
    	p_button->debounce_time = HAL_GetTick();
 8004130:	f7fd fb00 	bl	8001734 <HAL_GetTick>
 8004134:	0002      	movs	r2, r0
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	609a      	str	r2, [r3, #8]
    }

    if (p_button->is_debouncing && (HAL_GetTick() - p_button->debounce_time >= BUTTON_DEBOUNCING_TIME))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	78db      	ldrb	r3, [r3, #3]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00e      	beq.n	8004160 <BUTTON_Handle+0x6a>
 8004142:	f7fd faf7 	bl	8001734 <HAL_GetTick>
 8004146:	0002      	movs	r2, r0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b0e      	cmp	r3, #14
 8004150:	d906      	bls.n	8004160 <BUTTON_Handle+0x6a>
    {
    	p_button->button_current_state = p_button->button_filter;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	789a      	ldrb	r2, [r3, #2]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	701a      	strb	r2, [r3, #0]
    	p_button->is_debouncing = NOT_DEBOUNCING;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	70da      	strb	r2, [r3, #3]
    }

    if (p_button->button_current_state != p_button->button_last_state)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	785b      	ldrb	r3, [r3, #1]
 8004168:	429a      	cmp	r2, r3
 800416a:	d029      	beq.n	80041c0 <BUTTON_Handle+0xca>
    {
    	if (p_button->button_current_state == PRESSING)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10c      	bne.n	800418e <BUTTON_Handle+0x98>
    	{
    		BUTTON_PressingCallback(p_button);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	0018      	movs	r0, r3
 8004178:	f7ff ff7c 	bl	8004074 <BUTTON_PressingCallback>
    		p_button->is_press_long = PRESS_LONG;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	711a      	strb	r2, [r3, #4]
    		p_button->time_start_press = HAL_GetTick();
 8004182:	f7fd fad7 	bl	8001734 <HAL_GetTick>
 8004186:	0002      	movs	r2, r0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	60da      	str	r2, [r3, #12]
 800418c:	e014      	b.n	80041b8 <BUTTON_Handle+0xc2>
    	}
    	else
    	{
    		p_button->is_press_long = NOT_PRESS_LONG;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	711a      	strb	r2, [r3, #4]
    		if (HAL_GetTick() - p_button->time_start_press <= BUTTON_PRESS_SHORT_TIME)
 8004194:	f7fd face 	bl	8001734 <HAL_GetTick>
 8004198:	0002      	movs	r2, r0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	1ad2      	subs	r2, r2, r3
 80041a0:	23fa      	movs	r3, #250	; 0xfa
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d803      	bhi.n	80041b0 <BUTTON_Handle+0xba>
    		{
    			BUTTON_ShortPressingCallback(p_button);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0018      	movs	r0, r3
 80041ac:	f7ff ff6a 	bl	8004084 <BUTTON_ShortPressingCallback>
    		}
    		BUTTON_ReleasingCallback(p_button);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	0018      	movs	r0, r3
 80041b4:	f7ff ff76 	bl	80040a4 <BUTTON_ReleasingCallback>
    	}
    	p_button->button_last_state = p_button->button_current_state;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	781a      	ldrb	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	705a      	strb	r2, [r3, #1]
    }

    if (p_button->is_press_long && (HAL_GetTick() -  p_button->time_start_press >= BUTTON_PRESS_LONG_TIME))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	791b      	ldrb	r3, [r3, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d010      	beq.n	80041ea <BUTTON_Handle+0xf4>
 80041c8:	f7fd fab4 	bl	8001734 <HAL_GetTick>
 80041cc:	0002      	movs	r2, r0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	1ad2      	subs	r2, r2, r3
 80041d4:	23fa      	movs	r3, #250	; 0xfa
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	429a      	cmp	r2, r3
 80041da:	d306      	bcc.n	80041ea <BUTTON_Handle+0xf4>
    {
    	BUTTON_LongPressingCallback(p_button);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	0018      	movs	r0, r3
 80041e0:	f7ff ff58 	bl	8004094 <BUTTON_LongPressingCallback>
    	p_button->is_press_long = NOT_PRESS_LONG;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	711a      	strb	r2, [r3, #4]
    }
}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	46bd      	mov	sp, r7
 80041ee:	b004      	add	sp, #16
 80041f0:	bdb0      	pop	{r4, r5, r7, pc}

080041f2 <BAT_InitInfo>:
#define TEMP_COFF	0.01611

BAT_SystemStatus BAT_InitInfo(BAT_t *bat,
								ADC_HandleTypeDef bat_adc,
								BAT_Size number_of_cells)
{
 80041f2:	b084      	sub	sp, #16
 80041f4:	b5b0      	push	{r4, r5, r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	2004      	movs	r0, #4
 80041fe:	2418      	movs	r4, #24
 8004200:	1900      	adds	r0, r0, r4
 8004202:	2508      	movs	r5, #8
 8004204:	46ac      	mov	ip, r5
 8004206:	44bc      	add	ip, r7
 8004208:	4460      	add	r0, ip
 800420a:	6001      	str	r1, [r0, #0]
 800420c:	6042      	str	r2, [r0, #4]
 800420e:	6083      	str	r3, [r0, #8]
	bat->BAT_adc = bat_adc;
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	2304      	movs	r3, #4
 8004214:	191b      	adds	r3, r3, r4
 8004216:	2108      	movs	r1, #8
 8004218:	468c      	mov	ip, r1
 800421a:	44bc      	add	ip, r7
 800421c:	4463      	add	r3, ip
 800421e:	0010      	movs	r0, r2
 8004220:	0019      	movs	r1, r3
 8004222:	2340      	movs	r3, #64	; 0x40
 8004224:	001a      	movs	r2, r3
 8004226:	f000 f98d 	bl	8004544 <memcpy>
	bat->number_of_cells = number_of_cells;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2244      	movs	r2, #68	; 0x44
 800422e:	1912      	adds	r2, r2, r4
 8004230:	2108      	movs	r1, #8
 8004232:	468c      	mov	ip, r1
 8004234:	44bc      	add	ip, r7
 8004236:	4462      	add	r2, ip
 8004238:	2141      	movs	r1, #65	; 0x41
 800423a:	7812      	ldrb	r2, [r2, #0]
 800423c:	545a      	strb	r2, [r3, r1]
	bat->BAT_Temperature[0] = 0;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	669a      	str	r2, [r3, #104]	; 0x68
	bat->BAT_Temperature[1] = 0;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	66da      	str	r2, [r3, #108]	; 0x6c
	bat->BAT_Current = 0;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	671a      	str	r2, [r3, #112]	; 0x70
	bat->BAT_CurrentThreshold = 0;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	675a      	str	r2, [r3, #116]	; 0x74
	bat->BAT_UpperThreshold = 0;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	665a      	str	r2, [r3, #100]	; 0x64
	bat->BAT_LowerThreshold = 0;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	661a      	str	r2, [r3, #96]	; 0x60
	for (uint8_t i = 0; i < number_of_cells; i++)
 8004262:	230f      	movs	r3, #15
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	e00c      	b.n	8004286 <BAT_InitInfo+0x94>
	{
		bat->BAT_Voltage[i] = 0;
 800426c:	200f      	movs	r0, #15
 800426e:	183b      	adds	r3, r7, r0
 8004270:	781a      	ldrb	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3214      	adds	r2, #20
 8004276:	0092      	lsls	r2, r2, #2
 8004278:	2100      	movs	r1, #0
 800427a:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < number_of_cells; i++)
 800427c:	183b      	adds	r3, r7, r0
 800427e:	781a      	ldrb	r2, [r3, #0]
 8004280:	183b      	adds	r3, r7, r0
 8004282:	3201      	adds	r2, #1
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	230f      	movs	r3, #15
 8004288:	18fa      	adds	r2, r7, r3
 800428a:	2344      	movs	r3, #68	; 0x44
 800428c:	2118      	movs	r1, #24
 800428e:	185b      	adds	r3, r3, r1
 8004290:	2108      	movs	r1, #8
 8004292:	468c      	mov	ip, r1
 8004294:	44bc      	add	ip, r7
 8004296:	4463      	add	r3, ip
 8004298:	7812      	ldrb	r2, [r2, #0]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d3e5      	bcc.n	800426c <BAT_InitInfo+0x7a>
	}
	HAL_ADCEx_Calibration_Start(&bat->BAT_adc);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	0018      	movs	r0, r3
 80042a4:	f7fd fe28 	bl	8001ef8 <HAL_ADCEx_Calibration_Start>

}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	0018      	movs	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b004      	add	sp, #16
 80042b0:	bcb0      	pop	{r4, r5, r7}
 80042b2:	bc08      	pop	{r3}
 80042b4:	b004      	add	sp, #16
 80042b6:	4718      	bx	r3

080042b8 <BAT_GetVoltageAllCells>:

void BAT_GetVoltageAllCells(BAT_t *bat)
{
 80042b8:	b5b0      	push	{r4, r5, r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&bat->BAT_adc, bat->BAT_adc_value, 7);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3342      	adds	r3, #66	; 0x42
 80042c6:	2207      	movs	r2, #7
 80042c8:	0019      	movs	r1, r3
 80042ca:	f7fd fb7d 	bl	80019c8 <HAL_ADC_Start_DMA>
	for (uint8_t i = 0; i < bat->number_of_cells; i++)
 80042ce:	230f      	movs	r3, #15
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e027      	b.n	8004328 <BAT_GetVoltageAllCells+0x70>
	{
		bat->BAT_Voltage[i] = (float) bat->BAT_adc_value[i]*VOLT_COFF;
 80042d8:	240f      	movs	r4, #15
 80042da:	193b      	adds	r3, r7, r4
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	3320      	adds	r3, #32
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	18d3      	adds	r3, r2, r3
 80042e6:	3302      	adds	r3, #2
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	0018      	movs	r0, r3
 80042ec:	f7fc f882 	bl	80003f4 <__aeabi_ui2f>
 80042f0:	1c03      	adds	r3, r0, #0
 80042f2:	1c18      	adds	r0, r3, #0
 80042f4:	f7fc fb88 	bl	8000a08 <__aeabi_f2d>
 80042f8:	4a12      	ldr	r2, [pc, #72]	; (8004344 <BAT_GetVoltageAllCells+0x8c>)
 80042fa:	4b13      	ldr	r3, [pc, #76]	; (8004348 <BAT_GetVoltageAllCells+0x90>)
 80042fc:	f7fc f8c2 	bl	8000484 <__aeabi_dmul>
 8004300:	0002      	movs	r2, r0
 8004302:	000b      	movs	r3, r1
 8004304:	0025      	movs	r5, r4
 8004306:	1939      	adds	r1, r7, r4
 8004308:	780c      	ldrb	r4, [r1, #0]
 800430a:	0010      	movs	r0, r2
 800430c:	0019      	movs	r1, r3
 800430e:	f7fc fbc3 	bl	8000a98 <__aeabi_d2f>
 8004312:	1c01      	adds	r1, r0, #0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	0022      	movs	r2, r4
 8004318:	3214      	adds	r2, #20
 800431a:	0092      	lsls	r2, r2, #2
 800431c:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < bat->number_of_cells; i++)
 800431e:	197b      	adds	r3, r7, r5
 8004320:	781a      	ldrb	r2, [r3, #0]
 8004322:	197b      	adds	r3, r7, r5
 8004324:	3201      	adds	r2, #1
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2241      	movs	r2, #65	; 0x41
 800432c:	5c9b      	ldrb	r3, [r3, r2]
 800432e:	220f      	movs	r2, #15
 8004330:	18ba      	adds	r2, r7, r2
 8004332:	7812      	ldrb	r2, [r2, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d3cf      	bcc.n	80042d8 <BAT_GetVoltageAllCells+0x20>
	}
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	46bd      	mov	sp, r7
 800433e:	b004      	add	sp, #16
 8004340:	bdb0      	pop	{r4, r5, r7, pc}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	6540cc79 	.word	0x6540cc79
 8004348:	3ff57bfc 	.word	0x3ff57bfc

0800434c <BAT_GetCurremt>:

void BAT_GetCurremt(BAT_t *bat)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&bat->BAT_adc, bat->BAT_adc_value, 7);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3342      	adds	r3, #66	; 0x42
 800435a:	2207      	movs	r2, #7
 800435c:	0019      	movs	r1, r3
 800435e:	f7fd fb33 	bl	80019c8 <HAL_ADC_Start_DMA>
	bat->BAT_Current = (float) bat->BAT_adc_value[6]*CURR_COFF;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	224e      	movs	r2, #78	; 0x4e
 8004366:	5a9b      	ldrh	r3, [r3, r2]
 8004368:	0018      	movs	r0, r3
 800436a:	f7fc f843 	bl	80003f4 <__aeabi_ui2f>
 800436e:	1c03      	adds	r3, r0, #0
 8004370:	1c18      	adds	r0, r3, #0
 8004372:	f7fc fb49 	bl	8000a08 <__aeabi_f2d>
 8004376:	4a08      	ldr	r2, [pc, #32]	; (8004398 <BAT_GetCurremt+0x4c>)
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <BAT_GetCurremt+0x50>)
 800437a:	f7fc f883 	bl	8000484 <__aeabi_dmul>
 800437e:	0002      	movs	r2, r0
 8004380:	000b      	movs	r3, r1
 8004382:	0010      	movs	r0, r2
 8004384:	0019      	movs	r1, r3
 8004386:	f7fc fb87 	bl	8000a98 <__aeabi_d2f>
 800438a:	1c02      	adds	r2, r0, #0
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b002      	add	sp, #8
 8004396:	bd80      	pop	{r7, pc}
 8004398:	2a9930be 	.word	0x2a9930be
 800439c:	3f949518 	.word	0x3f949518

080043a0 <BAT_GetTemperature>:

void BAT_GetTemperature(BAT_t *bat)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&bat->BAT_adc, bat->BAT_adc_value, 7);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3342      	adds	r3, #66	; 0x42
 80043ae:	2207      	movs	r2, #7
 80043b0:	0019      	movs	r1, r3
 80043b2:	f7fd fb09 	bl	80019c8 <HAL_ADC_Start_DMA>
	bat->BAT_Temperature[0] = (float) bat->BAT_adc_value[4]*TEMP_COFF;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	224a      	movs	r2, #74	; 0x4a
 80043ba:	5a9b      	ldrh	r3, [r3, r2]
 80043bc:	0018      	movs	r0, r3
 80043be:	f7fc f819 	bl	80003f4 <__aeabi_ui2f>
 80043c2:	1c03      	adds	r3, r0, #0
 80043c4:	1c18      	adds	r0, r3, #0
 80043c6:	f7fc fb1f 	bl	8000a08 <__aeabi_f2d>
 80043ca:	4a14      	ldr	r2, [pc, #80]	; (800441c <BAT_GetTemperature+0x7c>)
 80043cc:	4b14      	ldr	r3, [pc, #80]	; (8004420 <BAT_GetTemperature+0x80>)
 80043ce:	f7fc f859 	bl	8000484 <__aeabi_dmul>
 80043d2:	0002      	movs	r2, r0
 80043d4:	000b      	movs	r3, r1
 80043d6:	0010      	movs	r0, r2
 80043d8:	0019      	movs	r1, r3
 80043da:	f7fc fb5d 	bl	8000a98 <__aeabi_d2f>
 80043de:	1c02      	adds	r2, r0, #0
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	669a      	str	r2, [r3, #104]	; 0x68
	bat->BAT_Temperature[1] = (float) bat->BAT_adc_value[5]*TEMP_COFF;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	224c      	movs	r2, #76	; 0x4c
 80043e8:	5a9b      	ldrh	r3, [r3, r2]
 80043ea:	0018      	movs	r0, r3
 80043ec:	f7fc f802 	bl	80003f4 <__aeabi_ui2f>
 80043f0:	1c03      	adds	r3, r0, #0
 80043f2:	1c18      	adds	r0, r3, #0
 80043f4:	f7fc fb08 	bl	8000a08 <__aeabi_f2d>
 80043f8:	4a08      	ldr	r2, [pc, #32]	; (800441c <BAT_GetTemperature+0x7c>)
 80043fa:	4b09      	ldr	r3, [pc, #36]	; (8004420 <BAT_GetTemperature+0x80>)
 80043fc:	f7fc f842 	bl	8000484 <__aeabi_dmul>
 8004400:	0002      	movs	r2, r0
 8004402:	000b      	movs	r3, r1
 8004404:	0010      	movs	r0, r2
 8004406:	0019      	movs	r1, r3
 8004408:	f7fc fb46 	bl	8000a98 <__aeabi_d2f>
 800440c:	1c02      	adds	r2, r0, #0
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	46bd      	mov	sp, r7
 8004416:	b002      	add	sp, #8
 8004418:	bd80      	pop	{r7, pc}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	cc8de2ac 	.word	0xcc8de2ac
 8004420:	3f907f23 	.word	0x3f907f23

08004424 <RE_ClockwiseCallback>:
#include "rotary_encoder.h"

__weak void RE_ClockwiseCallback(RE_t *p_re)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	
}
 800442c:	46c0      	nop			; (mov r8, r8)
 800442e:	46bd      	mov	sp, r7
 8004430:	b002      	add	sp, #8
 8004432:	bd80      	pop	{r7, pc}

08004434 <RE_CounterClockwiseCallback>:
__weak void RE_CounterClockwiseCallback(RE_t *p_re)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
	
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}

08004444 <RE_Init>:

void RE_Init(RE_t *p_re, TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
	p_re->re_htim = htim;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	601a      	str	r2, [r3, #0]
	p_re->re_cur_value = 0;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	809a      	strh	r2, [r3, #4]
	p_re->re_pre_value = 0;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	80da      	strh	r2, [r3, #6]
	HAL_TIM_Encoder_Start_IT(p_re->re_htim, TIM_CHANNEL_ALL);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	213c      	movs	r1, #60	; 0x3c
 8004466:	0018      	movs	r0, r3
 8004468:	f7ff fa44 	bl	80038f4 <HAL_TIM_Encoder_Start_IT>
}
 800446c:	46c0      	nop			; (mov r8, r8)
 800446e:	46bd      	mov	sp, r7
 8004470:	b002      	add	sp, #8
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_TIM_IC_CaptureCallback>:
				p_re->re_cur_value = p_re->re_htim->Instance->CNT << 2;
			}
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b002      	add	sp, #8
 8004482:	bd80      	pop	{r7, pc}

08004484 <RE_Handle>:

void RE_Handle(RE_t *p_re)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
		if ((p_re->re_pre_value == 0) && (p_re->re_cur_value == 65532))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	88db      	ldrh	r3, [r3, #6]
 8004490:	b21b      	sxth	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <RE_Handle+0x16>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	889b      	ldrh	r3, [r3, #4]
		{
			RE_CounterClockwiseCallback(p_re);
			p_re->re_pre_value = p_re->re_cur_value;
		} else if ((p_re->re_pre_value == 65532) &&(p_re->re_cur_value == 0))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	88db      	ldrh	r3, [r3, #6]
		{
			RE_ClockwiseCallback(p_re);
			p_re->re_pre_value = p_re->re_cur_value;
		} else if (p_re->re_pre_value < p_re->re_cur_value)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	88db      	ldrh	r3, [r3, #6]
 80044a2:	b21a      	sxth	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	889b      	ldrh	r3, [r3, #4]
 80044a8:	b21b      	sxth	r3, r3
 80044aa:	429a      	cmp	r2, r3
 80044ac:	da09      	bge.n	80044c2 <RE_Handle+0x3e>
		{
			RE_ClockwiseCallback(p_re);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	0018      	movs	r0, r3
 80044b2:	f7ff ffb7 	bl	8004424 <RE_ClockwiseCallback>
			p_re->re_pre_value = p_re->re_cur_value;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	889b      	ldrh	r3, [r3, #4]
 80044ba:	b21a      	sxth	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	80da      	strh	r2, [r3, #6]
		} else if (p_re->re_pre_value > p_re->re_cur_value)
		{
			RE_CounterClockwiseCallback(p_re);
			p_re->re_pre_value = p_re->re_cur_value;
		}
}
 80044c0:	e010      	b.n	80044e4 <RE_Handle+0x60>
		} else if (p_re->re_pre_value > p_re->re_cur_value)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	88db      	ldrh	r3, [r3, #6]
 80044c6:	b21a      	sxth	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	889b      	ldrh	r3, [r3, #4]
 80044cc:	b21b      	sxth	r3, r3
 80044ce:	429a      	cmp	r2, r3
 80044d0:	dd08      	ble.n	80044e4 <RE_Handle+0x60>
			RE_CounterClockwiseCallback(p_re);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	0018      	movs	r0, r3
 80044d6:	f7ff ffad 	bl	8004434 <RE_CounterClockwiseCallback>
			p_re->re_pre_value = p_re->re_cur_value;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	889b      	ldrh	r3, [r3, #4]
 80044de:	b21a      	sxth	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	80da      	strh	r2, [r3, #6]
}
 80044e4:	46c0      	nop			; (mov r8, r8)
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b002      	add	sp, #8
 80044ea:	bd80      	pop	{r7, pc}

080044ec <memset>:
 80044ec:	0003      	movs	r3, r0
 80044ee:	1882      	adds	r2, r0, r2
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d100      	bne.n	80044f6 <memset+0xa>
 80044f4:	4770      	bx	lr
 80044f6:	7019      	strb	r1, [r3, #0]
 80044f8:	3301      	adds	r3, #1
 80044fa:	e7f9      	b.n	80044f0 <memset+0x4>

080044fc <__libc_init_array>:
 80044fc:	b570      	push	{r4, r5, r6, lr}
 80044fe:	2600      	movs	r6, #0
 8004500:	4c0c      	ldr	r4, [pc, #48]	; (8004534 <__libc_init_array+0x38>)
 8004502:	4d0d      	ldr	r5, [pc, #52]	; (8004538 <__libc_init_array+0x3c>)
 8004504:	1b64      	subs	r4, r4, r5
 8004506:	10a4      	asrs	r4, r4, #2
 8004508:	42a6      	cmp	r6, r4
 800450a:	d109      	bne.n	8004520 <__libc_init_array+0x24>
 800450c:	2600      	movs	r6, #0
 800450e:	f000 f823 	bl	8004558 <_init>
 8004512:	4c0a      	ldr	r4, [pc, #40]	; (800453c <__libc_init_array+0x40>)
 8004514:	4d0a      	ldr	r5, [pc, #40]	; (8004540 <__libc_init_array+0x44>)
 8004516:	1b64      	subs	r4, r4, r5
 8004518:	10a4      	asrs	r4, r4, #2
 800451a:	42a6      	cmp	r6, r4
 800451c:	d105      	bne.n	800452a <__libc_init_array+0x2e>
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	00b3      	lsls	r3, r6, #2
 8004522:	58eb      	ldr	r3, [r5, r3]
 8004524:	4798      	blx	r3
 8004526:	3601      	adds	r6, #1
 8004528:	e7ee      	b.n	8004508 <__libc_init_array+0xc>
 800452a:	00b3      	lsls	r3, r6, #2
 800452c:	58eb      	ldr	r3, [r5, r3]
 800452e:	4798      	blx	r3
 8004530:	3601      	adds	r6, #1
 8004532:	e7f2      	b.n	800451a <__libc_init_array+0x1e>
 8004534:	080045a0 	.word	0x080045a0
 8004538:	080045a0 	.word	0x080045a0
 800453c:	080045a4 	.word	0x080045a4
 8004540:	080045a0 	.word	0x080045a0

08004544 <memcpy>:
 8004544:	2300      	movs	r3, #0
 8004546:	b510      	push	{r4, lr}
 8004548:	429a      	cmp	r2, r3
 800454a:	d100      	bne.n	800454e <memcpy+0xa>
 800454c:	bd10      	pop	{r4, pc}
 800454e:	5ccc      	ldrb	r4, [r1, r3]
 8004550:	54c4      	strb	r4, [r0, r3]
 8004552:	3301      	adds	r3, #1
 8004554:	e7f8      	b.n	8004548 <memcpy+0x4>
	...

08004558 <_init>:
 8004558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455e:	bc08      	pop	{r3}
 8004560:	469e      	mov	lr, r3
 8004562:	4770      	bx	lr

08004564 <_fini>:
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456a:	bc08      	pop	{r3}
 800456c:	469e      	mov	lr, r3
 800456e:	4770      	bx	lr
